{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Reference Design Guideline for LSA Vehicles","text":"<p>!!! warning</p> <pre><code>The latest version is 0.1, but it has not been officially released yet.\n</code></pre>"},{"location":"#about-reference-design-guideline-for-lsa-vehicles","title":"About Reference Design Guideline for LSA Vehicles","text":"<p>This document serves a guideline to design and deploy a TRL-6 low speed autonomy vehicle based on Autoware. The readers can take this document as a starting point to select and configure the hardware and software components of the vehicles.</p> <p></p> <p>For more details about the reference design WG, its goals and details of the Autoware Foundation working groups that oversees the project, refer to the Reference Design WG wiki</p>"},{"location":"#reference-design-guideline-for-lsa-vehicles-documentation-structure","title":"Reference Design Guideline for LSA Vehicles documentation structure","text":""},{"location":"#getting-started","title":"Getting started","text":"<ul> <li>Start guide describes how to install, set up and run Autoware and its associated simulators on supported development platforms.</li> <li>System configuration describes the components that make up LSA vehicles in terms of the required hardware and software.</li> </ul>"},{"location":"#releases","title":"Releases","text":"<p>version 0.1 Latest</p>"},{"location":"version-0.1/","title":"Reference Design Guideline for LSA Vehicles","text":"<p>!!! warning</p> <pre><code>The latest version is 0.1, but it has not been officially released yet.\n</code></pre>"},{"location":"version-0.1/#about-reference-design-guideline-for-lsa-vehicles","title":"About Reference Design Guideline for LSA Vehicles","text":"<p>This document serves a guideline to design and deploy a TRL-6 low speed autonomy vehicle based on Autoware. The readers can take this document as a starting point to select and configure the hardware and software components of the vehicles. </p>"},{"location":"version-0.1/#reference-design-guideline-for-lsa-vehicles-documentation-structure","title":"Reference Design Guideline for LSA Vehicles documentation structure","text":"<p>The reference design WG publishes the guidelines for Low Speed Autonomy (LSA) vehicles, using the following document structure shown below.</p> <p></p> <p>For more details about the reference design WG, its goals and details of the Autoware Foundation working groups that oversees the project, refer to the Reference Design WG wiki</p>"},{"location":"version-0.1/#getting-started","title":"Getting started","text":"<ul> <li>ODD</li> <li>Hardware Configuration</li> <li>Software Configuration</li> <li>Evaluation and Testing</li> </ul>"},{"location":"version-0.1/#other-example-design","title":"Other Example Design","text":"<ul> <li> <p>RoboRacer (F1Tenth) describes the design and implementation of racing robots using Autoware.</p> </li> <li> <p>GoKart describes the design and implementation of EV GoKart using Autoware.</p> </li> <li> <p>KWT LSV describes the design and implementation of the LSV by KWT.</p> </li> <li> <p>Start guide describes how to install, set up and run Autoware and its associated simulators on supported development platforms.</p> </li> <li> <p>System configuration describes the components that make up LSA vehicles in terms of the required hardware and software.</p> </li> </ul>"},{"location":"version-0.1/OtherExampleDesigns/","title":"Other design examples","text":"<p>This page describes several examples of Autoware-based Low Speed Autonomy Vehicles. These examples are provided by the users and are shown as an example.</p> <ol> <li>RacingRobot (F1Tenth) demonstrates the deployment of Autoware on one tenth scale racing vehicles.</li> <li>GoKart demonstrates the deployment of Autoware on an EV GoCart.</li> <li>KingWayTek LSV shows how KingWayTek (Taiwan) designs their LSV to operate in Taiwan. </li> <li>Autoware Delivery Vehicles demonstrates the design of a delivery vehicle based on Autoware.</li> </ol>"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/","title":"Overview:","text":"<p>This document elaborates the hardware and software configurations for using Autoware for autonomous driving. Hence, it will serve as a guideline to select hardware and software components to build autonomous vehicles. However, this document is NOT prepared as neither step-by-step instructions nor Q&amp;A books, which will be provided as a reference link if available. </p>"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/#design-overview","title":"Design Overview:","text":""},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/#who-should-read","title":"Who should read:","text":"<p>One is interested in building your autonomous racing cars or low-cost platforms to learn Autoware, and looks for the place to start with. </p>"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/#references-and-resources","title":"References and Resources:","text":"<ul> <li>Complete F1Tenth documents: link</li> <li>Step-By-Step Instructions to deploy Autoware on F1Tenth: link</li> </ul>"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/#contributors-complete-list","title":"Contributors: complete list","text":""},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/#f1tenth-core-developers","title":"F1TENTH Core Developers","text":"<ul> <li>Hongrui (Billy) Zheng</li> <li>Johannes Betz</li> </ul>"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/#contributors","title":"Contributors","text":"<ul> <li>Matthew O\u2019Kelly</li> <li>Kim Luong</li> <li>Haoru Xue</li> <li>Joshua Whitley</li> <li>F1TENTH Lehigh and Rosa Zheng</li> <li>F1TENTH UCSD and Jack Silberman</li> <li>Jim Benson</li> </ul>"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/#community-outreach","title":"Community Outreach","text":"<ul> <li>Rahul Mangharam</li> <li>F1TENTH Clemson and Venkat Krovi</li> <li>Jaroslav Klap\u00e1lek</li> </ul>"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/#targeted-use-cases","title":"Targeted Use Cases","text":"Use Cases: Education Racing PoC Open AD Kit Commercial Services/Production F1Tenth"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/#odd","title":"ODD","text":"ODD Cargo Bus RoboTaxi Low Speed (Utility) Vehicle Delivery Robot F1Tenth"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/#automation-level","title":"Automation Level:","text":"Automation Level 0 1 2 3 4 5 F1Tenth"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/#system-architecture","title":"System Architecture","text":"<p>F1Tenth can be used for racing and education purpose. The simplest use case is to avoid colliding into the obstacle on a racing track. Meanwhile, one can also develop the SLAM algorithm to build the map on the fly and finishes the loop in short time. </p> <p>![[f1tenth_NX.webp]]</p>"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/#hardware-configuration","title":"Hardware Configuration","text":""},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/#chassis","title":"Chassis:","text":"<ul> <li>Traxxas Slash 4x4 Premium: link to purchase</li> <li>VESC Speed Controllers: # VESC 6 MK III</li> </ul>"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/#sensors","title":"Sensors:","text":"<ul> <li>Lidar: choose one<ul> <li>Hokuyo UTM-30LX</li> <li>Hokuyo 10LX</li> </ul> </li> <li>Camera (optional):<ul> <li>ZED 2</li> <li>Intel Real Sense</li> </ul> </li> </ul>"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/#computing-platforms","title":"Computing Platforms:","text":"<ul> <li>NVIDIA Jetson Xavier NX</li> <li>USB Hub (4 ports)</li> <li>(DEPRECATED) NVIDIA Jetson TX2</li> </ul> <p>![[together_NX_00.jpeg]]</p>"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/#software-configuration","title":"Software Configuration","text":"<ul> <li>Software on the car:<ul> <li>Operating System: Linux 20.04</li> <li>ROS: ROS2 galactic</li> <li>GPU Driver: nVidia: JetPack 5.1.1 (rev. 1)</li> <li>Autoware</li> <li>SLAM Toolbox to create and edit map: ros-galactic-slam-toolbox</li> </ul> </li> <li>Tools: <ul> <li>Simulator: f1tenth simulator</li> <li>VESC Tool for motor control: link</li> <li>Version Control tool: vcstool</li> </ul> </li> </ul>"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/","title":"Overview:","text":"<p>This document elaborates the hardware and software configurations for using Autoware for autonomous driving. Hence, it will serve as a guideline to select hardware and software components to build autonomous vehicles. However, this document is NOT prepared as neither step-by-step instructions nor Q&amp;A books, which will be provided as a reference link if available. </p>"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#design-overview","title":"Design Overview:","text":""},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#who-should-read","title":"Who should read:","text":"<p>One is interested in building your autonomous racing cars or low-cost platforms to learn Autoware, and looks for the place to start with. </p>"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#references-and-resources","title":"References and Resources:","text":"<ul> <li>Complete F1Tenth documents: link</li> <li>Step-By-Step Instructions to deploy Autoware on F1Tenth: link</li> </ul>"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#contributors-complete-list","title":"Contributors: complete list","text":""},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#f1tenth-core-developers","title":"F1TENTH Core Developers","text":"<ul> <li>Hongrui (Billy) Zheng</li> <li>Johannes Betz</li> </ul>"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#contributors","title":"Contributors","text":"<ul> <li>Matthew O\u2019Kelly</li> <li>Kim Luong</li> <li>Haoru Xue</li> <li>Joshua Whitley</li> <li>F1TENTH Lehigh and Rosa Zheng</li> <li>F1TENTH UCSD and Jack Silberman</li> <li>Jim Benson</li> </ul>"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#community-outreach","title":"Community Outreach","text":"<ul> <li>Rahul Mangharam</li> <li>F1TENTH Clemson and Venkat Krovi</li> <li>Jaroslav Klap\u00e1lek</li> </ul>"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#targeted-use-cases","title":"Targeted Use Cases","text":"Use Cases: Education Racing PoC Open AD Kit Commercial Services/Production F1Tenth"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#odd","title":"ODD","text":"ODD Cargo Bus RoboTaxi Low Speed (Utility) Vehicle Delivery Robot F1Tenth"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#automation-level","title":"Automation Level:","text":"Automation Level 0 1 2 3 4 5 F1Tenth"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#system-architecture","title":"System Architecture","text":"<p>F1Tenth can be used for racing and education purpose. The simplest use case is to avoid colliding into the obstacle on a racing track. Meanwhile, one can also develop the SLAM algorithm to build the map on the fly and finishes the loop in short time. </p> <p>![[f1tenth_NX.webp]]</p>"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#hardware-configuration","title":"Hardware Configuration","text":""},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#chassis","title":"Chassis:","text":"<ul> <li>Traxxas Slash 4x4 Premium: link to purchase</li> <li>VESC Speed Controllers: # VESC 6 MK III</li> </ul>"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#sensors","title":"Sensors:","text":"<ul> <li>Lidar: choose one<ul> <li>Hokuyo UTM-30LX</li> <li>Hokuyo 10LX</li> </ul> </li> <li>Camera (optional):<ul> <li>ZED 2</li> <li>Intel Real Sense</li> </ul> </li> </ul>"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#computing-platforms","title":"Computing Platforms:","text":"<ul> <li>NVIDIA Jetson Xavier NX</li> <li>USB Hub (4 ports)</li> <li>(DEPRECATED) NVIDIA Jetson TX2</li> </ul> <p>![[together_NX_00.jpeg]]</p>"},{"location":"version-0.1/OtherExampleDesigns/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#software-configuration","title":"Software Configuration","text":"<ul> <li>Software on the car:<ul> <li>Operating System: Linux 20.04</li> <li>ROS: ROS2 galactic</li> <li>GPU Driver: nVidia: JetPack 5.1.1 (rev. 1)</li> <li>Autoware</li> <li>SLAM Toolbox to create and edit map: ros-galactic-slam-toolbox</li> </ul> </li> <li>Tools: <ul> <li>Simulator: f1tenth simulator</li> <li>VESC Tool for motor control: link</li> <li>Version Control tool: vcstool</li> </ul> </li> </ul>"},{"location":"version-0.1/OtherExampleDesigns/GoKart/","title":"Overview:","text":"<p>This document elaborates the hardware and software configurations for using Autoware for autonomous driving. Hence, it will serve as a guideline to select hardware and software components to build autonomous vehicles. However, this document is NOT prepared as neither step-by-step instructions nor Q&amp;A books, which will be provided as a reference link if available. </p>"},{"location":"version-0.1/OtherExampleDesigns/GoKart/#design-overview","title":"Design Overview:","text":""},{"location":"version-0.1/OtherExampleDesigns/GoKart/#who-should-read","title":"Who should read:","text":"<p>One is interested in building your small size autonomous vehicles and looks for the place to start with. </p>"},{"location":"version-0.1/OtherExampleDesigns/GoKart/#references-and-resources","title":"References and Resources:","text":"<ul> <li>Complete Go-Kart with Autoware documents: link</li> <li> <p>ROS2 Foxy setup and autonomous code: link</p> </li> <li> <p>ROS2 Humble setup and autonomous code: Link</p> </li> <li> <p>STM32 nucleo controller code: link</p> </li> </ul>"},{"location":"version-0.1/OtherExampleDesigns/GoKart/#contributors","title":"Contributors:","text":"<ul> <li>Autoware Center of Excellence (under Prof. Rahul Mangharam)</li> </ul>"},{"location":"version-0.1/OtherExampleDesigns/GoKart/#targeted-use-cases","title":"Targeted Use Cases","text":"Use Cases: Education Racing PoC Open AD Kit Commercial Services/Production F1Tenth"},{"location":"version-0.1/OtherExampleDesigns/GoKart/#odd","title":"ODD","text":"ODD Cargo Bus RoboTaxi Low Speed (Utility) Vehicle Delivery Robot F1Tenth"},{"location":"version-0.1/OtherExampleDesigns/GoKart/#automation-level","title":"Automation Level:","text":"Automation Level 0 1 2 3 4 5 F1Tenth"},{"location":"version-0.1/OtherExampleDesigns/GoKart/#system-architecture","title":"System Architecture","text":"<p>Autonomous Go-Kart is a one-third scale autonomous go-kart autonomous vehicle for development and prototyping purpose. It can be used for developing and testing software components in Autoware. </p> <p></p>"},{"location":"version-0.1/OtherExampleDesigns/GoKart/#hardware-configuration","title":"Hardware Configuration","text":""},{"location":"version-0.1/OtherExampleDesigns/GoKart/#chassis","title":"Chassis:","text":"<ul> <li>TopKart: link to purchase</li> </ul>"},{"location":"version-0.1/OtherExampleDesigns/GoKart/#sensors","title":"Sensors:","text":"<ul> <li>Lidar: Ouster LIDAR OS1 and Velodyne M1600</li> <li>Camera: OAK-D camera</li> <li>GNSS: RTK-GNSS</li> </ul>"},{"location":"version-0.1/OtherExampleDesigns/GoKart/#computing-platforms","title":"Computing Platforms:","text":"<ul> <li>X86 laptop with nVidia GPU</li> </ul> <p>![[GoKart-ComputeSensing.png]] </p>"},{"location":"version-0.1/OtherExampleDesigns/GoKart/#software-configuration","title":"Software Configuration","text":""},{"location":"version-0.1/OtherExampleDesigns/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/","title":"Overview:","text":"<p>This document elaborates the hardware and software configurations for using Autoware for autonomous driving. Hence, it will serve as a guideline to select hardware and software components to build autonomous vehicles. However, this document is NOT prepared as neither step-by-step instructions nor Q&amp;A books, which will be provided as a reference link if available. </p>"},{"location":"version-0.1/OtherExampleDesigns/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#design-overview","title":"Design Overview:","text":""},{"location":"version-0.1/OtherExampleDesigns/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#who-should-read","title":"Who should read:","text":"<p>One is interested in building your small size autonomous vehicles and looks for the place to start with. </p>"},{"location":"version-0.1/OtherExampleDesigns/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#references-and-resources","title":"References and Resources:","text":"<ul> <li>Complete Go-Kart with Autoware documents: link</li> <li> <p>ROS2 Foxy setup and autonomous code: link</p> </li> <li> <p>ROS2 Humble setup and autonomous code: Link</p> </li> <li> <p>STM32 nucleo controller code: link</p> </li> </ul>"},{"location":"version-0.1/OtherExampleDesigns/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#contributors","title":"Contributors:","text":"<ul> <li>Autoware Center of Excellence (under Prof. Rahul Mangharam)</li> </ul>"},{"location":"version-0.1/OtherExampleDesigns/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#targeted-use-cases","title":"Targeted Use Cases","text":"Use Cases: Education Racing PoC Open AD Kit Commercial Services/Production F1Tenth"},{"location":"version-0.1/OtherExampleDesigns/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#odd","title":"ODD","text":"ODD Cargo Bus RoboTaxi Low Speed (Utility) Vehicle Delivery Robot F1Tenth"},{"location":"version-0.1/OtherExampleDesigns/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#automation-level","title":"Automation Level:","text":"Automation Level 0 1 2 3 4 5 F1Tenth"},{"location":"version-0.1/OtherExampleDesigns/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#system-architecture","title":"System Architecture","text":"<p>Autonomous Go-Kart is a one-third scale autonomous go-kart autonomous vehicle for development and prototyping purpose. It can be used for developing and testing software components in Autoware. </p> <p></p>"},{"location":"version-0.1/OtherExampleDesigns/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#hardware-configuration","title":"Hardware Configuration","text":""},{"location":"version-0.1/OtherExampleDesigns/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#chassis","title":"Chassis:","text":"<ul> <li>TopKart: link to purchase</li> </ul>"},{"location":"version-0.1/OtherExampleDesigns/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#sensors","title":"Sensors:","text":"<ul> <li>Lidar: Ouster LIDAR OS1 and Velodyne M1600</li> <li>Camera: OAK-D camera</li> <li>GNSS: RTK-GNSS</li> </ul>"},{"location":"version-0.1/OtherExampleDesigns/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#computing-platforms","title":"Computing Platforms:","text":"<ul> <li>X86 laptop with nVidia GPU</li> </ul> <p>![[GoKart-ComputeSensing.png]] </p>"},{"location":"version-0.1/OtherExampleDesigns/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#software-configuration","title":"Software Configuration","text":""},{"location":"version-0.1/evaluation-and-testing/","title":"Evaluation and Testing","text":"<p>(To be completed)</p>"},{"location":"version-0.1/hardware-configuration/","title":"Hardware Configuration","text":"<p>(To be completed)</p> <p>This section describes the hardware configruations for LSA vehicles, including</p> <ul> <li> <p>Chassis: describes the design specification of the chassis</p> </li> <li> <p>Sensors and Actuators: describes the sensors and actuators used in the reference design.</p> </li> <li> <p>ECUs: describes the ECUs used in the reference design.</p> </li> </ul>"},{"location":"version-0.1/hardware-configuration/ECUs/","title":"Hardware Configuration","text":"<p>(To be completed)</p>"},{"location":"version-0.1/hardware-configuration/Sensors-and-Actuators/","title":"Hardware Configuration","text":"<p>(To be completed)</p>"},{"location":"version-0.1/hardware-configuration/chassis/","title":"Chassis Design","text":"<p>(To be completed)</p>"},{"location":"version-0.1/hardware-configuration/chassis/#vehicle-definition","title":"Vehicle Definition","text":"<p>PDF</p> <p>Excel</p> Reference Design Wheel base (inch) Dimension Length 2500 3500 Heigh 2500 Width 1500 Power Train Battery Capacity Range Voltage Steering 2 Wheel v 4 Wheel Optional Power 2 Wheel (2WD) V 4 Wheel (4WD) 6 Wheel (6WD) Speed &lt;20 kph 5, 10, 15 Payload 500 - 1000KG Turn Radius &gt; 4M Slope 20 (degree)"},{"location":"version-0.1/hardware-configuration/chassis/#example-drawing","title":"Example Drawing","text":"<p>PDF</p>"},{"location":"version-0.1/odd-definition/","title":"ODD Definition","text":"<p>(To be completed)</p>"},{"location":"version-0.1/software-configuration/","title":"Software Configuration","text":"<p>(To be completed)</p>"},{"location":"version-0.1/start-guide/","title":"Start guide","text":"<p>This page describes how to install, set up and run Autoware and its associated simulators on supported development platforms.</p> <ol> <li>Installation explains how to set up the development environment that are described in the System Configuration chapter.</li> <li>How to run Autoware shows how to run Autoware on the development platform that are set up in the Installation chapter.</li> <li>How to run simulators demonstrates how to run simulators that are set up in the Installation chapter.</li> </ol>"},{"location":"version-0.1/start-guide/how-to-run-autoware/","title":"How to run Autoware","text":"<p>This page explains how to run Autoware on the development platform that are set up in the Installation chapter.</p>"},{"location":"version-0.1/start-guide/how-to-run-autoware/#minimum-requirements","title":"Minimum requirements","text":"<ul> <li>Developer Platform: TODO</li> <li>In-Vehicle Development Platform [^1]: TODO</li> <li>Software Tool: TODO</li> <li>Container Image: TODO</li> </ul> <p>[^1]: This is optional if you do NOT need a vehicle-edge platform.</p>"},{"location":"version-0.1/start-guide/how-to-run-autoware/#1-run-autoware-on-the-developer-platform","title":"1. Run Autoware on the developer platform","text":""},{"location":"version-0.1/start-guide/how-to-run-autoware/#run-autowareauto-on-ava-platform-or-pcu","title":"Run Autoware.Auto on AVA platform or PCU","text":"<ol> <li> <p>Open terminal window for each module on you host.</p> </li> <li> <p>Access AVA platform or PCU via SSH in each terminal window.</p> </li> <li> <p>Find docker image id.</p> </li> </ol> <pre><code>docker image ls\nREPOSITORY                                    TAG                                                           IMAGE ID       CREATED       SIZE\npublic.ecr.aws/k7o9k6q7/tier4/autoware.auto   open_ad_kit-autoware-auto-20211111234534-88ea1196cdc0-2zv2o   48a4503b4fe4   11 days ago   6.65GB\n</code></pre> <p>You can find id such as <code>48a4503b4fe4</code>.</p> <ol> <li>Launch modules.</li> </ol> <p>Replace <code>48a4503b4fe4</code> with your docker image id.</p> <p>Terminal 1 (map)</p> <p><code>console    docker run --rm -it --net host -v ~/map:/map -v ~/cyclonedds:/etc/cyclonedds 48a4503b4fe4 /bin/bash -c \"export CYCLONEDDS_URI=file:///etc/cyclonedds/cyclonedds.xml; export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp; source install/setup.bash; ros2 launch scenario_simulator_launch autoware_auto_mapping.launch.py map_path:=/map/kashiwanoha\"</code></p> <p>Terminal 2 (perception)</p> <p><code>console    docker run --rm -it --net host -v ~/cyclonedds:/etc/cyclonedds 48a4503b4fe4 /bin/bash -c \"export CYCLONEDDS_URI=file:///etc/cyclonedds/cyclonedds.xml; export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp; source install/setup.bash; ros2 launch scenario_simulator_launch autoware_auto_perception.launch.py\"</code></p> <p>Terminal 3 (planning)</p> <p><code>console    docker run --rm -it --net host -v ~/cyclonedds:/etc/cyclonedds 48a4503b4fe4 /bin/bash -c \"export CYCLONEDDS_URI=file:///etc/cyclonedds/cyclonedds.xml; export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp; source install/setup.bash; ros2 launch scenario_simulator_launch autoware_auto_planning.launch.py\"</code></p> <p>Terminal 4 (vehicle)</p> <p><code>console    docker run --rm -it --net host -v ~/cyclonedds:/etc/cyclonedds 48a4503b4fe4 /bin/bash -c \"export CYCLONEDDS_URI=file:///etc/cyclonedds/cyclonedds.xml; export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp; source install/setup.bash; ros2 launch autoware_auto_launch autoware_auto_vehicle.launch.py\"</code></p>"},{"location":"version-0.1/start-guide/how-to-run-autoware/#2-run-autoware-on-the-in-vehicle-development-platform","title":"2. Run Autoware on the in-vehicle development platform","text":"<p>!!! note \"If you do NOT need a vehicle-edge platform, please skip this step.\"</p> <p>TODO</p>"},{"location":"version-0.1/start-guide/how-to-run-autoware/#3-run-simulators-on-the-development-platform","title":"3. Run simulators on the development platform","text":"<p>Please refer to the How to run simulators section.</p>"},{"location":"version-0.1/start-guide/how-to-run-simulators/","title":"How to run simulators","text":"<p>This page describes how to run simulators that work on your local environment and the cloud environment.</p> <ul> <li>Scenario simulator verifies your planning algorithms.</li> <li>Logging simulator verifies your perception algorithms with ROSBAG data that are recorded beforehand.</li> </ul> <p>There are some limitations and issues for the simulators.</p>"},{"location":"version-0.1/start-guide/how-to-run-simulators/limitations-and-issues/limitations-and-issues/","title":"Limitations and issues","text":""},{"location":"version-0.1/start-guide/how-to-run-simulators/limitations-and-issues/limitations-and-issues/#limitations","title":"Limitations","text":"<ul> <li>Simulation by using LGSVL is not supported because a map for scenario simulator (<code>kashiwanoha</code>) is not registered in LGSVL Simulator Content Store.</li> </ul>"},{"location":"version-0.1/start-guide/how-to-run-simulators/limitations-and-issues/limitations-and-issues/#issues","title":"Issues","text":"<ul> <li> <p>The ego vehicle drives slowly.</p> </li> <li> <p><code>UC-001-0018-Kashiwa:1</code> failed with simulation timeout. The ego vehicle gets stuck after NPC crossed ahead of the ego vehicle. This might be caused by the slow driving.</p> </li> </ul> <p></p>"},{"location":"version-0.1/start-guide/how-to-run-simulators/logging-simulator/run-on-cloud-env/","title":"Run on the cloud platform","text":"<p>This page describes how to run the logging simulator on the cloud platform.</p> <p>!!! warning \"The cloud platform, Web.Auto, is offered by TIER IV, and it is available for the Autoware Foundation members.\"</p>"},{"location":"version-0.1/start-guide/how-to-run-simulators/logging-simulator/run-on-cloud-env/#minimum-requirements","title":"Minimum requirements","text":"<ul> <li>Developer Platform: TODO</li> <li>In-Vehicle Development Platform [^1]: TODO</li> <li>Software Tool: TODO</li> <li>Container Image: TODO</li> <li>Data Pipeline: TODO</li> </ul> <p>[^1]: This is optional if you do NOT need a vehicle-edge platform.</p>"},{"location":"version-0.1/start-guide/how-to-run-simulators/logging-simulator/run-on-cloud-env/#1-create-your-account-on-the-cloud-platform","title":"1. Create your account on the cloud platform","text":"<p>!!! note \"If you already have access to Web.Auto, please skip this step.\"</p> <p>TODO</p>"},{"location":"version-0.1/start-guide/how-to-run-simulators/logging-simulator/run-on-cloud-env/#2-set-up-a-simulation-on-the-cloud-platform","title":"2. Set up a simulation on the cloud platform","text":"<p>TODO</p>"},{"location":"version-0.1/start-guide/how-to-run-simulators/logging-simulator/run-on-cloud-env/#3-run-the-logging-simulator-on-the-cloud-platform","title":"3. Run the logging simulator on the cloud platform","text":"<p>TODO</p>"},{"location":"version-0.1/start-guide/how-to-run-simulators/scenario-simulator/run-on-cloud-env/","title":"Run on the cloud platform","text":"<p>This page describes how to run the scenario simulator on the cloud platform.</p> <p>!!! warning \"The cloud platform, Web.Auto, is offered by TIER IV, and it is available for the Autoware Foundation members.\"</p>"},{"location":"version-0.1/start-guide/how-to-run-simulators/scenario-simulator/run-on-cloud-env/#minimum-requirements","title":"Minimum requirements","text":"<ul> <li>Developer Platform: TODO</li> <li>In-Vehicle Development Platform [^1]: TODO</li> <li>Software Tool: TODO</li> <li>Container Image: TODO</li> <li>Data Pipeline: TODO</li> </ul> <p>[^1]: This is optional if you do NOT need a vehicle-edge platform.</p>"},{"location":"version-0.1/start-guide/how-to-run-simulators/scenario-simulator/run-on-cloud-env/#1-create-your-account-on-the-cloud-platform","title":"1. Create your account on the cloud platform","text":"<p>!!! note \"If you already have access to Web.Auto, please skip this step.\"</p>"},{"location":"version-0.1/start-guide/how-to-run-simulators/scenario-simulator/run-on-cloud-env/#cloud-native-cicd-pipeline-webauto","title":"Cloud Native CI/CD Pipeline - Web.Auto","text":"<p>The CI/CD pipeline for the scenario simulation is available for the Autoware Foundation members.</p> <p>You can check the scenario simulation results on the CI/CD dashboard.</p> <p>This material describes the CI/CD pipeline in more details.</p> <ol> <li>Create an account with Tier IV account server (https://account.tier4.jp/).</li> <li>Participate in an Autoware Foundation working group (Simulation, Autonomy Software, Operational Design DomainD, Open AD Kit) and report the Tier IV Account ID you created in 1. to the leader of your working group.</li> <li>Then you can login to the CI/CD dashboard and see the scenario simulation results.</li> </ol>"},{"location":"version-0.1/start-guide/how-to-run-simulators/scenario-simulator/run-on-cloud-env/#2-set-up-a-simulation-on-the-cloud-platform","title":"2. Set up a simulation on the cloud platform","text":"<p>TODO</p>"},{"location":"version-0.1/start-guide/how-to-run-simulators/scenario-simulator/run-on-cloud-env/#3-run-the-scenario-simulator-on-the-cloud-platform","title":"3. Run the scenario simulator on the cloud platform","text":"<p>TODO</p>"},{"location":"version-0.1/start-guide/how-to-run-simulators/scenario-simulator/run-on-local-env/","title":"Run on your local environment","text":"<p>This page describes how to run the scenario simulator on the developer platform that is set up in the Installation chapter.</p>"},{"location":"version-0.1/start-guide/how-to-run-simulators/scenario-simulator/run-on-local-env/#minimum-requirements","title":"Minimum requirements","text":"<ul> <li>Developer Platform: TODO</li> <li>In-Vehicle Development Platform [^1]: TODO</li> <li>Software Tool: TODO</li> <li>Container Image: TODO</li> <li>Data Pipeline: TODO</li> </ul> <p>[^1]: This is optional if you do NOT need a vehicle-edge platform.</p>"},{"location":"version-0.1/start-guide/how-to-run-simulators/scenario-simulator/run-on-local-env/#run-visualization-and-scenario-simulator-on-the-developer-platform","title":"Run visualization and scenario simulator on the developer platform","text":"<ol> <li>Run Rviz.</li> </ol> <p>You already cloned Autoware.Auto repository, navigate to the cloned directory.</p> <ol> <li> <p>Launch ADE.</p> <p><code>console   cd ~/adehome/AutowareAuto   ade --rc .aderc-amd64-foxy-lgsvl start --update --enter</code></p> </li> <li> <p>Launch visualization in ADE.</p> <p><code>console   source /opt/AutowareAuto/setup.bash   ros2 launch autoware_auto_launch autoware_auto_visualization.launch.py</code></p> </li> <li> <p>Find docker image id.</p> </li> </ol> <p>```console    docker image ls    REPOSITORY                                                                            TAG                                                                           IMAGE ID       CREATED       SIZE    registry.gitlab.com/autowarefoundation/autoware.auto/autowareauto/amd64/binary-foxy   master                                                                        91512aa9e485   3 days ago    176MB    registry.gitlab.com/autowarefoundation/autoware.auto/autowareauto/amd64/ade-foxy      master                                                                        0d9978b7113d   4 days ago    5.74GB    scenario_simulator                                                                    open_ad_kit-autoware-auto-planning_sim_v2-20211111234534-88ea1196cdc0-2zv2o   d766a256a8c3   11 days ago   5.95GB    registry.gitlab.com/autowarefoundation/autoware.auto/ade-lgsvl/foxy                   2021.3                                                                        077c172fa5b9   5 weeks ago   379MB</p> <p>```</p> <p>You can find id such as <code>d766a256a8c3</code>.</p> <ol> <li>Launch scenario simulator.</li> </ol> <p>Replace <code>/home/foo</code> with your home directory.</p> <p>Replace <code>d766a256a8c3</code> with your docker image id.</p> <p><code>console    docker run --rm -it --net host -v /home/foo/scenario:/scenario -v /home/foo/cyclonedds:/etc/cyclonedds d766a256a8c3 /bin/bash -c \"export CYCLONEDDS_URI=file:///etc/cyclonedds/cyclonedds.xml; export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp; source install/setup.bash; ros2 launch scenario_test_runner scenario_test_runner.launch.py sensor_model:=aip_xx1 vehicle_model:=lexus launch_autoware:=false architecture_type:=awf/auto scenario:=/scenario/scenario_e3b743e7-110c-4db6-b136-e5ffd5538315_2.yml\"</code></p> <p>Now you can see...</p> <p>DEMO Video</p> <p></p>"},{"location":"version-0.1/start-guide/installation/","title":"Installation","text":"<p>This page explains how to set up the development environment that are described in the System Configuration chapter.</p>"},{"location":"version-0.1/start-guide/installation/#minimum-requirements","title":"Minimum requirements","text":"<ul> <li>Developer Platform:</li> <li>AVA Platform or PCU Platform</li> <li>In-Vehicle Development Platform [^1]: TODO</li> <li>Software Tool:</li> <li>Scenario simulator version x.x [^2]</li> <li>Rviz version x.x [^2]</li> <li>Container Image:</li> <li>Autoware.Auto for arm64</li> <li>Scenario simulator for x86_64 [^2]</li> </ul> <p>[^1]: This is unnecessary if you do NOT need a vehicle-edge platform. [^2]: This is unnecessary if you can use the cloud development platform, Web.Auto.</p> <p>The following diagram shows a minimum configuration of Open AD Kit. \"Your host machine\" will be replaced by the cloud development platform if you can use Web.Auto.</p> <p></p>"},{"location":"version-0.1/start-guide/installation/#1-set-up-the-developer-platform","title":"1. Set up the developer platform","text":"<p>The setup procedure depends on the developer platform.</p>"},{"location":"version-0.1/start-guide/installation/#ava-platform","title":"AVA Platform","text":"<ol> <li>Getting started with EWAOL</li> <li>Boot EWAOL via SSD Boot</li> <li>Extend rootfs partition</li> </ol>"},{"location":"version-0.1/start-guide/installation/#pcu-platform","title":"PCU Platform","text":"<ol> <li>Getting started with PCU</li> </ol>"},{"location":"version-0.1/start-guide/installation/#2-set-up-the-in-vehicle-platform","title":"2. Set up the in-vehicle platform","text":"<p>!!! note \"If you do NOT need a vehicle-edge platform, please skip this step.\"</p> <p>TODO</p>"},{"location":"version-0.1/start-guide/installation/#3-install-autoware-container-images-on-the-developer-platform","title":"3. Install Autoware container images on the developer platform","text":""},{"location":"version-0.1/start-guide/installation/#ava-platform_1","title":"AVA Platform","text":"<ol> <li>System setup on AVA Platform</li> </ol>"},{"location":"version-0.1/start-guide/installation/#pcu-platform_1","title":"PCU Platform","text":"<ol> <li>System setup on PCU</li> </ol>"},{"location":"version-0.1/start-guide/installation/#4-install-autoware-container-images-on-the-in-vehicle-platform","title":"4. Install Autoware container images on the in-vehicle platform","text":"<p>!!! note \"If you do NOT need a vehicle-edge platform, please skip this step.\"</p> <p>TODO</p>"},{"location":"version-0.1/start-guide/installation/#5-set-up-software-tools","title":"5. Set up software tools","text":"<p>!!! note \"If you can use the cloud development platform, please skip this step.\"</p>"},{"location":"version-0.1/start-guide/installation/#ava-platform_2","title":"AVA Platform","text":"<ol> <li>System setup on your host</li> </ol>"},{"location":"version-0.1/start-guide/installation/#pcu-platform_2","title":"PCU Platform","text":"<ol> <li>System setup on your host</li> </ol>"},{"location":"version-0.1/start-guide/installation/#6-run-autoware-on-the-development-platform","title":"6. Run Autoware on the development platform","text":"<p>Please refer to the How to run Autoware section.</p>"},{"location":"version-0.1/start-guide/installation/boot-ewaol/","title":"Boot EWAOL via SSD Boot","text":""},{"location":"version-0.1/start-guide/installation/boot-ewaol/#overview","title":"Overview","text":"<p>You need to use SSD enclosure case to flash yocto image to M.2 SSD directly.</p>"},{"location":"version-0.1/start-guide/installation/boot-ewaol/#get-yocto-image","title":"Get yocto image","text":"<ol> <li>Build yocto image with EWAOL by following the instructions Getting started with EWAOL, or Download the image from the website to your host machine;</li> <li>AVA Developer Platform Downloads \u2013 I-Pi SMARC (:white_check_mark: <code>Yocto with SOAFEE</code> is preferred.)</li> </ol>"},{"location":"version-0.1/start-guide/installation/boot-ewaol/#flash-yocto-image","title":"Flash yocto image","text":"<p>Remove M.2 SSD from AVA platform and flash yocto image to it directly.</p> <ol> <li> <p>Remove M.2 SSD from AVA platform.</p> </li> <li> <p>Install M.2 SSD into a M.2 enclosure case.</p> </li> <li> <p>Plug it into your host machine.</p> </li> <li> <p>Then, show available block devices.</p> </li> </ol> <p><code>console    lsblk    NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT    ...    sdn           8:208  0 119.2G  0 disk    \u251c\u2500sdn1        8:209  0   512M  0 part    \u251c\u2500sdn2        8:210  0     1G  0 part /media/foo/7d00c690-db24-462d-8c8d-dce7bdf151d8    \u2514\u2500sdn3        8:211  0 117.8G  0 part</code></p> <ol> <li>Flush yocto image to M.2 SSD.</li> </ol> <p>:speech_balloon: For example</p> <p><code>console    sudo dd if=ewaol-image-docker-comhpc-20211022083723.rootfs.wic of=/dev/sdn bs=1M status=progress &amp;&amp; sync</code></p>"},{"location":"version-0.1/start-guide/installation/boot-ewaol/#extend-rootfs-partition","title":"Extend rootfs partition","text":"<p>You have to extend rootfs partition. Follow the instructions Extend rootfs partition</p>"},{"location":"version-0.1/start-guide/installation/boot-ewaol/#reinstall-ssd","title":"Reinstall SSD","text":"<ol> <li> <p>Remove M.2 SSD from enclosure case and install it into AVA platform, then turn it on.</p> </li> <li> <p>The following screen comes up, then login as <code>root</code> without password.</p> </li> </ol> <p>```console    EWAOL (Edge Workload Abstraction and Orchestration Layer) 0.1 comhpc tty1    comhpc login:</p> <p>```</p> <p>:speech_balloon: You are able to access via SSH.</p>"},{"location":"version-0.1/start-guide/installation/extend-rootfs/","title":"Extend rootfs partition","text":""},{"location":"version-0.1/start-guide/installation/extend-rootfs/#overview","title":"Overview","text":"<p>The rootfs partition is created with 5.2GB, but the size is too short to run docker container. So we have to extend rootfs partition, or create new partition and assign the whole docker folder to the new partition.</p> <p>Here is the instruction how to extend rootfs partition</p>"},{"location":"version-0.1/start-guide/installation/extend-rootfs/#extend-rootfs","title":"Extend rootfs","text":"<ol> <li>Run <code>gparted</code>.</li> </ol> <p>You may get the following warning when you run <code>gparted</code>.</p> <p>Press <code>Fix</code>.</p> <p></p> <p>Contents of storage after we flashed yocto image to M.2 SSD.    </p> <ol> <li>Unmount partitions.</li> </ol> <p>To manipulate partitions, you need to unmount <code>root</code> and <code>data</code> partition.</p> <p>Right click <code>root</code> partition, then click <code>Unmount</code>.    </p> <p>Unmount <code>data</code> partition as well.</p> <ol> <li>Move <code>data</code> partition to the end of storage.</li> </ol> <p>Right click <code>data</code> partition, then click <code>Resize/Move</code>.    </p> <p>Drag the square to the right end.</p> <p> </p> <p>Then, click <code>Resize/Move</code>.</p> <p></p> <p>Click <code>OK</code>.</p> <p></p> <ol> <li>Extend rootfs partition to the end of disk.</li> </ol> <p>Right click <code>root</code> partition, then click <code>Resize/Move</code>.    </p> <p>Extend the square to the right end.</p> <p> </p> <p>Then, click <code>Resize/Move</code>.</p> <p></p> <ol> <li>Apply changes.</li> </ol> <p>Click check mark icon.</p> <p></p> <p>Click <code>Apply</code>.</p> <p></p> <p>You can get rootfs as follows.</p> <p></p>"},{"location":"version-0.1/start-guide/installation/getting-started-pcu/","title":"Getting started with PCU","text":""},{"location":"version-0.1/start-guide/installation/getting-started-pcu/#overview","title":"Overview","text":"<p>Reference: PCU Setup Guide</p> <p>This instruction explains how to boot up Ubuntu on PCU and access it from host PC.</p> <ul> <li> <p>If you are using onboard 64G EMMC as boot device, it's already been pre-installed with Ubuntu 20.04, and you can skip this step;</p> </li> <li> <p>If you would like to boot from SD card, you could either request a Micro SD card with pre-installed system or flash by yourself under instructions in below section.   :white_check_mark: <code>Ubuntu 20.04</code> is preferred.</p> </li> </ul>"},{"location":"version-0.1/start-guide/installation/getting-started-pcu/#hardware-setup","title":"Hardware Setup","text":"<p>The minimum recommended External Micro SD card size is 64GB, and the speed should be at least class 10 A1, it is strongly recommended to use high speed SD card, e.g. class U3, A2.</p> <p>To boot from SD card, \"SW1\" should be set as: <code>ON</code>, and SD card should be plugged in. </p> <p>For blank SD card, the system image need to be flashed first using another PC.</p>"},{"location":"version-0.1/start-guide/installation/getting-started-pcu/#get-mpu-image","title":"Get MPU image","text":"<p>Official images with recommended OS are available on PCU Resource Download page.</p> <p>Resource Download Page</p> <p>For PCU 2.0 hardware, please download the MPU image file for SD card as marked red to your local storage.</p> <p></p>"},{"location":"version-0.1/start-guide/installation/getting-started-pcu/#flash-mpu-image","title":"Flash MPU image","text":"<p>To flash MPU image on SD card, you will need a PC with a micro SD card reader.</p> <p>This step could be done on either Windows or Linux PC with different flash tools.</p> <p>Linux will be used in this instruction as example:</p> <ol> <li> <p>Insert card reader with target micro SD card to host PC.</p> </li> <li> <p>Find out device name for the SD card.</p> </li> </ol> <p><code>console    sudo lsblk    NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT    ...    sda      8:0    0 238.5G  0 disk    \u251c\u2500sda1   8:1    0   512M  0 part /boot/efi    \u2514\u2500sda2   8:2    0   238G  0 part /    sdb      8:16   0 447.1G  0 disk    \u251c\u2500sdb1   8:17   0 428.4G  0 part    \u251c\u2500sdb2   8:18   0   513M  0 part    \u2514\u2500sdb3   8:19   0  18.2G  0 part    sdc      8:32   1  14.9G  0 disk    \u2514\u2500sdc1   8:33   1  14.9G  0 part /media/adlink/B4A1-62CD</code></p> <p>:speech_balloon: In this case, <code>sdc</code> is the device name</p> <ol> <li>Flash image to SD card.</li> </ol> <p><code>console    sudo gzip -dc YOUR-DOWNLOAD-PATH/xxx.gz |sudo dd of=/dev/YOUR-DEVICE</code></p> <p>For example;</p> <p><code>console    sudo gzip -dc ~/Downloads/autocore-1046-ubuntu20.04-sd-pcu2.0-sw0.5.0-20201210.gz |sudo dd of=/dev/sdc</code></p> <p>Wait patiently until the flash process finishes, this may take up to half hour.</p> <ol> <li>Boot up.</li> </ol> <p>Now you can plug in the SD card to PCU and power up. The system should be ready to work.</p>"},{"location":"version-0.1/start-guide/installation/getting-started-pcu/#connect-to-pcu-via-ssh","title":"Connect To PCU via SSH","text":"<p>You could connect to PCU via SSh either by ethernet or serial port.</p> <p>The default username, password and IP address of PCU is as below: </p>"},{"location":"version-0.1/start-guide/installation/getting-started-pcu/#ssh-through-ethernet","title":"SSH through ethernet","text":"<ol> <li>Cable connection</li> </ol> <p>Connect host PC to RJ45 2 / RJ45 3 / RJ45 4 Eth port (Blue) on PCU board with Ethernet cable (GbE, need Cat.5e or above).</p> <p></p> <ol> <li>Configure static IP for host PC    You need to manually configure static IP for PC in order to connect with PCU, as there is no DHCP server running on PCU. The static IP should be different with PCU and within the same network segment. (e.g. 192.168.1.200)</li> </ol> <p></p> <ol> <li>SSH login</li> </ol> <p><code>console    ssh user@192.168.1.239</code></p>"},{"location":"version-0.1/start-guide/installation/getting-started-pcu/#ssh-through-serial-port","title":"SSH through Serial Port","text":"<ol> <li>Cable connection</li> </ol> <p>As an alternative, you could also choose to connect to PCU by micro USB (ttyUSB port in figure blow).</p> <p></p> <ol> <li>ttyUSB Settings</li> </ol> <p>For Linux users, you could use \"cutecom\" to connect to PCU.</p> <p><code>console    sudo apt install cutecom    cutecom</code></p> <p>Please set parameters as follows, <code>Device</code> shall be chosen based on your host PC.</p> <p></p> <p>For other system users, the parameters are:</p> Parameter Value Baudrate 115200 Data 8 Stop bit 1 Parity None Hardware flow control no Software flow control no <ol> <li>Reset PCU and Login</li> </ol> <p>Press reset button and wait until login.</p> <p><code>console    ssh user@192.168.1.239</code></p>"},{"location":"version-0.1/start-guide/installation/getting-started-pcu/#check-pcu-public-ip-address","title":"Check PCU public IP Address","text":"<p>Connect PCU to internet via RJ45 1 Eth port (Red), this Eth port is configured to obtain IP address automatically from DHCP by default.</p> <p>From section above, you can SSH connect to PCU, and you can look for IP address of the public ethernet port(fm1-mac5).</p> <pre><code>ifconfig fm1-mac5\nfm1-mac5: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n  inet 192.168.10.221  netmask 255.255.255.0  broadcast 192.168.10.255\n  inet6 fe80::204:7cff:fe2e:191  prefixlen 64  scopeid 0x20&lt;link&gt;\n  ether 00:04:7c:2e:01:91  txqueuelen 1000  (Ethernet)\n  RX packets 2806  bytes 3665212 (3.6 MB)\n  RX errors 0  dropped 0  overruns 0  frame 0\n  TX packets 2238  bytes 175964 (175.9 KB)\n  TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n  device memory 0x1ae8000-1ae8fff\n</code></pre> <p>:speech_balloon: You can find IP address of PCU such as <code>192.168.10.221</code>.</p>"},{"location":"version-0.1/start-guide/installation/getting-started/","title":"Getting started with EWAOL","text":""},{"location":"version-0.1/start-guide/installation/getting-started/#overview","title":"Overview","text":"<p>Reference: Project Quickstart \u2014 EWAOL documentation</p> <p>This instruction explain how to build yocto image with EWAOL on your host machine. If you are using AVA Developer Platform, you can also download built image from ADLINK's website, and you can skip this steps;</p> <ul> <li>AVA Developer Platform Downloads \u2013 I-Pi SMARC    :white_check_mark: <code>Yocto with SOAFEE</code> is preferred.</li> </ul>"},{"location":"version-0.1/start-guide/installation/getting-started/#build-host-setup","title":"Build Host Setup","text":"<ol> <li>Install required packages for the build host by following The Yocto Project \u00ae 3.3.1 documentation.</li> </ol> <p><code>console    sudo apt-get install gawk wget git diffstat unzip texinfo gcc build-essential chrpath socat cpio python3 python3-pip python3-pexpect xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev pylint3 xterm python3-subunit mesa-common-dev</code></p> <ol> <li>Install the kas setup tool.</li> </ol> <p><code>console    sudo -H pip3 install kas</code></p>"},{"location":"version-0.1/start-guide/installation/getting-started/#checkout-the-repository-for-ava-platform","title":"Checkout the repository for AVA platform","text":"<ol> <li>ADLINK / meta-adlink-ampere</li> </ol> <p><code>console    git clone https://github.com/ADLINK/meta-adlink-ampere.git</code></p> <ol> <li>EWAOL / meta-ewaol</li> </ol> <p><code>console    cd meta-adlink-ampere    git clone https://git.gitlab.arm.com/ewaol/meta-ewaol.git</code></p> <ol> <li>Build via kas</li> </ol> <p><code>console    kas build ComHpc.yml</code></p> <p>:warning: You should be careful of utilizing full CPU power during build. </p> <p>You can choose the way to boot EWAOL, SSD Boot(highly recommended) or USB Boot.</p> <ul> <li>:white_check_mark: SSD Boot (highly recommended)</li> <li>You need to use SSD enclosure case to flash yocto image to M.2 SSD directly.</li> <li> <p>USB Boot</p> </li> <li> <p>You need to use 32GB USB, not 64GB USB to flash yocto image.</p> <p>:warning: Do not use 64GB USB because bios gets stuck due to EDK II bug.</p> </li> </ul>"},{"location":"version-0.1/start-guide/installation/system-setup-ava/","title":"System Setup on AVA platform","text":""},{"location":"version-0.1/start-guide/installation/system-setup-ava/#overview","title":"Overview","text":"<p>This instruction explains how to perform system setup for test execution on AVA platform.</p> <p>You need to copy docker images and necessary files.</p>"},{"location":"version-0.1/start-guide/installation/system-setup-ava/#access-to-ava-platform-via-ssh","title":"Access to AVA platform via SSH","text":"<pre><code>ssh root@IP-ADDRESS\n</code></pre> <p>For example;</p> <pre><code>ssh root@192.168.10.27\n</code></pre>"},{"location":"version-0.1/start-guide/installation/system-setup-ava/#copy-autowareauto-image-to-ava-platform","title":"Copy Autoware.Auto image to AVA platform","text":"<p>The docker image of Autoware.Auto is registered in GitLab Container Registry. </p> <ol> <li>Copy docker image to AVA platform.</li> </ol> <p><code>console    docker pull registry.gitlab.com/autowarefoundation/autoware.auto/autowareauto/arm64/openadkit-foxy:latest</code></p>"},{"location":"version-0.1/start-guide/installation/system-setup-ava/#copy-necessary-files-to-usb-drive","title":"Copy necessary files to USB drive","text":"<ol> <li>Copy files related to map contents.</li> </ol> <p>Files are placed in the directory :file_folder:docs/Appendix/Open-AD-Kit-Start-Guide/map</p> <ul> <li>:page_facing_up:lanelet2_map.osm</li> <li>:page_facing_up:pointcloud_map.pcd</li> <li>:page_facing_up:global_map_center.pcd.yaml</li> <li>:page_facing_up:lanelet2_map_provider.osm.yaml</li> <li>:page_facing_up:map_publisher.param.yaml</li> </ul> <p>Copy files to your USB drive as the following directory structure.</p> <p></p> <ol> <li>Copy configuration file of Cyclone DDS.</li> </ol> <p>In this test, we are using Cyclone DDS, so you also need to copy configuration file of Cyclone DDS.</p> <p>File is placed in the directory :file_folder:docs/Appendix/Open-AD-Kit-Start-Guide/cyclonedds</p> <ul> <li>:page_facing_up:cyclonedds.xml</li> </ul> <p>Copy the file to your USB drive as the following directory structure.</p> <p></p> <ol> <li>Copy kernel configuration file for tuning kernel parameters.</li> </ol> <p>We have to reconfigure kernel parameters by using <code>sysctl</code> for system stability.</p> <p>File is placed in the directory :file_folder:docs/Appendix/Open-AD-Kit-Start-Guide/sysctl.d</p> <ul> <li>:page_facing_up:60_cyclonedds.conf</li> </ul> <p>Copy the file to your USB root.</p>"},{"location":"version-0.1/start-guide/installation/system-setup-ava/#copy-files-from-usb-drive-to-ava-platform","title":"Copy files from USB drive to AVA platform","text":"<ol> <li> <p>Plug your USB drive into AVA platform and copy files</p> </li> <li> <p>Find USB device name.</p> <p><code>console   lsblk   NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT   sda           8:16   1  28.9G  0 disk   `-sda1        8:17   1  28.9G  0 part   nvme0n1     259:0    0 119.2G  0 disk   |-nvme0n1p1 259:1    0   256M  0 part   |-nvme0n1p2 259:2    0   118G  0 part /   `-nvme0n1p3 259:3    0     1G  0 part</code></p> </li> <li> <p>Mount USB driver and copy directory.</p> <p><code>console   mkdir -p /mnt/usb   mount /dev/sda1 /mnt/usb   cp -r /mnt/usb/* ~/</code></p> </li> <li> <p>Move kernel configuration file to <code>/etc/sysctl.d</code>.</p> <p><code>console   mv ~/60_cyclonedds.conf /etc/sysctl.d</code></p> </li> <li> <p>Update kernel parameters.</p> <p><code>console   sysctl -p /etc/sysctl.d/60_cyclonedds.conf</code></p> </li> </ol>"},{"location":"version-0.1/start-guide/installation/system-setup-ava/#modify-cycloneddsxml","title":"Modify <code>cyclonedds.xml</code>","text":"<p>You need to change the element <code>NetworkInterfaceAddress</code> to the network interface currently in use.</p> <ol> <li>Find network interface.</li> </ol> <p><code>console    ip addr    1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000        link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00        inet 127.0.0.1/8 scope host lo           valid_lft forever preferred_lft forever        inet6 ::1/128 scope host           valid_lft forever preferred_lft forever     2: enP4p4s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000        link/ether 00:11:22:33:44:55 brd ff:ff:ff:ff:ff:ff        inet 192.168.10.27/24 brd 192.168.10.255 scope global dynamic enP4p4s0           valid_lft 332sec preferred_lft 332sec        inet 192.168.10.13/24 brd 192.168.10.255 scope global secondary dynamic noprefixroute enP4p4s0           valid_lft 337sec preferred_lft 262sec        inet6 fe80::34c:b6f7:b356:b7/64 scope link           valid_lft forever preferred_lft forever        inet6 fe80::230:64ff:fe1a:a65/64 scope link           valid_lft forever preferred_lft forever     3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default        link/ether aa:bb:cc:dd:ee:ff brd ff:ff:ff:ff:ff:ff        inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0           valid_lft forever preferred_lft forever</code></p> <p>:speech_balloon: You can find a network interface such as <code>enP4p4s0</code>.</p> <ol> <li>Change the <code>NetworkInterfaceAddress</code>.</li> </ol> <p><code>console    vi ~/cyclonedds/cyclonedds.xml</code></p> <p>For example; :page_facing_up: cyclonedds.xml</p> <p>```diff         -  lo    +  enP4p4s0 </p> <p>```</p>"},{"location":"version-0.1/start-guide/installation/system-setup-host/","title":"System Setup on your host","text":""},{"location":"version-0.1/start-guide/installation/system-setup-host/#overview","title":"Overview","text":"<p>This instruction explains how to perform system setup for test execution on your host.</p> <p>You need to copy docker images and necessary files, and checkout Autoware.Auto.</p>"},{"location":"version-0.1/start-guide/installation/system-setup-host/#copy-scenario-simulator-image-to-your-host-machine","title":"Copy scenario simulator image to your host machine","text":"<p>The docker image of scenario simulator is registered in docker hub. </p> <ol> <li>Copy docker image to your host machine.</li> </ol> <p><code>console    docker pull tier4/scenario_simulator_v2:open_ad_kit-amd64-foxy</code></p>"},{"location":"version-0.1/start-guide/installation/system-setup-host/#copy-necessary-files-to-your-host-machine","title":"Copy necessary files to your host machine","text":"<ol> <li>Copy scenario files for scenario simulator.</li> </ol> <p>Files are placed in the directory :file_folder:docs/Appendix/Open-AD-Kit-Start-Guide/scenario</p> <p>[Currently placed]</p> <ul> <li>:page_facing_up:UC-001-0001-Kashiwa:2</li> <li>:page_facing_up:UC-001-0018-Kashiwa:1</li> </ul> <p>Copy the scenario files to your <code>home</code> directory as the following directory structure.</p> <p></p> <ol> <li>Copy configuration file of Cyclone DDS.</li> </ol> <p>You also need to copy <code>cyclonedds.xml</code> to your <code>home</code> directory.</p> <p></p> <ol> <li>Copy kernel configuration file to <code>/etc/sysctl.d</code>.</li> </ol> <p>You also need to copy <code>60_cyclonedds.conf</code> to <code>/etc/sysctl.d</code> directory in your host as well.</p> <p><code>console    cp 60_cyclonedds.conf /etc/sysctl.d</code></p> <ol> <li>Update kernel parameters.</li> </ol> <p><code>console    sysctl -p /etc/sysctl.d/60_cyclonedds.conf</code></p>"},{"location":"version-0.1/start-guide/installation/system-setup-host/#modify-cycloneddsxml","title":"Modify <code>cyclonedds.xml</code>","text":"<p>You need to change the element <code>NetworkInterfaceAddress</code> to the network interface currently in use.</p> <ol> <li>Find network interface.</li> </ol> <p><code>console    ip addr    1: lo: &lt;LOOPBACK,MULTICAST,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000        link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00        inet 127.0.0.1/8 scope host lo           valid_lft forever preferred_lft forever        inet6 ::1/128 scope host           valid_lft forever preferred_lft forever     2: enp0s31f6: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000        link/ether 66:77:88:99:aa:bb brd ff:ff:ff:ff:ff:ff        inet 192.168.10.1/24 brd 192.168.10.255 scope global noprefixroute enp0s31f6           valid_lft forever preferred_lft forever        inet6 fe80::f15d:4196:b777:6875/64 scope link noprefixroute           valid_lft forever preferred_lft forever     3: wlp82s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000        link/ether cc:dd:ee:ff:00:01 brd ff:ff:ff:ff:ff:ff        inet 192.168.0.28/24 brd 192.168.0.255 scope global dynamic noprefixroute wlp82s0           valid_lft 3137sec preferred_lft 3137sec        inet6 fe80::f493:f223:dfcc:bd1b/64 scope link noprefixroute           valid_lft forever preferred_lft forever     4: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default        link/ether 23:45:67:89:ab:cd brd ff:ff:ff:ff:ff:ff        inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0           valid_lft forever preferred_lft forever</code></p> <p>:speech_balloon: You can find a network interface such as <code>enp0s31f6</code>.</p> <ol> <li>Change the <code>NetworkInterfaceAddress</code>.</li> </ol> <p><code>console    vi ~/cyclonedds/cyclonedds.xml</code></p> <p>For example; :page_facing_up: cyclonedds.xml</p> <p>```diff         -  lo    +  enp0s31f6 </p> <p>```</p>"},{"location":"version-0.1/start-guide/installation/system-setup-host/#setup-ade","title":"Setup ADE","text":"<p>In general, Autoware.Auto runs by using the Agile Development Environment (ADE), so we need to install ADE.</p> <p>In this test, we use launch file placed in Autoware.Auto to run visualization quickly and easily.</p> <ol> <li>Install ADE on AVA platform by following the instructions; Installation \u2014 ADE 4.4.0dev documentation</li> </ol> <p>Download and setup ADE.</p> <p><code>console    wget https://gitlab.com/ApexAI/ade-cli/-/jobs/1341322852/artifacts/raw/dist/ade+aarch64 -O ade    chmod +x ade    mv ade /usr/bin/</code></p> <ol> <li>Setup ADE home directory by following the instructions; Installation with ADE</li> </ol> <p><code>console    mkdir -p ~/adehome    cd ~/adehome    touch .adehome</code></p>"},{"location":"version-0.1/start-guide/installation/system-setup-host/#checkout-autowareauto","title":"Checkout Autoware.Auto","text":"<ol> <li>Get Autoware.Auto on your host.</li> </ol> <p><code>console    cd ~/adehome    git clone https://gitlab.com/autowarefoundation/autoware.auto/AutowareAuto.git</code></p>"},{"location":"version-0.1/start-guide/installation/system-setup-pcu/","title":"System Setup on PCU","text":""},{"location":"version-0.1/start-guide/installation/system-setup-pcu/#overview","title":"Overview","text":"<p>This instruction explains how to perform system setup for test execution on PCU.</p> <p>You need to install Docker Engine, copy docker images and necessary files.</p>"},{"location":"version-0.1/start-guide/installation/system-setup-pcu/#access-to-pcu-via-ssh","title":"Access to PCU via SSH","text":"<pre><code>ssh user@IP-ADDRESS\n</code></pre> <p>For example;</p> <pre><code>ssh user@192.168.10.221\n</code></pre>"},{"location":"version-0.1/start-guide/installation/system-setup-pcu/#copy-autowareauto-image-to-pcu","title":"Copy Autoware.Auto image to PCU","text":"<p>NOTE: docker should be installed with post-installation steps. For instructions please refer to:</p> <ul> <li>Install Docker Engine on Ubuntu.</li> <li>Post-installation steps for Linux.</li> </ul> <p>The docker image of Autoware.Auto is registered in GitLab Container Registry. </p> <ol> <li>Copy docker image to PCU.</li> </ol> <p><code>console    docker pull registry.gitlab.com/autowarefoundation/autoware.auto/autowareauto/arm64/openadkit-foxy:latest</code></p>"},{"location":"version-0.1/start-guide/installation/system-setup-pcu/#copy-necessary-files-to-local-downloads-folder","title":"Copy necessary files to local Downloads folder","text":"<ol> <li>Copy files related to map contents.</li> </ol> <p>Files are placed in the directory :file_folder:docs/Appendix/Open-AD-Kit-Start-Guide/map</p> <ul> <li>:page_facing_up:lanelet2_map.osm</li> <li>:page_facing_up:pointcloud_map.pcd</li> <li>:page_facing_up:global_map_center.pcd.yaml</li> <li>:page_facing_up:lanelet2_map_provider.osm.yaml</li> <li>:page_facing_up:map_publisher.param.yaml</li> </ul> <p>Copy files to your local folder (Downloads folder as example) as the following directory structure.</p> <p></p> <ol> <li>Copy configuration file of Cyclone DDS.</li> </ol> <p>In this test, we are using Cyclone DDS, so you also need to copy configuration file of Cyclone DDS.</p> <p>File is placed in the directory :file_folder:docs/Appendix/Open-AD-Kit-Start-Guide/cyclonedds</p> <ul> <li>:page_facing_up:cyclonedds.xml</li> </ul> <p>Copy the file to your local folder as the following directory structure.</p> <p></p> <ol> <li>Copy kernel configuration file for tuning kernel parameters.</li> </ol> <p>We have to reconfigure kernel parameters by using <code>sysctl</code> for system stability.</p> <p>File is placed in the directory :file_folder:docs/Appendix/Open-AD-Kit-Start-Guide/sysctl.d</p> <ul> <li>:page_facing_up:60_cyclonedds.conf</li> </ul> <p>Copy the file to your local folder.</p>"},{"location":"version-0.1/start-guide/installation/system-setup-pcu/#copy-files-from-local-folder-to-pcu","title":"Copy files from local folder to PCU","text":"<ol> <li> <p>Connect your host PC with PCU through internet and copy files with SCP.</p> </li> <li> <p>Access to PCU via SSH</p> <p>For example;</p> <p><code>console   ssh user@192.168.10.221</code></p> </li> <li> <p>Copy kernel configuration file to <code>/etc/sysctl.d/</code></p> <p><code>console   sudo scp USER-NAME@IP-ADDRESS:/home/USER-NAME/Downloads/60_cyclonedds.conf /etc/sysctl.d/</code></p> <p>For example;</p> <p><code>console   sudo scp adlink@192.168.10.237:/home/adlink/Downloads/60_cyclonedds.conf /etc/sysctl.d/</code></p> <p>Then type in the password of PCU (default password: user) and host PC as request.</p> </li> <li> <p>Update kernel parameters.</p> <p><code>console   sudo sysctl -p /etc/sysctl.d/60_cyclonedds.conf</code></p> </li> <li> <p>Copy map contents files and Cyclone DDS configuration file.</p> <p><code>console   sudo scp -r USER-NAME@IP-ADDRESS:/home/adlink/Downloads/map ~/</code></p> <p><code>console   sudo scp -r USER-NAME@IP-ADDRESS:/home/adlink/Downloads/cyclonedds ~/</code></p> </li> </ol>"},{"location":"version-0.1/start-guide/installation/system-setup-pcu/#modify-cycloneddsxml","title":"Modify <code>cyclonedds.xml</code>","text":"<p>You need to change the element <code>NetworkInterfaceAddress</code> to the network interface currently in use.</p> <ol> <li>Find network interface.</li> </ol> <p><code>console    ip addr    1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000       link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00       inet 127.0.0.1/8 scope host lo         valid_lft forever preferred_lft forever       inet6 ::1/128 scope host         valid_lft forever preferred_lft forever    2: fm1-mac1: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq master br0 state DOWN group default qlen 1000       link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff       inet6 fe80::204:7cff:fe2e:190/64 scope link         valid_lft forever preferred_lft forever    3: fm1-mac5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000       link/ether 00:04:7c:2e:01:91 brd ff:ff:ff:ff:ff:ff       inet 192.168.10.221/24 brd 192.168.10.255 scope global dynamic fm1-mac5         valid_lft 254392sec preferred_lft 254392sec       inet6 fe80::204:7cff:fe2e:191/64 scope link         valid_lft forever preferred_lft forever    4: fm1-mac6: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq master br0 state DOWN group default qlen 1000       link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff    5: fm1-sw: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq master br0 state UP group default qlen 1000       link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff       inet6 fe80::204:7cff:fe2e:190/64 scope link          valid_lft forever preferred_lft forever    6: fm1-mac10: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq master br0 state DOWN group default qlen 1000       link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff    7: sit0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000       link/sit 0.0.0.0 brd 0.0.0.0    8: br0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000       link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff       inet 192.168.1.239/24 brd 192.168.1.255 scope global br0         valid_lft forever preferred_lft forever       inet6 fe80::204:7cff:fe2e:190/64 scope link         valid_lft forever preferred_lft forever    9: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default       link/ether 02:42:cb:aa:a6:9d brd ff:ff:ff:ff:ff:ff       inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0         valid_lft forever preferred_lft forever</code></p> <p>:speech_balloon: You can find a network interface such as <code>fm1-mac5</code>.</p> <ol> <li>Change the <code>NetworkInterfaceAddress</code>.</li> </ol> <p><code>console    sudo vi ~/cyclonedds/cyclonedds.xml</code></p> <p>For example; :page_facing_up: cyclonedds.xml</p> <p>```diff         -  lo    +  fm1-mac5 </p> <p>```</p>"},{"location":"version-0.1/system-configuration/","title":"System configuration","text":"<p>TODO</p>"}]}