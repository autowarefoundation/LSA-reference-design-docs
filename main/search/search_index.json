{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#about-reference-design-guideline-for-lsa-vehicles","title":"About Reference Design Guideline for LSA Vehicles","text":"<p>This document serves a guideline to design and deploy a TRL-6 low speed autonomy vehicle based on Autoware. The readers can take this document as a starting point to select and configure the hardware and software components of the vehicles.</p>"},{"location":"#reference-design-guideline-for-lsa-vehicles-documentation-structure","title":"Reference Design Guideline for LSA Vehicles documentation structure","text":"<p>The reference design WG publishes the guidelines for Low Speed Autonomy (LSA) vehicles, using the following document structure shown below.</p> <p></p> <p>For more details about the reference design WG, its goals and details of the Autoware Foundation working groups that oversees the project, refer to the Reference Design WG wiki</p>"},{"location":"#getting-started","title":"Getting started","text":"<ul> <li>ODD</li> <li>Hardware Configuration</li> <li>Software Configuration</li> <li>Evaluation and Testing</li> </ul>"},{"location":"#other-example-design","title":"Other Example Design","text":"<ul> <li>RoboRacer (F1Tenth) describes the design and implementation of racing robots using Autoware.</li> <li>GoKart describes the design and implementation of EV GoKart using Autoware.</li> <li>KWT LSV describes the design and implementation of the LSV by KWT.</li> <li>System configuration describes the components that make up LSA vehicles in terms of the required hardware and software.</li> </ul>"},{"location":"evaluation-and-testing/","title":"Evaluation and Testing","text":"<p>(To be completed)</p>"},{"location":"evaluation-and-testing/#expected-performance-metrics-for-arm-based-ecus","title":"Expected Performance Metrics for ARM-based ECUs","text":"Component AGX Orin Xavier Orin Nano LiDAR Detection 10 Hz 8 Hz 5 Hz Camera Detection 20 Hz 15 Hz 10 Hz Planning 10 Hz 10 Hz 8 Hz Control 50 Hz 50 Hz 50 Hz Power Usage 40W 25W 12W"},{"location":"evaluation-and-testing/#expected-performance-metrics-for-x86-based-ecus","title":"Expected Performance Metrics for X86-based ECUs","text":"Component Target FPS CPU Usage GPU Usage Latency LiDAR Detection 10 Hz 20-30% 40-60% &lt;100ms Camera Detection 15 Hz 15-25% 50-70% &lt;80ms Planning 10 Hz 30-40% N/A &lt;50ms Control 50 Hz 10-15% N/A &lt;20ms"},{"location":"evaluation-and-testing/#advantech-x86-based-ecu","title":"AdvanTech X86-based ECU","text":""},{"location":"evaluation-and-testing/#vecow-x86-based-ecu","title":"vecow X86-based ECU","text":""},{"location":"hardware-configuration/","title":"Hardware Configuration","text":"<p>(To be completed)</p> <p>This section describes the hardware configruations for LSA vehicles, including</p> <ul> <li>Chassis: describes the design specification of the chassis</li> <li>Sensors and Actuators: describes the sensors and actuators used in the reference design.</li> <li>ECUs: describes the ECUs used in the reference design.</li> </ul>"},{"location":"hardware-configuration/ECUs/","title":"ECUs","text":"<p>The page lists the ECUs being tested for LSA, which can meet the computation capacity requirement of LSA but does not overprovision the resource requirements. </p> <ul> <li>ARM-based ECUs: describes the hardware configuration for ARM-based ECUs.</li> <li>X86-based ECUs: describes the hardware configuration for X86-based ECUs</li> </ul>"},{"location":"hardware-configuration/ECUs/ad-computers/","title":"AD Computers","text":""},{"location":"hardware-configuration/ECUs/ad-computers/#advantech-ad-computers","title":"Advantech AD Computers","text":"<p>Advantech's autonomous driving and robotic computers are of compact size, with GMSL camera and other sensor data available at ROS level.</p> Supported Products List CPU GPU RAM, Interfaces Environmental Autoware Tested (Y/N) AFE-R760 (system, but the board  AFE-R360 is also avaialbe) Intel\u00ae Core\u2122 Ultra 7/5 Processors (Optional) MXM-type RTX A2000/A4500/5000Ada <ul><li>4 GMSL2 cameras</li><li>Dual Channel DDR5-5600, up to 96GB</li><li>3 x LAN up to 2.5GbE</li><li>4 x RS-232/422/485</li><li>2 x USB-C &amp; 2 USB-A  (10Gbps)</li><li>2 x CAN-FD</li></ul> <ul><li>Operating Temperature: -20 ~ 60\u00b0 C with 0.7m/s air flow</li><li>Vibration During Operation: 3 Grms, IEC 60068-2-64, random, 5 ~ 500 Hz, 1 hr/axis.</li><li>Shock During Operation 30 G, IEC 60068-2-27, half sine, 11 ms duration</li><li>EMC: Heavy industrial certificates, CE/FCC Class B, UKCA, CCC, BSMI</li></ul> Y AFE-R750-X0A1U (AGX Orin 32GB/64GB system, but the board  ASR-A701 is also avaialbe) 8/12-core NVIDIA Arm\u00ae Cortex A78AE v8.2 1792/2048-core NVIDIA Ampere GPU with 56/64 Tensor Cores <ul><li>8 x GMSL2 cameras</li><li>BOSCH BMI088 IMU</li><li>Xsens MTi3 IMU (Optional)</li><li>32/64GB 256-bit LPDDR5 DRAM</li><li> 4 x 2.5GbE, 4 x USB 3.2 Type A, 2 x isolated CANFD, 16bit isolated DIO, 2 x RS232/422/485</li> </ul> <ul><li>20~28V DC</li> <li>-10 ~ 60\u00b0C/50\u00b0C with 0.7 m/s air flow for 32GB/64GB</li></ul> Y <p>Link to company website is here.</p>"},{"location":"hardware-configuration/ECUs/ad-computers/#adlink-in-vehicle-computers","title":"ADLINK In-Vehicle Computers","text":"<p>ADLINK solutions which is used for autonomous driving and tested by one or more community members are listed below:</p> Supported Products List CPU GPU RAM, Interfaces Environmental Autoware Tested (Y/N) ADM-AL30 Intel\u00ae 13/12th Gen Core\u2122 I processor Nvidia RTX 4000 SFF Ada 128GB RAM, Serial, USB, Automotive Ethernet (Base-T1), 10G Ethernet, CAN 2.0/ CAN-FD, M.2/SATA SSD 9~36 VDC, E-Mark, 7637-2, IEC 60068-2-64: Operating: 5Grms, random, 5-500Hz, 3 axes (with SSD) Y AVA-3510 Intel\u00ae Xeon\u00ae E-2278GE Dual MXM RTX 5000 64GB RAM,CAN, USB, 10G Ethernet, DIO, Hot-Swap SSD, USIM 9~36 VDC, MIL-STD-810H,ISO 7637-2 Y SOAFEE\u2019s AVA Developer Platform Ampere Altra ARMv8 optional USB, Ethernet, DIO, M.2 NVMe SSDs 110/220 AC Y RQX-58G 8-core Arm Nvidia Jetson AGX Xavier USB, Ethernet, M.2 NVME SSD, CAN, USIM, GMSL2 Camera support 9~36VDC, IEC 60068-2-64: Operating 3Grms, 5-500 Hz, 3 axes Y RQX-59G 8-core Arm Nvidia Jetson AGX Orin USB, Ethernet, M.2 NVME SSD, CAN, USIM, GMSL2 Camera support 9~36VDC, IEC 60068-2-64: Operating 3Grms, 5-500 Hz, 3 axes - <p>Link to company website is here.</p>"},{"location":"hardware-configuration/ECUs/ad-computers/#nxp-in-vehicle-computers","title":"NXP In-Vehicle Computers","text":"<p>NXP solutions which is used for autonomous driving and tested by one or more community members are listed below:</p> Supported Products List CPU GPU RAM, Interfaces Environmental Autoware Tested (Y/N) BLUEBOX 3.0 16 x Arm\u00ae Cortex\u00ae-A72 Dual RTX 8000 or RTX A6000 16 GB RAM CAN, FlexRay, USB, Ethernet, DIO, SSD ASIL-D - <p>Link to company website is here.</p>"},{"location":"hardware-configuration/ECUs/ad-computers/#neousys-in-vehicle-computers","title":"Neousys In-Vehicle Computers","text":"<p>Neousys solutions which is used for autonomous driving and tested by one or more community members are listed below:</p> Supported Products List CPU GPU RAM, Interfaces Environmental Autoware Tested (Y/N) 8805-GC AMD\u00ae EPYC\u2122 7003 NVIDIA\u00ae RTX A6000/ A4500 512GB CAN, USB, Ethernet, Serial, Easy-Swap SSD 8-48 Volt, Vibration:MIL-STD810G, Method 514.6, Category 4 Y 10208-GC Intel\u00ae 13th/12th-Gen Core\u2122 Dual 350W NVIDIA\u00ae RTX GPU 64GB CAN, USB, Ethernet, Serial, M2 NVMe SSD 8~48 Volt, Vibration: MIL-STD-810H, Method 514.8, Category 4 Y 9160-GC Intel\u00ae 13th/12th-Gen Core\u2122 NVIDIA\u00ae RTX series up to 130W TDP 64GB CAN, USB, Ethernet, PoE, Serial, two 2.5\" SATA HDD/SSD with RAID, M2 NVMe SSD 8~48, Vibration: Volt,MIL-STD-810G, Method 514.6, Category 4 - <p>Link to company website is here.</p>"},{"location":"hardware-configuration/ECUs/ad-computers/#crystal-rugged-in-vehicle-computers","title":"Crystal Rugged In-Vehicle Computers","text":"<p>Crystal Rugged solutions which is used for autonomous driving and tested by one or more community members are listed below:</p> Supported Products List CPU GPU RAM, Interfaces Environmental Autoware Tested (Y/N) AVC 0161-AC Intel\u00ae Xeon\u00ae Scalable Dual GPU RTX Series 2TB RAM,CAN, USB, Ethernet, Serial, Hot-Swap SSD 10-32 VoltVibration:2 G RMS 10-1000 Hz, 3 axes - AVC0403 Intel\u00ae Xeon\u00ae Scalable or AMD EPYC\u2122 Optional (5 GPU) 2TB RAM, CAN, USB, Ethernet, Serial, Hot-Swap SSD 10-32 Volt, Vibration: 2 G RMS 10-1000 Hz, 3 axes - AVC1322 Intel\u00ae Xeon\u00ae D-1718T or Gen 12/13 Core\u2122 i3/i5/i7 NVIDIA\u00ae Jetson AGX Orin 128 GB DDR4 RAM, USB, Ethernet, Serial, SATA 2.5\u201d SSD 10-36 Volt, Vibration: 5.5g, 5-2,000Hz, 60 min/axis, 3 axis - AVC1753 10th Generation Intel\u00ae Core\u2122 and Xeon\u00ae Optional (1 GPU) 128 GB DDR4 RAM, USB, Ethernet, NVMe U.2 SSD/ 3 SATA SSD 8-36 VDC/ 120-240VAC 50/60Hz, Vibration: 5.5g, 5-2,000Hz, 60 min/axis, 3 axis - <p>Link to company website is here.</p>"},{"location":"hardware-configuration/ECUs/ad-computers/#vecow-in-vehicle-computers","title":"Vecow In-Vehicle Computers","text":"<p>Vecow solutions which is used for autonomous driving and tested by one or more community members are listed below:</p> Supported Products List CPU GPU RAM, Interfaces Environmental Autoware Tested (Y/N) ECX-3800 PEG Intel\u00ae 13th/12th-Gen Core\u2122 200W power of NVIDIA\u00ae or AMD graphics 64GB RAM, CAN, USB, Ethernet, PoE, Serial, M.2/SATA SSD, SIM Card 12-50 Volt, Vibration:MIL-STD810G, Procedure I, 20\u00b0C to 45\u00b0C - IVX-1000 Intel\u00ae 13th/12th-Gen Core\u2122 NVIDIA Quadro\u00ae MXM Graphics 64GB RAM, Ethernet, PoE, Serial, M.2/SATA/mSATA SSD, SIM Card 16-160 Volt, Vibration: IEC 61373 : 2010, 40\u00b0C to 85\u00b0C - <p>Link to company website is here.</p>"},{"location":"hardware-configuration/ECUs/armECUs/","title":"ARM-based ECUs","text":"<p>The page lists the ARM-based ECUs being tested for LSA, which can meet the computation capacity requirement of LSA but does not overprovision the resource requirements. </p> <p>Another page on Autoware Document lists the ECUs being for other use scenarios. </p> <p>(Candidates of the ECUS to be used by the LSA)</p>"},{"location":"hardware-configuration/ECUs/armECUs/#nvidia-in-vehicle-computers","title":"nVidia In-Vehicle Computers","text":"<p> nVidia provides the development kit as a reference design. </p> Supported Products List CPU GPU RAM, Interfaces Environmental Autoware Tested (Y/N) nVidia Jetson Orin 12-core Arm\u00ae Cortex\u00ae-A78AE v8.2 64-bit CPU 3MB L2 + 6MB L3 2048-core NVIDIA Ampere architecture GPU with 64 Tensor Cores 64 GB RAM, Up to 6 cameras (16 via virtual channels), 4x USB2.0 1x 1GbE, 1x10GbE None Yes DRIVE AGX Orin Developer Kit 12 Cortex-A78A CPU 2048-core NVIDIA Ampere architecture GPU with 64 Tensor Cores 16x GMSL cameras, 2x 10GbE, 10x 1GbE, 6x 100 MbE, 6 CAN ASIL-D (TBA) <p>Link to company website is here.</p>"},{"location":"hardware-configuration/ECUs/armECUs/#adlink-in-vehicle-computers","title":"ADLINK In-Vehicle Computers","text":"<p>ADLINK solutions which is used for autonomous driving and tested by one or more community members are listed below:</p> Supported Products List CPU GPU RAM, Interfaces Environmental Autoware Tested (Y/N) SOAFEE\u2019s AVA Developer Platform Ampere Altra ARMv8 optional USB, Ethernet, DIO, M.2 NVMe SSDs 110/220 AC Y RQX-58G 8-core Arm Nvidia Jetson AGX Xavier USB, Ethernet, M.2 NVME SSD, CAN, USIM, GMSL2 Camera support 9~36VDC, IEC 60068-2-64: Operating 3Grms, 5-500 Hz, 3 axes Y RQX-59G 8-core Arm Nvidia Jetson AGX Orin USB, Ethernet, M.2 NVME SSD, CAN, USIM, GMSL2 Camera support 9~36VDC, IEC 60068-2-64: Operating 3Grms, 5-500 Hz, 3 axes - <p>Link to company website is here.</p>"},{"location":"hardware-configuration/ECUs/armECUs/#nxp-in-vehicle-computers","title":"NXP In-Vehicle Computers","text":"<p>NXP solutions which is used for autonomous driving and tested by one or more community members are listed below:</p> Supported Products List CPU GPU RAM, Interfaces Environmental Autoware Tested (Y/N) BLUEBOX 3.0 16 x Arm\u00ae Cortex\u00ae-A72 Dual RTX 8000 or RTX A6000 16 GB RAM CAN, FlexRay, USB, Ethernet, DIO, SSD ASIL-D - <p>Link to company website is here.</p>"},{"location":"hardware-configuration/ECUs/armECUs/#advantech-in-vehicle-computers","title":"Advantech In-Vehicle Computers","text":"<p>Advantech's autonomous driving and robotic computers are of compact size, with GMSL camera and other sensor data available at ROS level.</p> Supported Products List CPU GPU RAM, Interfaces Environmental Autoware Tested (Y/N) AFE-R750-X0A1U (AGX Orin 32GB/64GB system, but the board  ASR-A701 is also avaialbe) 8/12-core NVIDIA Arm\u00ae Cortex A78AE v8.2 1792/2048-core NVIDIA Ampere GPU with 56/64 Tensor Cores <ul><li>8 x GMSL2 cameras</li><li>BOSCH BMI088 IMU</li><li>Xsens MTi3 IMU (Optional)</li><li>32/64GB 256-bit LPDDR5 DRAM</li><li> 4 x 2.5GbE, 4 x USB 3.2 Type A, 2 x isolated CANFD, 16bit isolated DIO, 2 x RS232/422/485</li> </ul> <ul><li>20~28V DC</li> <li>-10 ~ 60\u00b0C/50\u00b0C with 0.7 m/s air flow for 32GB/64GB</li></ul> Y <p>Link to company website is here.</p>"},{"location":"hardware-configuration/ECUs/x86ECUs/","title":"X86-based ECUs","text":"<p>The page lists the X86-bsaed ECUs being tested for LSA, which can meet the computation capacity requirement of LSA but does not overprovision the resource requirements. </p> <p>Another page on Autoware Document lists the ECUs being for other use scenarios. </p> <p>(Candidates of the ECUS to be used by the LSA)</p>"},{"location":"hardware-configuration/ECUs/x86ECUs/#adlink-in-vehicle-computers","title":"ADLINK In-Vehicle Computers","text":"<p>ADLINK solutions which is used for autonomous driving and tested by one or more community members are listed below:</p> Supported Products List CPU GPU RAM, Interfaces Environmental Autoware Tested (Y/N) ADM-AL30 Intel\u00ae 13/12th Gen Core\u2122 I processor Nvidia RTX 4000 SFF Ada 128GB RAM, Serial, USB, Automotive Ethernet (Base-T1), 10G Ethernet, CAN 2.0/ CAN-FD, M.2/SATA SSD 9~36 VDC, E-Mark, 7637-2, IEC 60068-2-64: Operating: 5Grms, random, 5-500Hz, 3 axes (with SSD) Y AVA-3510 Intel\u00ae Xeon\u00ae E-2278GE Dual MXM RTX 5000 64GB RAM,CAN, USB, 10G Ethernet, DIO, Hot-Swap SSD, USIM 9~36 VDC, MIL-STD-810H,ISO 7637-2 Y <p>Link to company website is here.</p>"},{"location":"hardware-configuration/ECUs/x86ECUs/#advantech-in-vehicle-computers","title":"Advantech In-Vehicle Computers","text":"<p>Advantech's autonomous driving and robotic computers are of compact size, with GMSL camera and other sensor data available at ROS level.</p> Supported Products List CPU GPU RAM, Interfaces Environmental Autoware Tested (Y/N) AFE-R760 (system, but the board  AFE-R360 is also avaialbe) Intel\u00ae Core\u2122 Ultra 7/5 Processors (Optional) MXM-type RTX A2000/A4500/5000Ada <ul><li>4 GMSL2 cameras</li><li>Dual Channel DDR5-5600, up to 96GB</li><li>3 x LAN up to 2.5GbE</li><li>4 x RS-232/422/485</li><li>2 x USB-C &amp; 2 USB-A  (10Gbps)</li><li>2 x CAN-FD</li></ul> <ul><li>Operating Temperature: -20 ~ 60\u00b0 C with 0.7m/s air flow</li><li>Vibration During Operation: 3 Grms, IEC 60068-2-64, random, 5 ~ 500 Hz, 1 hr/axis.</li><li>Shock During Operation 30 G, IEC 60068-2-27, half sine, 11 ms duration</li><li>EMC: Heavy industrial certificates, CE/FCC Class B, UKCA, CCC, BSMI</li></ul> Y <p>Link to company website is here.</p>"},{"location":"hardware-configuration/ECUs/x86ECUs/#neousys-in-vehicle-computers","title":"Neousys In-Vehicle Computers","text":"<p>Neousys solutions which is used for autonomous driving and tested by one or more community members are listed below:</p> Supported Products List CPU GPU RAM, Interfaces Environmental Autoware Tested (Y/N) 8805-GC AMD\u00ae EPYC\u2122 7003 NVIDIA\u00ae RTX A6000/ A4500 512GB CAN, USB, Ethernet, Serial, Easy-Swap SSD 8-48 Volt, Vibration:MIL-STD810G, Method 514.6, Category 4 Y 10208-GC Intel\u00ae 13th/12th-Gen Core\u2122 Dual 350W NVIDIA\u00ae RTX GPU 64GB CAN, USB, Ethernet, Serial, M2 NVMe SSD 8~48 Volt, Vibration: MIL-STD-810H, Method 514.8, Category 4 Y 9160-GC Intel\u00ae 13th/12th-Gen Core\u2122 NVIDIA\u00ae RTX series up to 130W TDP 64GB CAN, USB, Ethernet, PoE, Serial, two 2.5\" SATA HDD/SSD with RAID, M2 NVMe SSD 8~48, Vibration: Volt,MIL-STD-810G, Method 514.6, Category 4 - <p>Link to company website is here.</p>"},{"location":"hardware-configuration/ECUs/x86ECUs/#crystal-rugged-in-vehicle-computers","title":"Crystal Rugged In-Vehicle Computers","text":"<p>Crystal Rugged solutions which is used for autonomous driving and tested by one or more community members are listed below:</p> Supported Products List CPU GPU RAM, Interfaces Environmental Autoware Tested (Y/N) AVC 0161-AC Intel\u00ae Xeon\u00ae Scalable Dual GPU RTX Series 2TB RAM,CAN, USB, Ethernet, Serial, Hot-Swap SSD 10-32 VoltVibration:2 G RMS 10-1000 Hz, 3 axes - AVC0403 Intel\u00ae Xeon\u00ae Scalable or AMD EPYC\u2122 Optional (5 GPU) 2TB RAM, CAN, USB, Ethernet, Serial, Hot-Swap SSD 10-32 Volt, Vibration: 2 G RMS 10-1000 Hz, 3 axes - AVC1322 Intel\u00ae Xeon\u00ae D-1718T or Gen 12/13 Core\u2122 i3/i5/i7 NVIDIA\u00ae Jetson AGX Orin 128 GB DDR4 RAM, USB, Ethernet, Serial, SATA 2.5\u201d SSD 10-36 Volt, Vibration: 5.5g, 5-2,000Hz, 60 min/axis, 3 axis - AVC1753 10th Generation Intel\u00ae Core\u2122 and Xeon\u00ae Optional (1 GPU) 128 GB DDR4 RAM, USB, Ethernet, NVMe U.2 SSD/ 3 SATA SSD 8-36 VDC/ 120-240VAC 50/60Hz, Vibration: 5.5g, 5-2,000Hz, 60 min/axis, 3 axis - <p>Link to company website is here.</p>"},{"location":"hardware-configuration/ECUs/x86ECUs/#vecow-in-vehicle-computers","title":"Vecow In-Vehicle Computers","text":"<p>Vecow solutions which is used for autonomous driving and tested by one or more community members are listed below:</p> Supported Products List CPU GPU RAM, Interfaces Environmental Autoware Tested (Y/N) ECX-3800 PEG Intel\u00ae 13th/12th-Gen Core\u2122 200W power of NVIDIA\u00ae or AMD graphics 64GB RAM, CAN, USB, Ethernet, PoE, Serial, M.2/SATA SSD, SIM Card 12-50 Volt, Vibration:MIL-STD810G, Procedure I, 20\u00b0C to 45\u00b0C - IVX-1000 Intel\u00ae 13th/12th-Gen Core\u2122 NVIDIA Quadro\u00ae MXM Graphics 64GB RAM, Ethernet, PoE, Serial, M.2/SATA/mSATA SSD, SIM Card 16-160 Volt, Vibration: IEC 61373 : 2010, 40\u00b0C to 85\u00b0C - <p>Link to company website is here.</p>"},{"location":"hardware-configuration/Sensors-and-Actuators/","title":"Hardware Configuration","text":"<p>(To be completed)</p> <p>The page lists the sensors and actuators being tested for LSA, which can support the ODD of LSA. </p> <p>Another page on Autoware Document lists the sensors and actuators being used for other use scenarios.</p>"},{"location":"hardware-configuration/Sensors-and-Actuators/#velodyne-3d-lidar-sensors","title":"Velodyne 3D LIDAR Sensors","text":"<p>Velodyne Lidars which has ROS 2 driver and tested by one or more community members are listed below:</p> Supported Products List Range FOV (V), (H) ROS 2 Driver Autoware Tested (Y/N) Alpha Prime 245m (+15\u00b0)/(-25\u00b0), (360\u00b0) Y Y Ultra Puck 200m (+15\u00b0)/(-25\u00b0), (360\u00b0) Y Y Puck 100m (+15\u00b0)/(-15\u00b0), (360\u00b0) Y Y Puck Hi-res 100m (+10\u00b0)/(-10\u00b0), (360\u00b0) Y Y"},{"location":"hardware-configuration/Sensors-and-Actuators/#ouster-3d-lidar-sensors","title":"Ouster 3D LIDAR Sensors","text":"<p>Ouster Lidars which has ROS 2 driver and tested by one or more community members are listed below:</p> Supported Products List Range FOV (V), (H) ROS 2 Driver Autoware Tested (Y/N) OSDome 45m (180\u00b0), (360\u00b0) Y - OS0 100m (90\u00b0), (360\u00b0) Y - OS1 200m (45\u00b0), (360\u00b0) Y - OS2 400m (22,5\u00b0), (360\u00b0) Y Y <p>Link to ROS 2 driver: https://github.com/ros-drivers/ros2_ouster_drivers</p> <p>Link to company website: https://ouster.com/</p>"},{"location":"hardware-configuration/Sensors-and-Actuators/#robin-w-wide-fov-lidar","title":"Robin W Wide FOV LiDAR","text":"<p>Robin W Wide FoV Lidars which has ROS 2 driver and tested by one or more community members are listed below:</p> Supported Products List Range FOV (V), (H) ROS 2 Driver Autoware Tested (Y/N) Wide FOV LiDAR 0.1m~150m (120\u00b0), (70\u00b0) Y Yes <p>Link to company website: https://www.seyond.com/products/robin-w/</p>"},{"location":"hardware-configuration/Sensors-and-Actuators/lidars/","title":"LIDARs","text":""},{"location":"hardware-configuration/Sensors-and-Actuators/lidars/#velodyne-3d-lidar-sensors","title":"Velodyne 3D LIDAR Sensors","text":"<p>Velodyne Lidars which has ROS 2 driver and tested by one or more community members are listed below:</p> Supported Products List Range FOV (V), (H) ROS 2 Driver Autoware Tested (Y/N) Alpha Prime 245m (+15\u00b0)/(-25\u00b0), (360\u00b0) Y Y Ultra Puck 200m (+15\u00b0)/(-25\u00b0), (360\u00b0) Y Y Puck 100m (+15\u00b0)/(-15\u00b0), (360\u00b0) Y Y Puck Hi-res 100m (+10\u00b0)/(-10\u00b0), (360\u00b0) Y Y <p>Link to ROS 2 drivers: https://github.com/tier4/nebula https://github.com/ros-drivers/velodyne/tree/ros2/velodyne_pointcloud https://gitlab.com/autowarefoundation/autoware.auto/AutowareAuto/-/tree/master/src/drivers/velodyne_nodes https://github.com/autowarefoundation/awf_velodyne/tree/tier4/universe</p> <p>Link to company website: https://velodynelidar.com/</p>"},{"location":"hardware-configuration/Sensors-and-Actuators/lidars/#robosense-3d-lidar-sensors","title":"RoboSense 3D LIDAR Sensors","text":"<p>RoboSense Lidars which has ROS 2 driver and tested by one or more community members are listed below:</p> Supported Products List Range FOV (V), (H) ROS 2 Driver Autoware Tested (Y/N) M1 200m 25\u00b0/120\u00b0 - - E1 30m 90\u00b0/120\u00b0 - - Bpearl 100m 90\u00b0/360\u00b0 Y Y Ruby Plus 250m 40\u00b0/360\u00b0 Y ? Helios 32 150m 70\u00b0/360\u00b0 31\u00b0/360\u00b0 26\u00b0/360\u00b0 Y Y Helios 16 150m 30\u00b0/360\u00b0 Y ? <p>Link to ROS 2 driver: https://github.com/RoboSense-LiDAR/rslidar_sdk</p> <p>Link to company website: https://www.robosense.ai/</p>"},{"location":"hardware-configuration/Sensors-and-Actuators/lidars/#hesai-3d-lidar-sensors","title":"HESAI 3D LIDAR Sensors","text":"<p>Hesai Lidars which has ROS 2 driver and tested by one or more community members are listed below:</p> Supported Products List Range FOV (V), (H) ROS 2 Driver Autoware Tested (Y/N) Pandar 128 200m (+15\u00b0)/(-25\u00b0), (360\u00b0) Y - Pandar 64 200m (+15\u00b0)/(-25\u00b0), (360\u00b0) Y Y Pandar 40P 200m (+15\u00b0)/(-25\u00b0), (360\u00b0) Y Y QT 128 50m (-52.6\u00b0/+52.6\u00b0), (360\u00b0) Y Y QT 64 20m (-52.1\u00b0/+52.1\u00b0), (360\u00b0) Y Y AT128 200m (25.4\u00b0), (120\u00b0) Y Y XT32 120m (-16\u00b0/+15\u00b0), (360\u00b0) Y Y XT16 120m (-15\u00b0/+15\u00b0), (360\u00b0) Y - FT120 100m (75\u00b0), (100\u00b0) - - ET25 250m (25\u00b0), (120\u00b0) - - <p>Link to ROS 2 drivers: https://github.com/tier4/nebula https://github.com/HesaiTechnology/HesaiLidar_General_ROS</p> <p>Link to company website: https://www.hesaitech.com/en/</p>"},{"location":"hardware-configuration/Sensors-and-Actuators/lidars/#leishen-3d-lidar-sensors","title":"Leishen 3D LIDAR Sensors","text":"<p>Leishen Lidars which has ROS 2 driver and tested by one or more community members are listed below:</p> Supported Products List Range FOV (V), (H) ROS 2 Driver Autoware Tested (Y/N) LS C16 150m (+15\u00b0/-15\u00b0), (360\u00b0) Y - LS C32\u00a0 150m (+15\u00b0/-15\u00b0), (360\u00b0) Y - CH 32 120m (+3.7\u00b0/-6.7\u00b0),(120\u00b0) Y - CH 128 20m (+14\u00b0/-17\u00b0)/(150\u00b0) Y - C32W 160m (+15\u00b0/-55\u00b0), (360\u00b0) Y - <p>Link to ROS 2 driver: https://github.com/leishen-lidar</p> <p>Link to company website: http://www.lslidar.com/</p>"},{"location":"hardware-configuration/Sensors-and-Actuators/lidars/#livox-3d-lidar-sensors","title":"Livox 3D LIDAR Sensors","text":"<p>Livox Lidars which has ROS 2 driver and tested by one or more community members are listed below:</p> Supported Products List Range FOV (V), (H) ROS 2 Driver Autoware Tested (Y/N) Horizon 260m (81.7\u00b0), (25.1\u00b0) Y Y Mid-40 260m (38.4\u00b0), Circular Y - Mid-70 90m (70.4\u00b0), (77.2\u00b0) Y - Mid-100 260m (38.4\u00b0), (98.4\u00b0) Y - Mid-360 70m (+52\u00b0/-7\u00b0), (360\u00b0) Y - Avia 190m (70.4\u00b0), Circular Y - HAP 150m (25\u00b0), (120\u00b0) - - Tele-15 320m (16.2\u00b0), (14.5\u00b0) - - <p>Link to ROS 2 driver: https://github.com/Livox-SDK/livox_ros2_driver</p> <p>Link to company website: https://www.livoxtech.com/</p>"},{"location":"hardware-configuration/Sensors-and-Actuators/lidars/#ouster-3d-lidar-sensors","title":"Ouster 3D LIDAR Sensors","text":"<p>Ouster Lidars which has ROS 2 driver and tested by one or more community members are listed below:</p> Supported Products List Range FOV (V), (H) ROS 2 Driver Autoware Tested (Y/N) OSDome 45m (180\u00b0), (360\u00b0) Y - OS0 100m (90\u00b0), (360\u00b0) Y - OS1 200m (45\u00b0), (360\u00b0) Y - OS2 400m (22,5\u00b0), (360\u00b0) Y Y <p>Link to ROS 2 driver: https://github.com/ros-drivers/ros2_ouster_drivers</p> <p>Link to company website: https://ouster.com/</p>"},{"location":"hardware-configuration/chassis/","title":"Chassis Design","text":"<p>The page suggests the reference chassis for the Low Speed Autonomy.</p>"},{"location":"hardware-configuration/chassis/#vehicle-spec","title":"Vehicle Spec","text":"<ul> <li>Dimension:</li> </ul> Reference Design Wheel base (mm) Dimension (mm) Length 2500 3500 Heigh 2500 Width 1500 <ul> <li>Power Train</li> </ul> Reference Design Battery Capacity 22 kWh Range 200 km Voltage 96 V <ul> <li>Steering (Only support Two-Wheel Drive, 2WD)</li> </ul> Reference Design 2 Wheel V 4 Wheel Optional <ul> <li>Others</li> </ul> Reference Design Speed &lt;20 kph (5,10,15) Payload 500 - 1000KG Turn Radius &gt; 4M Slope 20 (degree)"},{"location":"hardware-configuration/chassis/#electronicalelectric-architecture-eea","title":"Electronical/Electric Architecture, EEA","text":""},{"location":"hardware-configuration/chassis/#reference","title":"Reference","text":"<ul> <li>AWF Reference Design Discussion (Excel)</li> <li>Reference Drawing (PDF)</li> </ul>"},{"location":"odd-definition/","title":"ODD Definition","text":"<p>(To be completed)</p> <p>Operation Domain Definition (ODD) describes the use scenarios for the vehicles to be designed and deployed. The deployed system should meet the ODD to be functionaly completed. This section describes the ODD for two use scenarios for LSA: Outdoor and Indoor. </p> <ul> <li>Outdoor: describes the ODD definition for outdoor campus environment.</li> <li>Indoor: describes the ODD definition for indoor environment.</li> </ul> <p>The outdoor ODD assumes that the vehicles can localize itself using GPS or HD map. However, the indoor ODD assumes that the vehicles do not have GPS reception and rely on camera and/or lidar for localization.</p>"},{"location":"odd-definition/indoor/","title":"ODD Definition","text":"<p>(To be completed)</p>"},{"location":"odd-definition/outdoor/","title":"Outdoor ODD definition","text":"<p>The page suggests the ODD use scenario for outdoor environment (campus).</p> Scenario ID Use Case Scenario Parameters and Values Demonstration LSA-CAM-0001 Normal driving \u25a0 Initial condition\u30fbThere is no NPC and no obstacle. EGO is running at Ve\u25a0 Action\u30fbEGO is running at Ve\u25a0 Success condition\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbEGO doesn't reach the destination\u3000 Ve: [10, 20, 30] km/h LSA-CAM-0002 Following the vehicle in front \u25a0 Initial condition\u30fbEGO is running at Ve and stays in the lane, follows the NPC\u25a0 Action\u30fbEGO follows the NPC at Ve. And NPC runs at Vf. EGO maintains the D[safe distance] from NPC\u25a0 Success condition\u30fbEGO reaches the destination \u30fbEGO maintains the D[safe distance] from NPC\u25a0 Failure condition\u30fbCollide with the preceding vehicle Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0003 Stop of the vehicle in front during following it \u25a0 Initial condition\u30fbEGO is running at Ve and stays in the lane, follows the NPC\u25a0 Action\u30fbAfter a while NPC stops. EGO stops at D[safe distance] from the vehicle in front after it stopped.\u25a0 Success condition\u30fbEGO stops D[m] before the vehicle NPC\u25a0 Failure condition\u30fbCollide with NPC\u30fbEGO decelaration exceeds -0.26G Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0004 Cutting-in \u25a0 Initial condition\u30fbEGO is running at Ve. NPC is running at Vf in the adjacent lane\u25a0 Action\u30fbNPC cuts in to the EGO vehicle's lane in distance D in front of the EGO vehicle at speed Vf. After the cut in, and EGO starts following NPC.\u25a0 Success condition\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbCollide with NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : [Ve [km] / 2] LSA-CAM-0005 Cutting-out \u25a0 Initial condition\u30fbEGO is running at Ve and stays in the lane, follows the NPC\u25a0 Action\u30fbWhen the distance between NPC and EGO is D, NPC cuts off. EGO stays in the lane\u25a0 Success condition\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbCollide with NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0006 Driving over crosswalk while a pedestrian crossing on the crosswalk \u25a0 Initial condition\u30fbEGO is running at Ve. There is a pedestrian or bicycle on crosswalk.\u30fb(May need to define the ped/bicycle position and the direction.)\u25a0 Action\u30fbEGO detects the pedestrian or bicycle on the crosswalk and stops gently. After pedestrian or bicycle leaves the crosswalk, EGO keeps driving.\u25a0 Success condition\u30fbEGO stops because detection of pedestrian or bicycle on the crosswalk\u25a0 Failure condition \u30fbCollide with the pedestrian or the bicycle Ve: [10, 20, 30] km/hVp: [2, 3, 5] km/h LSA-CAM-0007 Driving over crosswalk \u25a0 Initial condition\u30fbEGO is running at Ve and crosswalk is empty.\u25a0 Action\u30fbEGO runs at the constant speed of Ve\u25a0 Success condition\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbEGO doesn't reach the destination Ve: [10, 20, 30] km/h LSA-CAM-0008 Driving over speed bump \u25a0Initial condition\u30fbEGO is running at Ve\u25a0Action\u30fbEGO starts to decrease its speed to slow velocity (Vs) when D[m] distance left to speed bump. EGO passes the speed bump at Vs. After passing the speed bump completely, it starts to accelerate and continues driving at Ve.\u25a0Success condition\u30fbEGO drives at Vs over speed bump area\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbEGO doesn't drive at Vs over speed bump area\u30fbEGO decelaration exceeds -0.26G Ve: [10, 20, 30] km/hVs: [5] km/h, D: 3m LSA-CAM-0009 Stopping on stop line \u25a0Initial condition\u30fbEGO is running at Ve\u25a0Action\u30fbEGO recognizes the stop line. It decelerates and stops before the stop line. After t[sec] EGO starts to move at Ve.\u25a0Success condition\u30fbEGO stops before the stop line, waits t[sec].\u30fbEgo reaches the destination.\u25a0Failure condition\u30fbEGO doesn't stop at the stop point\u30fbEGO doesn't move after waiting t[sec]\u30fbEGO decelaration exceeds -0.26G Ve: [10, 20, 30] km/ht[waiting time] : 3 sec LSA-CAM-0010 Recognize the traffic light signal \u25a0Initial Condition\u30fbEGO is running at Ve\u25a0ActionEGO recognizes the status of the traffic signal D [m] ahead(1) as green, and EGO continues driving(2) as red, EGO stops(3) as green, and it changes to yellow (stopping distance from the EGO speed at the deceleration -0.26G)[m] before the signal. EGO decelerates and stops(4) as green, and it changes to yellow less than (stopping distance from the EGO speed at the deceleration -0.26G)[m] before the signal. EGO does not decelerate and enter the intersection(5) as red, the signal changes to green. EGO stops deceleration and starts acceleration\u25a0Success condition\u30fbEGO follows the traffic light rules\u25a0Failure condition\u30fbEGO does not behave as traffic light rules Ve: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0011 Run-out \u25a0Initial condition\u30fbEGO is running at Ve. There is a dog on the roadside.\u25a0Action\u30fbA dog runs out to road while EGO is driving. EGO detects the dog and stops gently. After dog leaves the road, EGO keeps driving.\u30fbMay need to define the size and the speed of the dog.\u25a0Success condition\u30fbEGO stops because detection of dog\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbCollide with the dog Ve: [10, 20, 30] km/h LSA-CAM-00012 Run-out \u25a0Initial condition\u30fbEGO is running at Ve. There is a pedestrian on the roadside.\u25a0Action\u30fbA pedestrian tries to crossing the road at Vp while EGO is driving. EGO detects the pedestrian and stops gently (&lt;-0.26G). After pedestrian leaves the road, EGO keeps driving.\u25a0Success condition\u30fbEGO stops because of detection of pedestrian\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbCollide with the pedestrian Ve: [10, 20, 30] km/hVp: [2, 3, 5] km/h UC-001-0013 A pedestrian on the road while driving \u25a0 Initial condition\u30fbEGO is running at Ve. There is a pedestrian on the road.\u25a0 Action\u30fbA Pedestrian stops on the road while EGO is driving. EGO detects the pedestrian and stops gently (less than -0.26G). \u25a0 Success condition\u30fbEGO stops because detection of pedestrian\u25a0 Failure condition\u30fbCollide with the pedestrian Ve: [10, 20, 30] km/h LSA-CAM-0014 Swerving around the static object \u25a0Initial condition\u30fbEGO is running at Ve. There is a parked vehicle by the roadside. The lane width is wider enough to pass (i.e., 2 x vehicle width)\u25a0Action\u30fbEGO recognizes the obstacle on the roadside and starts taking action to pass the obstacle at D[m] distance. EGO must stay in the lane while passing the parked vehicle. \u25a0Success condition\u30fbEGO reaches the destination.\u25a0Failure condition\u30fbCollide with the parked vehicle\u30fbEGO leaves the lane \u30fbLateral distance between EGO and parked vehicle is less than LD[m] Ve: [10, 20, 30] km/hD[safe distance] : 4mLD[safe distance] : 2m LSA-CAM-0015 Swerving around the static object \u25a0Initial condition\u30fbEGO is running at Ve. There is a parked vehicle by the roadside. The land width is less than 2 x vehicle width.\u25a0Action\u30fbEGO recognizes the obstacle on the roadside and starts taking action to pass the obstacle at D[m] distance. EGO must stay in the lane while passing the parked vehicle. \u25a0Success condition\u30fbEGO stops behind NPC.\u25a0Failure condition\u30fbCollide with the parked vehicle\u30fbEGO leaves the lane \u30fbLateral distance between EGO and parked vehicle is less than LD[m] Ve: [10, 20, 30] km/hD[safe distance] : 4mLD[safe distance] : 2m LSA-CAM-0016 Swerving around the pothole \u25a0Initial condition\u30fbEGO is running at Ve\u25a0Action\u30fbEGO recognizes the pothole on the road and starts taking action to pass the obstacle at D[m] distance.\u25a0Success condition\u30fbEGO reaches the destination\u25a0Failure condition\u30fbEGO goes into pothole Ve: [10, 20, 30] km/hVs: [5] km/hD[safe distance] : 3m LSA-CAM-0017 Swerving around the static object \u25a0Initial condition\u30fbEGO is running at Ve. There is a bus by the roadside\u25a0Action\u30fbEGO recognizes the obstacle on the roadside and starts taking action to pass the obstacle at D[m] distance. EGO must stay in the lane while passing the bus. \u25a0Success condition\u30fbEGO reaches the destination\u25a0Failure condition\u30fbCollide with the bus or trees\u30fbEGO leaves the lane \u30fbLateral distance between EGO and the bus is less than LD[m] Ve: [10, 20, 30] km/hD[safe distance] : 4mLD[safe distance] : 2m LSA-CAM-0018 Occlusion Spot \u25a0Initial condition\u30fbEGO is running at Ve. There is an NPC running at Vf. There are too many trees on both sides of the road. EGO's field of vision is not clear.\u25a0Action\u30fbEGO detects the NPC in a limited field of view. It waits for the NPC. After NPC passes the EGO, EGO continues driving.\u25a0Success condition\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbCollide with the NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/h LSA-CAM-0019 Occlusion Spot \u25a0Initial condition\u30fbEGO is running at Ve. There is an NPC is running at Vf. There are too many trees on roadside. EGO's field of vision is not clear.\u25a0Action\u30fbEGO detects the NPC in a limited field of view. It waits for the NPC. After NPC passes the EGO, EGO continues driving.\u25a0Success condition\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbCollide with the NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/h LSA-CAM-0020 Occlusion Spot \u25a0Initial condition\u30fbEGO is running at Ve. There is an NPC is running at Vf. There are too many trees on roadside. EGO's field of vision is not clear.\u25a0Action\u30fbEGO detects the NPC in a limited field of view. It waits for the NPC. After NPC passes the EGO, EGO continues driving.\u25a0Success condition\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbCollide with the NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/h LSA-CAM-0021 Blind spot \u25a0Initial condition\u30fbEGO is running at Ve and making right turn. There are cyclists in EGO's blind spot. They are running at Vb\u25a0Action\u30fbEGO detects cyclists in the blind spot it waits for the cyclists. After cyclists pass the EGO, EGO continues driving.\u25a0Success condition\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbCollide with the cyclists Ve: [10, 20, 30] km/hVb: [10, 12, 15] km/h LSA-CAM-0022 Blind spot \u25a0Initial condition\u30fbEGO is running at Ve and making right turn at the intersection. There are cyclists in EGO's blind spot. They are running at Vb\u25a0Action\u30fbEGO detects cyclists in the blind spot it waits for the cyclists. After cyclists pass the EGO, EGO continues driving.\u25a0Success condition\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbCollide with the cyclists Ve: [10, 20, 30] km/hVb: [10, 12, 15] km/h LSA-CAM-0023 Blind spot \u25a0Initial condition\u30fbEGO is running at Ve and making right turn at the intersection. There are cyclists and pedestrians in EGO's blind spot. Cyclists are running at Vb. Pedestrians are running at Vp.\u25a0Action\u30fbEGO detects cyclists in the blind spot it waits for the cyclists and pedestrians. After cyclists and pedestrians pass the EGO, EGO continues driving.\u25a0Success condition\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbCollide with the cyclists\u30fbCollide with the pedestrians Ve: [10, 20, 30] km/hVb: [10, 12, 15] km/hVp: [2, 3, 5] km/h LSA-CAM-0024 Driving in sloping road \u25a0Initial condition\u30fbEGO is running at Ve in sloping road. \u25a0Action\u30fbEGO keeps driving in sloping road without any break\u25a0Success condition\u30fbEGO reaches the destination\u25a0Failure condition\u30fbEGO runs backwards on sloping road Ve: [10, 20, 30] km/h LSA-CAM-0025 Driving in sloping road \u25a0Initial condition\u30fbEGO is running at Ve in sloping road. There is an NPC in front of the EGO. It is running at Vf\u25a0Action\u30fbEGO keeps driving in sloping road without any break and keeps the safe distance[D] between NPC\u25a0Success condition\u30fbEGO reaches the destination\u25a0Failure condition\u30fbEGO runs backwards on sloping road Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0026 Run out in sloping road \u25a0Initial condition\u30fbEGO is running at Ve. There is a pedestrian on the sloping roadside.\u25a0Action\u30fbA pedestrian tries to crossing road at Vp while EGO is driving. EGO detects the pedestrian and stops gently. After pedestrian leaves the road, EGO keeps driving.\u25a0Success condition\u30fbEGO stops because detection of pedestrian\u30fbEGO reaches the destination\u25a0 Failure condition\u30fbCollide with the pedestrian Ve: [10, 20, 30] km/hVp: [10, 20, 30] km/h LSA-CAM-0027 NPC coming from opposite direction of the lane when EGO is in the same lane In Scenario Simulator v2, we cannot let NPC dynamically avoid EGO vehicle. We might need to predefine NPC path. Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 7m LSA-CAM-0028 NPC coming from opposite direction of the lane when EGO is in the other lane \u25a0Initial condition\u30fbEGO is running at Ve. An NPC comes from opposite direction of the lane in when EGO is in the other lane\u25a0Action\u30fbEGO keeps driving at Ve.\u25a0Success condition\u30fbEGO reaches the destination\u25a0Failure condition\u30fbCollide with the NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/h LSA-CAM-0029 NPC coming from opposite direction of the lane when EGO is in the same lane \u25a0Initial condition \u30fbEGO is running at Ve. An NPC comes from opposite direction in single-lane.\u25a0Action \u30fbNPC coming from the opposite direction of the lane, EGO stops at a safe distance[D]. \u25a0Success condition \u30fbEGO stops at a safe distance[D]. \u25a0Failure condition \u30fbCollide with the NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 7m LSA-CAM-0030 NPC coming from opposite direction of the lane when EGO is in the same lane \u25a0Initial condition \u30fbEGO is running at Ve. An NPC comes from opposite direction in bi-directional lane.\u25a0Action \u30fbNPC coming from the opposite direction of the lane, EGO stops at a safe distance[D]. \u25a0Success condition \u30fbEGO stops at a safe distance[D]. \u25a0Failure condition \u30fbCollide with the NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 7m LSA-CAM-0031 U-Turn \u25a0Initial condition \u30fbEGO is running at Ve. \u25a0Action \u30fbEGO makes a u-turn\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbEGO doesn\u2019t complete the turn Ve: [10, 20, 30] km/h LSA-CAM-0032 U-Turn \u25a0Initial condition \u30fbEGO is running at Ve. There is an NPC in other lane. NPC is running at Vf.\u25a0Action \u30fbEGO makes a U-turn onto the other lane if it estimates that it will not collide with the NPC. \u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide wit the NPC\u30fbEGO doesn\u2019t complete the turn Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/h LSA-CAM-0033 U-Turn \u25a0Initial condition \u30fbEGO is running at Ve. An NPC is running at Vf in other lane. Another NPC is running at Vf in front of the EGO.\u25a0Action \u30fbEGO keeps the safe distance[D] between NPC. When this NPC leaves the front of EGO, EGO makes a u-turn U-turn onto the other lane if it estimates that it will not collide with the NPC.\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide wit the NPC\u30fbEGO doesn\u2019t complete the turn Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0034 Driving in main road \u25a0Initial condition\u30fbEGO is driving in the main road\u25a0Action\u30fb(1) NPC waits to EGO and EGO keeps driving at Ve.\u30fb(2) If NPC doesn\u2019t wait for EGO to pass first, EGO stops and waits to NPC.\u25a0Success condition\u30fbDriving on the main road without colliding with the NPC\u25a0Failure condition\u30fbCollide with the NPC on the main road Ve: [10, 20, 30] km/hVf: [0, 10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0035 Driving in main road \u25a0Initial condition\u30fbAn NPC is stopping at the stop line and going to make a right turn onto the main road\u25a0Action\u30fb(1) NPC waits to EGO and EGO keeps driving at Ve.\u30fb(2) If NPC doesn\u2019t wait to EGO, EGO stops and waits to NPC.\u25a0Success condition\u30fbDriving on the main road without colliding with the NPC\u25a0Failure condition\u30fbCollide with the NPC on the main road Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0036 T-Junction Turn \u25a0Initial condition\u30fbEGO is going to make a left turn onto the t-junction\u25a0Action\u30fbOn the t-junction, EGO makes a left turn onto the t-junction.\u25a0Success condition\u30fbMake a left turn onto the t-junction \u25a0Failure condition\u30fbCan\u2019t make a left turn onto the t-junction Ve: [10, 20, 30] km/h LSA-CAM-0037 T-Junction Turn \u25a0Initial condition\u30fbEGO is stopping at the stop line and going to make a left turn onto the t-junction\u25a0Action\u30fbOn the t-junction, EGO waits t[sec] at the stop line then makes a left turn onto the t-junction\u25a0Success condition\u30fbMake a left turn onto the main road without colliding with the NPC\u25a0Failure condition\u30fbCollide with the NPC on the main road Ve: [10, 20, 30] km/ht[waiting time] : 3 sec LSA-CAM-0038 T-Junction Turn and Interacting with Incoming Traffic \u25a0Initial condition\u30fbEGO is going to make a left turn onto the main road\u25a0Action\u30fbOn the main road, an NPC is approaching from the right in distance D[m] and at Vf. EGO makes a left turn onto the main road if it estimates that it will not collide with the NPC. If it calculates that it may collide with the NPC, it stops until NPC leaves the main road\u25a0Success condition\u30fbMake a left turn onto the main road without colliding with the NPC\u25a0Failure condition\u30fbCollide with the NPC on the main road Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0039 T-Junction Turn and Interacting with Incoming Traffic \u25a0Initial condition\u30fbEGO is stopping at the stop line and going to make a left turn onto the main road\u25a0Action\u30fbOn the main road, an NPC is approaching from the right in distance D[m] and at Vf. EGO makes a left turn onto the main road if it estimates that it will not collide with the NPC. If it calculates that it may collide with the NPC, it continues to stop at the stop line then make a left turn after the NPC passed\u25a0Success condition\u30fbMake a left turn onto the main road without colliding with the NPC\u25a0Failure condition\u30fbCollide with the NPC on the main road Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0040 T-Junction Turn and Interacting with Incoming Traffic \u25a0Initial condition\u30fbEGO is going to make a left turn. There is an NPC on the main road. NPC is running at Vf.\u25a0Action\u30fbOn the t-junction, an NPC is approaching from the left in distance D[m] and at Vf. EGO makes a left turn onto the t-junction if it estimates that it will not collide with the NPC. If it calculates that it may collide with the NPC, it stops until NPC leaves the road\u25a0Success condition\u30fbMake a left turn onto t-junction without colliding with the NPC\u25a0Failure condition\u30fbCollide with the NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0041 T-Junction Turn and Interacting with Incoming Traffic \u25a0Initial condition\u30fbEGO is stopping at the stop line and going to make a left turn. There is an NPC on the main road. NPC is running at Vf.\u25a0Action\u30fbOn the t-junction, an NPC is approaching from the left in distance D[m] and at Vf. EGO makes a left turn onto the t-junction if it estimates that it will not collide with the NPC. If it calculates that it may collide with the NPC, it continues to stop at the stop line\u25a0Success condition\u30fbMake a left turn onto t-junction without colliding with the NPC\u25a0Failure condition\u30fbCollide with the NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hD[safe distance] : 3mt[waiting time] : 3 sec LSA-CAM-0042 Driving in intersection \u25a0Initial condition\u30fbEGO is running at Ve. There is a parked vehicle in the intersection.\u25a0Action\u30fbEGO detects the parked vehicle and stops gently at D[m] distance\u25a0Success condition\u30fbStop due to parked vehicle\u25a0Failure condition\u30fbCollide with the parked vehicle Ve: [10, 20, 30] km/h LSA-CAM-0043 There are parked vehicles on the both sides \u25a0Initial condition\u30fbEGO is running at Ve. There are parked vehicles on both sides of the same-directional double-lane road\u25a0Action\u30fbEGO detects parked vehicles. Using some part of the other lane EGO swerves the parked vehicles. After swerving it moves back its lane.\u25a0Success condition\u30fbEGO reaches the destination\u25a0Failure condition\u30fbCollide with the parked vehicles Ve: [10, 20, 30] km/h LSA-CAM-0044 There are parked vehicles on the both sides \u25a0Initial condition\u30fbEGO is running at Ve. There are parked vehicles on both sides of the opposite-directional double-lane road\u25a0Action\u30fbEGO detects parked vehicles. EGO stops at safe distance[D] due that as EGO must stay in its lane.\u25a0Success condition\u30fbEGO stops at safe distance[D]\u25a0Failure condition\u30fbCollide with the parked vehicles Ve: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0045 Stop due pedestrian \u25a0Initial condition\u30fbEGO is running at Ve. There is a parked vehicle on the roadside of the opposite-directional double-lane road. A pedestrian getting into the parked vehicle\u25a0Action\u30fbEGO detects parked vehicle and pedestrian. It stops gently at safe distance[D] from parked vehicle. After the parked vehicle starts to run, EGO continues to drive while maintaining a safe distance[D].\u25a0Success condition\u30fbEGO stops at safe distance[D]\u25a0Failure condition\u30fbCollide with the parked vehicle Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/hVp: [2, 3, 5] km/hD[safe distance] : 3m LSA-CAM-0046 \u25a0Initial condition\u30fbEGO is running at Ve. There is a parked vehicle on the roadside of the same-directional double-lane road. A pedestrian getting into the parked vehicle\u25a0Action\u30fbEGO detects parked vehicle and pedestrian. It stops gently at safe distance[D] from parked vehicle. After the parked vehicle starts to run, EGO continues to drive while maintaining a safe distance[D].\u25a0Success condition\u30fbEGO stops at safe distance[D] and reaches the destination\u25a0Failure condition\u30fbCollide with the parked vehicle or pedestrian Ve: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0047 Driving backward \u25a0Initial condition\u30fbEGO is driving backward\u25a0Action\u30fbEGO is able to drive backward\u25a0Success condition\u30fbEGO reaches the destination\u25a0Failure condition\u30fbEGO doesn't reach the destination Ve: [5, 10, 15] km/h LSA-CAM-0048 Obstacle on the road \u25a0Initial condition\u30fbEGO is running at Ve. There are garbage cans on right side of the same-directional double-lane road\u25a0Action\u30fbEGO detects garbage cans. Using some part of the other lane EGO swerves the garbage cans. After swerving it moves back its lane.\u25a0Success condition\u30fbEGO reaches the destination\u25a0Failure condition\u30fbCollide with the garbage cans Ve: [10, 20, 30] km/hD[safe distance] : 3m LSA-CAM-0049 Obstacle on the road \u25a0Initial condition\u30fbEGO is running at Ve. There are garbage cans on the right side of the opposite-directional double-lane road\u25a0Action\u30fbEGO detects garbage cans. EGO stops at safe distance[D] due that EGO must stay in its lane.\u25a0Success condition\u30fbEGO stops at safe distance[D]\u25a0Failure condition\u30fbCollide with the garbage cans Ve: [10, 20, 30] km/h LSA-CAM-0050 There is a parked vehicle in the road shoulder \u25a0Initial condition \u30fbEGO is running at Ve. There's a shoulder lane to the right. There's a parked vehicle on the shoulder lane\u25a0Action \u30fbEGO detects the parked vehicle and avoids it by swerving move back to the center line after it passed the parked vehicle.\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with NPC (on the shoulder lane or opposite lane) Ve: [10, 20, 30] km/h LSA-CAM-0051 There is a parked vehicle in the shoulder lane \u25a0Initial condition \u30fbEGO is running at Ve. There's a shoulder lane to the right. There's a parked vehicle on the shoulder lane\u25a0Action \u30fbEGO detects the parked vehicle, avoids it by changing lane and move back to its lane after it passed the parked vehicle.\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with the NPC Ve: [10, 20, 30] km/h LSA-CAM-0052 There is a vehicle in the shoulder lane \u25a0Initial condition \u30fbEGO is running at Ve. There's a shoulder lane to the right. NPC driving in shoulder lane.\u25a0Action \u30fbEGO detects NPC in the shoulder lane and continues to drive while maintaining a safe distance from that NPC in the shoulder lane. EGO must stay behind the NPC in the shoulder lane. \u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/h[D] Safe Distance: 3 LSA-CAM-0053 There are bicyclists in the bicycle way \u25a0Initial condition \u30fbEGO is running at Ve. There's a bike-way to the right and there are bicyclist in bike-way\u25a0Action \u30fbEGO detects bicyclist in the bike-way, continues to drive and bicyclist passes gently\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with bicyclist Ve: [10, 20, 30] km/hVb: [10, 12, 15] LSA-CAM-0054 Pull out in shoulder lane \u25a0Initial condition \u30fbEGO is running at Ve in empty shoulder lane\u25a0Action \u30fbEGO pulls out in shoulder lane\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbEGO doesn't reach the destination Ve: [10, 20, 30] km/h LSA-CAM-0055 Pull out in shoulder lane \u25a0Initial condition \u30fbEGO is running at Ve in shoulder lane. NPC is running at Vf in shoulder lane. And there is an NPC in other lane .\u25a0Action \u30fbEGO pulls out at a safe distance[D] from the vehicle on the shoulder lane. EGO follows the NPC in the lane until NPC pulls over.\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/h[D] Safe Distance: 3 LSA-CAM-0056 Pull out in shoulder lane \u25a0Initial condition \u30fbEGO is running at Ve in shoulder lane. NPC is running at Vf in shoulder lane And there is an NPC coming from behind on the other lane at Vf\u25a0Action \u30fbEGO waits for the vehicle in the left lane to pass. EGO pulls out at a safe distance[D] from the vehicle on the shoulder lane\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with NPC Ve: [10, 20, 30] km/h LSA-CAM-0057 Pull out in shoulder lane \u25a0Initial condition \u30fbEGO is running at Ve in shoulder lane. There is an parked vehicle in shoulder lane.\u25a0Action \u30fbEGO pulls out at a safe distance[D] from the vehicle on the shoulder lane.\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with NPC Ve: [10, 20, 30] km/h[D] Safe Distance: 3 LSA-CAM-0058 Pull out behavior in shoulder lane \u25a0Initial condition \u30fbEGO is running at Ve in shoulder lane. bicyclist is running at Vb in shoulder lane.\u25a0Action \u30fbEGO pulls out the shoulder lane keeping a safe distance[D] from the bicyclist.\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with bicyclist Ve: [10, 20, 30] km/hVb: [10, 12, 15] km/h[D] Safe Distance: 3 LSA-CAM-0059 Pull out behavior in bicycle way \u25a0Initial condition \u30fbEGO is running at Ve in empty bicycle way\u25a0Action \u30fbEGO pulls out in bike-way\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbEGO doesn't reach the destination Ve: [10, 20, 30] km/h LSA-CAM-0060 Pull out behavior in bicycle way \u25a0Initial condition \u30fbEGO is running at Ve in bicycle way. There is an parked vehicle in bicycle way.\u25a0Action \u30fbEGO pulls out at a safe distance[D] from the vehicle on the bikeway.\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with NPC Ve: [10, 20, 30] km/h[D] Safe Distance: 3 LSA-CAM-0061 Pull out behavior in bicycle way \u25a0Initial condition \u30fbEGO is running at Ve in bicycle way. NPC is running at Vf in bicycle way. And there is an NPC in other lane .\u25a0Action \u30fbEGO pulls out at a safe distance[D] from the vehicle on the bikeway. EGO follows the NPC in the lane until NPC pulls over.\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/h[D] Safe Distance: 3 LSA-CAM-0062 Pull out behavior in bicycle way \u25a0Initial condition \u30fbEGO is running at Ve in bicycle way. NPC is running at Vf in bicycle way. And there is an NPC coming from behind on the other lane at Vf\u25a0Action \u30fbEGO waits for the vehicle in the left lane to pass. EGO pulls out at a safe distance[D] from the vehicle on the bike way\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/h[D] Safe Distance: 3 LSA-CAM-0063 Pull over behavior in shoulder lane \u25a0Initial condition \u30fbEGO is running at Ve.\u25a0Action \u30fbEGO pulls over in shoulder lane\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbEGO doesn't reach the destination Ve: [10, 20, 30] km/h LSA-CAM-0064 Pull over in shoulder lane \u25a0Initial condition \u30fbEGO is running at Ve. There are multiple parked vehicle in the shoulder lane.\u25a0Action \u30fbEGO pulls over, keeping a safe distance between two vehicles \u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with NPC Ve: [10, 20, 30] km/h[D] Safe Distance: 3 LSA-CAM-0065 Pull over in shoulder lane \u25a0Initial condition \u30fbEGO is running at Ve. There are multiple parked bicycle in the shoulder lane.\u25a0Action \u30fbEGO pulls over in shoulder lane after passing all parked bicycle\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with bicycle Ve: [10, 20, 30] km/h LSA-CAM-0066 Pull over in shoulder lane (dynamic objects) \u25a0Initial condition \u30fbEGO is running at Ve. There's a shoulder lane to the right and there are pedestrians in shoulder lane\u25a0Action \u30fbEGO pulls over, keeping a safe distance between pedestrians\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with pedestrian Ve: [10] km/h. D=10m (longer than safe distance for static objects), the speed while looking for the safe space should be defined. LSA-CAM-0067 Pull over in shoulder lane (Static objects) \u25a0Initial condition \u30fbEGO is running at Ve. There are garbage cans in the shoulder lane.\u25a0Action \u30fbEGO pulls over, keeping a safe distance between garbage cans\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with the garbage cans Ve: [10, 20] km/h, D= 1m (front)/1m (back), 4m (vehicle length) LSA-CAM-0068 Pull over in shoulder lane \u25a0Initial condition \u30fbEGO is running at Ve. There is an NPC in the shoulder lane.\u25a0Action \u30fbEGO tries to pull over but there is a parked vehicle in the destination point for this reason EGO finds an another available area to pull over.\u25a0Success condition \u30fbEGO stops at new location\u25a0Failure condition \u30fbCollide with parked vehicle Ve: [10, 20, 30] km/h LSA-CAM-0069 Pull over in bicycle way \u25a0Initial condition \u30fbEGO is running at Ve.\u25a0Action \u30fbEGO pulls over in bike-way\u25a0Success condition \u30fbEGO reaches the destination\u30fbSafely pull over\u25a0Failure condition \u30fbEGO doesn't reach the destination Ve: [10, 20, 30] km/h LSA-CAM-0070 Pull over in bicycle way \u25a0Initial condition \u30fbEGO is running at Ve. There are multiple parked vehicle in the bicycle way.\u25a0Action \u30fbEGO pulls over in bike-way after passing all parked vehicle\u25a0Success condition \u30fbEGO reaches the destination\u30fbSafely pull over\u25a0Failure condition \u30fbCollide with NPC Ve: [10, 20, 30] km/h LSA-CAM-0071 Pull over in bicycle way \u25a0Initial condition \u30fbEGO is running at Ve. There is an NPC and bicyclist in the bicycle way.\u25a0Action \u30fb(1) Bicyclist drives at Vb on bike-way. A pedestrian waits in the bike-way. EGO waits for bicyclist to pass. EGO pulls over at safe distance[D] to pedestrian\u30fb(2) Bicyclist drives at Vb on bike-way. A pedestrian leaves the bikeway at Vp. EGO waits for bicyclist and pedestrian to pass and pulls over.\u25a0Success condition \u30fbEGO reaches the destination\u30fbSafely pull over\u25a0Failure condition \u30fbCollide with bicyclist or pedestrian Ve: [10, 20, 30] km/hVb: [10, 12, 15] km/hVp: [0, 2, 3, 5] km/h LSA-CAM-0072 Pull over in bicycle way \u25a0Initial condition \u30fbEGO is running at Ve. There are bicyclists in the bi-directional bicycle way.\u25a0Action \u30fbBicyclist drives at Vb on bike-way. EGO waits for bicyclists to pass. EGO pulls over\u25a0Success condition \u30fbEGO reaches the destination\u30fbSafely pull over\u25a0Failure condition \u30fbCollide with bicyclists Ve: [10, 20, 30] km/hVb: [10, 12, 15] km/h LSA-CAM-0073 Driving narrow road \u25a0Initial condition \u30fbEGO is running at Ve. The lane gets narrower.\u25a0Action \u30fbEGO using part of the bike-way continues the driving.\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbEGO doesn't reach the destination Ve: [10, 20, 30] km/h LSA-CAM-0074 Driving narrow road \u25a0Initial condition \u30fbEGO is running at Ve. The lane gets narrower. And there are multiple bicyclists in bicycle way\u25a0Action \u30fbBicyclists drives at Vb on bike-way. EGO waits for bicyclist to pass. EGO using part of the bike-way continues the driving\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with bicyclist Ve: [10, 20, 30] km/hVb:[10, 12, 15] km/h LSA-CAM-0075 Merging roads \u25a0Initial condition \u30fbEGO is running at Ve. An NPC is running at Vf.\u25a0Action \u30fbWhile NPC drives on the road, EGO makes a right turn. if they meet at the end of the road EGO stops and waits for the NPC to pass.if they don't meet the EGO continues to drive.\u25a0Success condition \u30fbEGO reaches the destination\u25a0Failure condition \u30fbCollide with the NPC Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/h LSA-CAM-0076 Re-routing \u25a0Initial condition \u30fbEGO is running at Ve. There is a closed road in EGO\u2019s route.\u25a0Action \u30fbEGO detects the closed road and creates a new route. Even if it is not the shortest route, EGO follows this route. \u25a0Success condition \u30fbEGO creates a new route\u30fbEGO reaches the destination\u25a0Failure condition \u30fbEGO doesn\u2019t create a new route and doesn\u2019t reach the destination Ve: [10, 20, 30] km/h LSA-CAM-0077 Parking \u25a0Initial condition \u30fbEGO is running at Ve. And it'll park in empty parking spot \u25a0Action EGO chooses a parking spot and parked\u25a0Success condition \u30fbEGO parks (reverse parking)\u25a0Failure condition \u30fbEGO doesn't park Ve: [10, 20, 30] km/h LSA-CAM-0078 Parking \u25a0Initial condition \u30fbEGO is running at Ve. And it'll park. There are two vehicle in the parking spot\u25a0Action (1) EGO can park between two vehicles (2) EGO can park last empty parking spot\u25a0Success condition \u30fbEGO parks\u25a0Failure condition \u30fbEGO doesn't park or collides other parked vehicles Ve: [10, 20, 30] km/h LSA-CAM-0079 Parking \u25a0Initial condition \u30fbEGO is running at Ve. And it'll park. There are two vehicle in the parking spot. But one of them is going to move\u25a0Action (1) EGO can wait until the first vehicle leaves the parking spot and it can parked there.(2) EGO can park second or last empty parking spot\u25a0Success condition \u30fbEGO parks\u25a0Failure condition \u30fbEGO doesn't park or collides other parked vehicles Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/h LSA-CAM-0080 Parking \u25a0Initial condition \u30fbEGO is running at Ve. There are multiple parked vehicle in the parking spot.\u25a0Action \u30fbEGO parks in parking spot before parked vehicles\u25a0Success condition \u30fbEGO parks\u25a0Failure condition \u30fbEGO doesn't park or collides other parked vehicles Ve: [10, 20, 30] km/h LSA-CAM-0081 Parking \u25a0Initial condition \u30fbEGO is running at Ve. And it'll park. There are two vehicle in the parking spot. But one of them is going to move\u25a0Action (1) EGO can park any empty parking spot(2) EGO can wait until the second vehicle leaves the parking spot and it can parked there.\u25a0Success condition \u30fbEGO parks\u25a0Failure condition \u30fbEGO doesn't park or collides other parked vehicles Ve: [10, 20, 30] km/hVf: [10, 20, 30] km/h"},{"location":"odd-definition/outdoor/#reference","title":"Reference","text":""},{"location":"other-example-designs/","title":"Other Examples Design","text":"<p>This page describes several examples of Autoware-based Low Speed Autonomy Vehicles. These examples are provided by the users and are shown as an example.</p> <ol> <li>RacingRobot (F1Tenth) demonstrates the deployment of Autoware on one tenth scale racing vehicles.</li> <li>GoKart demonstrates the deployment of Autoware on an EV GoCart.</li> <li>KingWayTek LSV shows how KingWayTek (Taiwan) designs their LSV to operate in Taiwan.</li> <li>Autoware Delivery Vehicles demonstrates the design of a delivery vehicle based on Autoware.</li> <li>AutoSDV demonstrates the design of one eighth size based on Autoware.</li> </ol>"},{"location":"other-example-designs/AutoSDV/","title":"Overview:","text":"<p>The AutoSDV project, namely the Autoware Software-Defined Vehicle, features an affordable autonomous driving platform with practical vehicle equipment for educational and research institutes. This project allows you to build a self-driving platform at home and use it in real outdoor road environments. Driven by Autoware, the leading open-source software project for autonomous driving, it gives you great flexibility and extensivity on the vehicle software.</p> <p>AutoSDV provides a complete stack from hardware specifications to software implementation, offering an accessible entry point into real-world autonomous systems using industry-standard tools and practices.</p> Robin-W Solid-State LiDAR Kit Velodyne 32C LiDAR Kit Cube1 LiDAR + MOXA 5G Kit <p>Read the book at AutoSDV</p>"},{"location":"other-example-designs/F1Tenth/","title":"Overview:","text":"<p>This document elaborates the hardware and software configurations for using Autoware for autonomous driving. Hence, it will serve as a guideline to select hardware and software components to build autonomous vehicles. However, this document is NOT prepared as neither step-by-step instructions nor Q&amp;A books, which will be provided as a reference link if available. </p>"},{"location":"other-example-designs/F1Tenth/#design-overview","title":"Design Overview:","text":""},{"location":"other-example-designs/F1Tenth/#who-should-read","title":"Who should read:","text":"<p>One is interested in building your autonomous racing cars or low-cost platforms to learn Autoware, and looks for the place to start with. </p>"},{"location":"other-example-designs/F1Tenth/#references-and-resources","title":"References and Resources:","text":"<ul> <li>Complete F1Tenth documents: link</li> <li>Step-By-Step Instructions to deploy Autoware on F1Tenth: link</li> </ul>"},{"location":"other-example-designs/F1Tenth/#contributors-complete-list","title":"Contributors: complete list","text":""},{"location":"other-example-designs/F1Tenth/#f1tenth-core-developers","title":"F1TENTH Core Developers","text":"<ul> <li>Hongrui (Billy) Zheng</li> <li>Johannes Betz</li> </ul>"},{"location":"other-example-designs/F1Tenth/#contributors","title":"Contributors","text":"<ul> <li>Matthew O\u2019Kelly</li> <li>Kim Luong</li> <li>Haoru Xue</li> <li>Joshua Whitley</li> <li>F1TENTH Lehigh and Rosa Zheng</li> <li>F1TENTH UCSD and Jack Silberman</li> <li>Jim Benson</li> </ul>"},{"location":"other-example-designs/F1Tenth/#community-outreach","title":"Community Outreach","text":"<ul> <li>Rahul Mangharam</li> <li>F1TENTH Clemson and Venkat Krovi</li> <li>Jaroslav Klap\u00e1lek</li> </ul>"},{"location":"other-example-designs/F1Tenth/#targeted-use-cases","title":"Targeted Use Cases","text":"Use Cases: Education Racing PoC Open AD Kit Commercial Services/Production F1Tenth"},{"location":"other-example-designs/F1Tenth/#odd","title":"ODD","text":"ODD Cargo Bus RoboTaxi Low Speed (Utility) Vehicle Delivery Robot F1Tenth"},{"location":"other-example-designs/F1Tenth/#automation-level","title":"Automation Level:","text":"Automation Level 0 1 2 3 4 5 F1Tenth"},{"location":"other-example-designs/F1Tenth/#system-architecture","title":"System Architecture","text":"<p>F1Tenth can be used for racing and education purpose. The simplest use case is to avoid colliding into the obstacle on a racing track. Meanwhile, one can also develop the SLAM algorithm to build the map on the fly and finishes the loop in short time. </p> <p></p> <p>![[f1tenth_NX.webp]]</p>"},{"location":"other-example-designs/F1Tenth/#hardware-configuration","title":"Hardware Configuration","text":""},{"location":"other-example-designs/F1Tenth/#chassis","title":"Chassis:","text":"<ul> <li>Traxxas Slash 4x4 Premium: link to purchase</li> <li>VESC Speed Controllers: # VESC 6 MK III</li> </ul>"},{"location":"other-example-designs/F1Tenth/#sensors","title":"Sensors:","text":"<ul> <li>Lidar: choose one<ul> <li>Hokuyo UTM-30LX</li> <li>Hokuyo 10LX</li> </ul> </li> <li>Camera (optional):<ul> <li>ZED 2</li> <li>Intel Real Sense</li> </ul> </li> </ul>"},{"location":"other-example-designs/F1Tenth/#computing-platforms","title":"Computing Platforms:","text":"<ul> <li>NVIDIA Jetson Xavier NX</li> <li>USB Hub (4 ports)</li> <li>(DEPRECATED) NVIDIA Jetson TX2</li> </ul>"},{"location":"other-example-designs/F1Tenth/#software-configuration","title":"Software Configuration","text":"<ul> <li>Software on the car:<ul> <li>Operating System: Linux 20.04</li> <li>ROS: ROS2 galactic</li> <li>GPU Driver: nVidia: JetPack 5.1.1 (rev. 1)</li> <li>Autoware</li> <li>SLAM Toolbox to create and edit map: ros-galactic-slam-toolbox</li> </ul> </li> <li>Tools: <ul> <li>Simulator: f1tenth simulator</li> <li>VESC Tool for motor control: link</li> <li>Version Control tool: vcstool</li> </ul> </li> </ul>"},{"location":"other-example-designs/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/","title":"Overview:","text":"<p>This document elaborates the hardware and software configurations for using Autoware for autonomous driving. Hence, it will serve as a guideline to select hardware and software components to build autonomous vehicles. However, this document is NOT prepared as neither step-by-step instructions nor Q&amp;A books, which will be provided as a reference link if available. </p>"},{"location":"other-example-designs/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#design-overview","title":"Design Overview:","text":""},{"location":"other-example-designs/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#who-should-read","title":"Who should read:","text":"<p>One is interested in building your autonomous racing cars or low-cost platforms to learn Autoware, and looks for the place to start with. </p>"},{"location":"other-example-designs/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#references-and-resources","title":"References and Resources:","text":"<ul> <li>Complete F1Tenth documents: link</li> <li>Step-By-Step Instructions to deploy Autoware on F1Tenth: link</li> </ul>"},{"location":"other-example-designs/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#contributors-complete-list","title":"Contributors: complete list","text":""},{"location":"other-example-designs/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#f1tenth-core-developers","title":"F1TENTH Core Developers","text":"<ul> <li>Hongrui (Billy) Zheng</li> <li>Johannes Betz</li> </ul>"},{"location":"other-example-designs/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#contributors","title":"Contributors","text":"<ul> <li>Matthew O\u2019Kelly</li> <li>Kim Luong</li> <li>Haoru Xue</li> <li>Joshua Whitley</li> <li>F1TENTH Lehigh and Rosa Zheng</li> <li>F1TENTH UCSD and Jack Silberman</li> <li>Jim Benson</li> </ul>"},{"location":"other-example-designs/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#community-outreach","title":"Community Outreach","text":"<ul> <li>Rahul Mangharam</li> <li>F1TENTH Clemson and Venkat Krovi</li> <li>Jaroslav Klap\u00e1lek</li> </ul>"},{"location":"other-example-designs/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#targeted-use-cases","title":"Targeted Use Cases","text":"Use Cases: Education Racing PoC Open AD Kit Commercial Services/Production F1Tenth"},{"location":"other-example-designs/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#odd","title":"ODD","text":"ODD Cargo Bus RoboTaxi Low Speed (Utility) Vehicle Delivery Robot F1Tenth"},{"location":"other-example-designs/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#automation-level","title":"Automation Level:","text":"Automation Level 0 1 2 3 4 5 F1Tenth"},{"location":"other-example-designs/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#system-architecture","title":"System Architecture","text":"<p>F1Tenth can be used for racing and education purpose. The simplest use case is to avoid colliding into the obstacle on a racing track. Meanwhile, one can also develop the SLAM algorithm to build the map on the fly and finishes the loop in short time. </p> <p>![[f1tenth_NX.webp]]</p>"},{"location":"other-example-designs/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#hardware-configuration","title":"Hardware Configuration","text":""},{"location":"other-example-designs/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#chassis","title":"Chassis:","text":"<ul> <li>Traxxas Slash 4x4 Premium: link to purchase</li> <li>VESC Speed Controllers: # VESC 6 MK III</li> </ul>"},{"location":"other-example-designs/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#sensors","title":"Sensors:","text":"<ul> <li>Lidar: choose one<ul> <li>Hokuyo UTM-30LX</li> <li>Hokuyo 10LX</li> </ul> </li> <li>Camera (optional):<ul> <li>ZED 2</li> <li>Intel Real Sense</li> </ul> </li> </ul>"},{"location":"other-example-designs/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#computing-platforms","title":"Computing Platforms:","text":"<ul> <li>NVIDIA Jetson Xavier NX</li> <li>USB Hub (4 ports)</li> <li>(DEPRECATED) NVIDIA Jetson TX2</li> </ul> <p>![[together_NX_00.jpeg]]</p>"},{"location":"other-example-designs/F1Tenth/Reference%20Design%20for%20F1Tenth%20with%20Autoware/#software-configuration","title":"Software Configuration","text":"<ul> <li>Software on the car:<ul> <li>Operating System: Linux 20.04</li> <li>ROS: ROS2 galactic</li> <li>GPU Driver: nVidia: JetPack 5.1.1 (rev. 1)</li> <li>Autoware</li> <li>SLAM Toolbox to create and edit map: ros-galactic-slam-toolbox</li> </ul> </li> <li>Tools: <ul> <li>Simulator: f1tenth simulator</li> <li>VESC Tool for motor control: link</li> <li>Version Control tool: vcstool</li> </ul> </li> </ul>"},{"location":"other-example-designs/GoKart/","title":"Overview:","text":"<p>This document elaborates the hardware and software configurations for using Autoware for autonomous driving. Hence, it will serve as a guideline to select hardware and software components to build autonomous vehicles. However, this document is NOT prepared as neither step-by-step instructions nor Q&amp;A books, which will be provided as a reference link if available. </p>"},{"location":"other-example-designs/GoKart/#design-overview","title":"Design Overview:","text":""},{"location":"other-example-designs/GoKart/#who-should-read","title":"Who should read:","text":"<p>One is interested in building your small size autonomous vehicles and looks for the place to start with. </p>"},{"location":"other-example-designs/GoKart/#references-and-resources","title":"References and Resources:","text":"<ul> <li>Complete Go-Kart with Autoware documents: link</li> <li> <p>ROS2 Foxy setup and autonomous code: link</p> </li> <li> <p>ROS2 Humble setup and autonomous code: Link</p> </li> <li> <p>STM32 nucleo controller code: link</p> </li> </ul>"},{"location":"other-example-designs/GoKart/#contributors","title":"Contributors:","text":"<ul> <li>Autoware Center of Excellence (under Prof. Rahul Mangharam)</li> </ul>"},{"location":"other-example-designs/GoKart/#targeted-use-cases","title":"Targeted Use Cases","text":"Use Cases: Education Racing PoC Open AD Kit Commercial Services/Production F1Tenth"},{"location":"other-example-designs/GoKart/#odd","title":"ODD","text":"ODD Cargo Bus RoboTaxi Low Speed (Utility) Vehicle Delivery Robot F1Tenth"},{"location":"other-example-designs/GoKart/#automation-level","title":"Automation Level:","text":"Automation Level 0 1 2 3 4 5 F1Tenth"},{"location":"other-example-designs/GoKart/#system-architecture","title":"System Architecture","text":"<p>Autonomous Go-Kart is a one-third scale autonomous go-kart autonomous vehicle for development and prototyping purpose. It can be used for developing and testing software components in Autoware. </p> <p></p>"},{"location":"other-example-designs/GoKart/#hardware-configuration","title":"Hardware Configuration","text":""},{"location":"other-example-designs/GoKart/#chassis","title":"Chassis:","text":"<ul> <li>TopKart: link to purchase</li> </ul>"},{"location":"other-example-designs/GoKart/#sensors","title":"Sensors:","text":"<ul> <li>Lidar: Ouster LIDAR OS1 and Velodyne M1600</li> <li>Camera: OAK-D camera</li> <li>GNSS: RTK-GNSS</li> </ul>"},{"location":"other-example-designs/GoKart/#computing-platforms","title":"Computing Platforms:","text":"<ul> <li>X86 laptop with nVidia GPU</li> </ul>"},{"location":"other-example-designs/GoKart/#software-configuration","title":"Software Configuration","text":""},{"location":"other-example-designs/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/","title":"Overview:","text":"<p>This document elaborates the hardware and software configurations for using Autoware for autonomous driving. Hence, it will serve as a guideline to select hardware and software components to build autonomous vehicles. However, this document is NOT prepared as neither step-by-step instructions nor Q&amp;A books, which will be provided as a reference link if available. </p>"},{"location":"other-example-designs/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#design-overview","title":"Design Overview:","text":""},{"location":"other-example-designs/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#who-should-read","title":"Who should read:","text":"<p>One is interested in building your small size autonomous vehicles and looks for the place to start with. </p>"},{"location":"other-example-designs/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#references-and-resources","title":"References and Resources:","text":"<ul> <li>Complete Go-Kart with Autoware documents: link</li> <li> <p>ROS2 Foxy setup and autonomous code: link</p> </li> <li> <p>ROS2 Humble setup and autonomous code: Link</p> </li> <li> <p>STM32 nucleo controller code: link</p> </li> </ul>"},{"location":"other-example-designs/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#contributors","title":"Contributors:","text":"<ul> <li>Autoware Center of Excellence (under Prof. Rahul Mangharam)</li> </ul>"},{"location":"other-example-designs/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#targeted-use-cases","title":"Targeted Use Cases","text":"Use Cases: Education Racing PoC Open AD Kit Commercial Services/Production F1Tenth"},{"location":"other-example-designs/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#odd","title":"ODD","text":"ODD Cargo Bus RoboTaxi Low Speed (Utility) Vehicle Delivery Robot F1Tenth"},{"location":"other-example-designs/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#automation-level","title":"Automation Level:","text":"Automation Level 0 1 2 3 4 5 F1Tenth"},{"location":"other-example-designs/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#system-architecture","title":"System Architecture","text":"<p>Autonomous Go-Kart is a one-third scale autonomous go-kart autonomous vehicle for development and prototyping purpose. It can be used for developing and testing software components in Autoware. </p> <p></p>"},{"location":"other-example-designs/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#hardware-configuration","title":"Hardware Configuration","text":""},{"location":"other-example-designs/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#chassis","title":"Chassis:","text":"<ul> <li>TopKart: link to purchase</li> </ul>"},{"location":"other-example-designs/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#sensors","title":"Sensors:","text":"<ul> <li>Lidar: Ouster LIDAR OS1 and Velodyne M1600</li> <li>Camera: OAK-D camera</li> <li>GNSS: RTK-GNSS</li> </ul>"},{"location":"other-example-designs/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#computing-platforms","title":"Computing Platforms:","text":"<ul> <li>X86 laptop with nVidia GPU</li> </ul> <p>![[GoKart-ComputeSensing.png]] </p>"},{"location":"other-example-designs/GoKart/Reference%20Design%20for%20Go-Kart%20with%20Autoware/#software-configuration","title":"Software Configuration","text":""},{"location":"software-configuration/","title":"Software Configuration","text":"<p>This section provides comprehensive guidance for deploying Autoware on Low Speed Autonomy (LSA) vehicles. The documentation covers everything from initial system setup to platform-specific optimizations.</p>"},{"location":"software-configuration/#struture-of-the-guidelines","title":"Struture of the Guidelines","text":"<p>The guidelines consist of several parts. You may go directly to Getting Started if you want to skip the structure of the guidelines.</p>"},{"location":"software-configuration/#preparation-for-deployment","title":"Preparation for Deployment","text":"<p>This guideline uses a containerized Autoware for deployment, which is hardeware independent. Hence, this guideline can be used for both X86 and ARM-based ECUs. The guideline inlcudes the following topics: </p> <ul> <li>Target environment requirements (Ubuntu 22.04 on AMD64/ARM64)</li> <li>CUDA driver installation and verification</li> <li>Ansible-based provisioning setup</li> <li>Autoware installation via Debian packages</li> <li>Frequent troubleshooting and verification</li> </ul> <p>Read Preparation for Deployment</p>"},{"location":"software-configuration/#platform-specific-ecu-deployment","title":"Platform-Specific ECU Deployment","text":"<p>Given the containerized Autoware, this section provides the instructions to deploy the containers on different types of ECUs, including X86-based and ARM-based ECUs.</p>"},{"location":"software-configuration/#instructions-to-deploy-autoware-on-x86-based-ecus","title":"Instructions to deploy Autoware on x86-based ECUs","text":"<p>X86-based ECUs are well-received for research, development, and PoC. Several tested X86-based ECUs are listed on this page</p> <p>The instructions to deploy containerized Autoware include the following topics: </p> <ul> <li>x86 hardware requirements and compatibility</li> <li>CUDA setup for discrete GPUs (NVIDIA RTX/Tesla)</li> <li>Platform-specific optimizations</li> <li>Custom configurations for x86 architectures</li> </ul> <p>Read the instructions to deploy containerized Autotware to x86-based ECUs</p>"},{"location":"software-configuration/#instructions-to-deploy-autoware-on-arm-based-ecus","title":"Instructions to deploy Autoware on ARM-based ECUs","text":"<p>ARM-based ECUs are well received for low-energy consumption vehicles and several of them are tested and listed on this page.</p> <p>The instructions to deploy containerized Autoware include the following topics: </p> <ul> <li>ARM platform specifications (AGX Orin, Xavier, etc.)</li> <li>Integrated GPU optimization</li> <li>Containerized development workflow</li> <li>Platform-specific customizations</li> </ul> <p>Read the instructions to deploy containerized Autotware to x86-based ECUs</p>"},{"location":"software-configuration/#rmw-zenoh-as-the-middleware-for-ros-2","title":"RMW Zenoh as the middleware for ROS 2","text":"<p>The middleware in ROS 2 have several options. DDS is the default configuration and rmw_zenoh has been approved by ROS 2 to be compatiable as the middleware of ROS 2. The instructions show how to use rmw_zenoh as the middleware of ROS 2. rmw_zenoh has the following features:</p> <ul> <li>Alternative to DDS with improved performance</li> <li>Simplified configuration for LSA applications</li> <li>Enhanced support for cellular and cloud connectivity</li> <li>Optimized for resource-constrained environments</li> </ul> <p>Read the instructions to deploy rmw_zenoh</p>"},{"location":"software-configuration/#getting-started","title":"Getting Started","text":"<ol> <li>Review Requirements: Start with Deployment Setup to understand system requirements</li> <li>Choose Your Platform: Select either x86 or ARM ECUs based on your design requirements. </li> <li>Install Autoware: Follow the platform-specific installation guide: x86 or ARM.</li> <li>Configure Middleware: Optionally switch to rmw_zenoh to improve the performance of ROS messages.</li> <li>Customize the system: Apply platform-specific optimizations for your use case</li> </ol>"},{"location":"software-configuration/#support-and-resources","title":"Support and Resources","text":"<p>Below are the support and resources for the software configuration guideline.</p> <ul> <li>Autoware Documentation: https://autoware.org/</li> <li>ROS 2 Documentation: https://docs.ros.org/</li> <li>NVIDIA Jetson Resources: https://developer.nvidia.com/embedded-computing</li> </ul>"},{"location":"software-configuration/#contributing","title":"Contributing","text":"<p>When contributing to this documentation:</p> <ol> <li>Follow the existing structure and formatting</li> <li>Test all commands and procedures on target hardware</li> <li>Include troubleshooting sections for common issues</li> <li>Keep content up-to-date with latest Autoware releases</li> </ol>"},{"location":"software-configuration/ARM-based_ECU/","title":"Software Configuration for ARM-based ECUs","text":"<p>This guide provides comprehensive instructions for deploying Autoware on ARM-based ECUs, with specific focus on NVIDIA Jetson and AGX Orin platforms for Low Speed Autonomy vehicles.</p>"},{"location":"software-configuration/ARM-based_ECU/#system-preparation","title":"System Preparation","text":""},{"location":"software-configuration/ARM-based_ECU/#cuda-toolkit-installation","title":"CUDA Toolkit Installation","text":"<p>Using the following instructions to install the toolkit of nVidia CUDA. </p> <p>For Jetson platforms, CUDA comes pre-installed with JetPack. Verify your installation:</p> <pre><code># Check CUDA version\nnvcc --version\n\n# Verify Jetson platform\nsudo apt install -y python3-pip\npip3 install jetson-stats\nsudo jtop\n</code></pre> <p>If CUDA is not installed, flash your Jetson with the appropriate JetPack version: - AGX Orin: JetPack 5.1.2 or later - Xavier Series: JetPack 5.1 or later</p>"},{"location":"software-configuration/ARM-based_ECU/#jetpack-installation","title":"JetPack Installation","text":"<p>The NVIDIA JetPack SDK provides the foundation for ARM-based deployments:</p> <pre><code># For AGX Orin - Use JetPack 5.1.2 or later\n# Download NVIDIA SDK Manager from:\n# https://developer.nvidia.com/nvidia-sdk-manager\n\n# Or flash directly using command line:\nsudo apt install nvidia-jetpack\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#post-installation-setup","title":"Post-Installation Setup","text":"<pre><code># Verify JetPack installation\ncat /etc/nv_tegra_release\n\n# Check CUDA version\nnvcc --version\n\n# Install Jetson utilities\nsudo apt update\nsudo apt install -y python3-pip\npip3 install -U jetson-stats\nsudo systemctl restart jtop.service\n\n# Configure power mode for development\nsudo nvpmodel -m 0  # MAXN mode\nsudo jetson_clocks\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#platform-specific-configuration","title":"Platform-Specific Configuration","text":""},{"location":"software-configuration/ARM-based_ECU/#memory-management","title":"Memory Management","text":"<p>ARM platforms have unified memory architecture:</p> <pre><code># Configure memory growth for GPU applications\necho \"export TF_FORCE_GPU_ALLOW_GROWTH=true\" &gt;&gt; ~/.bashrc\necho \"export PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:128\" &gt;&gt; ~/.bashrc\n\n# Optimize memory bandwidth\nsudo echo 1 &gt; /sys/kernel/debug/bpmp/debug/clk/emc/mrq_rate_locked\nsudo echo 1 &gt; /sys/kernel/debug/bpmp/debug/clk/emc/state\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#thermal-management","title":"Thermal Management","text":"<pre><code># ansible/roles/jetson_thermal/tasks/main.yml\n---\n- name: Configure thermal zones\nlineinfile:\npath: /etc/nvfancontrol.conf\nregexp: '^FAN_PROFILE'\nline: 'FAN_PROFILE quiet'\n\n- name: Set temperature thresholds\ncopy:\ncontent: |\n&lt;FAN_PROFILE name=\"quiet\"&gt;\n&lt;FAN_CONTROL channel=\"0\"&gt;\n&lt;TEMP_POINT temp=\"50\" speed=\"0\"/&gt;\n&lt;TEMP_POINT temp=\"60\" speed=\"80\"/&gt;\n&lt;TEMP_POINT temp=\"70\" speed=\"120\"/&gt;\n&lt;TEMP_POINT temp=\"80\" speed=\"255\"/&gt;\n&lt;/FAN_CONTROL&gt;\n&lt;/FAN_PROFILE&gt;\ndest: /etc/nvfancontrol.d/autoware.conf\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#sensor-configuration","title":"Sensor Configuration","text":"<p>The following instrucitons configure the sensor for LSA vehicles.</p>"},{"location":"software-configuration/ARM-based_ECU/#csi-camera-configuration","title":"CSI Camera Configuration","text":"<pre><code># Configure CSI cameras\nsudo apt install -y nvidia-l4t-camera\n\n# Verify camera detection\nv4l2-ctl --list-devices\n\n# Test camera feed\ngst-launch-1.0 nvarguscamerasrc sensor-id=0 ! \\\n'video/x-raw(memory:NVMM),width=1920,height=1080,framerate=30/1' ! \\\nnvvidconv flip-method=0 ! \\\n'video/x-raw,format=BGRx' ! \\\nvideoconvert ! \\\n'video/x-raw,format=BGR' ! \\\nfakesink\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#hardware-accelerated-processing","title":"Hardware Accelerated Processing","text":"<pre><code># Example: Hardware-accelerated image processing\nimport cv2\n\ndef create_hw_accelerated_pipeline():\n    return (\n        \"nvarguscamerasrc sensor-id=0 ! \"\n        \"video/x-raw(memory:NVMM), width=1920, height=1080, framerate=30/1 ! \"\n        \"nvvidconv ! \"\n        \"video/x-raw, format=BGRx ! \"\n        \"videoconvert ! \"\n        \"video/x-raw, format=BGR ! \"\n        \"appsink\"\n    )\n\ncap = cv2.VideoCapture(create_hw_accelerated_pipeline(), cv2.CAP_GSTREAMER)\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#autoware-deployment","title":"Autoware Deployment","text":""},{"location":"software-configuration/ARM-based_ECU/#1-core-autoware-installation","title":"1. Core Autoware Installation","text":"<p>Complete the general setup from Deployment Setup, then proceed with ARM-specific configuration. </p>"},{"location":"software-configuration/ARM-based_ECU/#autoware-deployment-via-debian-packages","title":"Autoware Deployment via Debian Packages","text":"<p>(This part should be moved to ECU-dependent deployment.)</p>"},{"location":"software-configuration/ARM-based_ECU/#11-configure-autoware-apt-repository","title":"1.1 Configure Autoware APT Repository","text":"<pre><code># Download and install repository configuration\nwget https://github.com/autowarefoundation/autoware/releases/latest/download/autoware-apt-config.deb\nsudo dpkg -i autoware-apt-config.deb\n\n# Update package lists\nsudo apt update\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#12-deploy-autoware-core-packages","title":"1.2. Deploy Autoware Core Packages","text":"<pre><code># Install complete Autoware stack\nsudo apt install -y autoware-universe\n\n# Or install specific components\nsudo apt install -y \\\nautoware-common \\\nautoware-control \\\nautoware-localization \\\nautoware-perception \\\nautoware-planning\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#13-configure-environment","title":"1.3. Configure Environment","text":"<pre><code># Add Autoware setup to bashrc\necho \"source /opt/autoware/setup.bash\" &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Verify installation\nros2 pkg list | grep autoware\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#2-arm-specific-dependencies","title":"2. ARM-Specific Dependencies","text":"<p>The following instructions install ARM-specific tools before deploying Autoware.</p> <pre><code># Install ARM-optimized libraries\nsudo apt install -y \\\nlibopenblas-dev \\\nliblapack-dev \\\nlibeigen3-dev \\\nlibboost-all-dev\n\n# Install Jetson-specific tools\nsudo apt install -y \\\nnvidia-jetpack \\\nnvidia-l4t-tools \\\nnvidia-l4t-multimedia\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#3-configure-for-jetson","title":"3. Configure for Jetson","text":"<p>Create Jetson-optimized configuration:</p> <pre><code># ~/autoware_config/jetson_optimization.yaml\n/**:\nros__parameters:\n# DLA acceleration\nuse_dla: true\ndla_core: 0\n\n# GPU configuration\ngpu_id: 0\nallow_gpu_memory_growth: true\n\n# TensorRT optimization\nuse_tensorrt: true\ntensorrt_precision: \"INT8\"  # Jetson supports INT8\ntensorrt_workspace_size: 1073741824  # 1GB\n\n# CPU configuration\ncpu_cores: 8\nenable_cpu_affinity: true\n</code></pre> <p>You can also download the file and move it 'autoware_config'. </p>"},{"location":"software-configuration/ARM-based_ECU/#4-launch-configuration","title":"4. Launch Configuration","text":"<pre><code>&lt;!-- autoware_jetson.launch.xml --&gt;\n&lt;launch&gt;\n&lt;!-- Load Jetson-specific parameters --&gt;\n&lt;include file=\"$(find-pkg-share autoware_launch)/launch/autoware.launch.xml\"&gt;\n&lt;arg name=\"vehicle_model\" value=\"jetson_vehicle\"/&gt;\n&lt;arg name=\"sensor_model\" value=\"jetson_sensor_kit\"/&gt;\n&lt;arg name=\"use_tensorrt\" value=\"true\"/&gt;\n&lt;arg name=\"use_dla\" value=\"true\"/&gt;\n&lt;/include&gt;\n\n&lt;!-- Jetson-specific nodes --&gt;\n&lt;node pkg=\"jetson_stats_publisher\" exec=\"jtop_publisher\" name=\"jetson_monitor\"/&gt;\n&lt;/launch&gt;\n</code></pre> <p>Download the lauch file.</p> <p>system. </p>"},{"location":"software-configuration/ARM-based_ECU/#51-system-check-script","title":"5.1. System Check Script","text":"<p>The first step is to create a verification script:</p> <p><pre><code>cat &gt; verify-installation.sh &lt;&lt; 'EOF'\n#!/bin/bash\n\necho \"=== System Verification ===\"\necho \"OS Version: $(lsb_release -d | cut -f2)\"\necho \"Kernel: $(uname -r)\"\necho \"\"\n\necho \"=== CUDA Verification ===\"\nif command -v nvidia-smi &amp;&gt; /dev/null; then\n    nvidia-smi --query-gpu=name,driver_version,memory.total --format=csv,noheader\nelse\n    echo \"NVIDIA driver not found\"\nfi\n\nif command -v nvcc &amp;&gt; /dev/null; then\n    echo \"CUDA Version: $(nvcc --version | grep release | awk '{print $6}')\"\nelse\n    echo \"CUDA not found\"\nfi\necho \"\"\n\necho \"=== ROS 2 Verification ===\"\nif [ -f /opt/ros/humble/setup.bash ]; then\n    source /opt/ros/humble/setup.bash\n    echo \"ROS 2 Distro: $ROS_DISTRO\"\n    echo \"ROS 2 Version: $(ros2 --version 2&gt;&amp;1 | grep '^ros2')\"\nelse\n    echo \"ROS 2 not found\"\nfi\necho \"\"\n\necho \"=== Autoware Verification ===\"\nif [ -f /opt/autoware/setup.bash ]; then\n    source /opt/autoware/setup.bash\n    echo \"Autoware packages installed: $(ros2 pkg list | grep -c autoware)\"\nelse\n    echo \"Autoware not found\"\nfi\nEOF\n</code></pre> You can also download the file and move the shell script to the working directory.</p> <p>The last step executes the verification script to verify the deployment. </p> <pre><code>chmod +x verify-installation.sh\n./verify-installation.sh\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#52-test-basic-functionality","title":"5.2. Test Basic Functionality","text":"<pre><code># Test ROS 2 communication\nros2 doctor\n\n# Launch minimal Autoware nodes\nros2 launch autoware_launch logging_simulator.launch.xml\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#development-workflows","title":"Development Workflows","text":""},{"location":"software-configuration/ARM-based_ECU/#native-development","title":"Native Development","text":"<p>To directly develope on Jetson, you need to install the tools and set up the workspace.</p> <pre><code># Install development tools\nsudo apt install -y \\\nbuild-essential \\\ncmake \\\ngit \\\npython3-colcon-common-extensions\n\n# Setup workspace\nmkdir -p ~/autoware_ws/src\ncd ~/autoware_ws\ngit clone https://github.com/autowarefoundation/autoware.universe.git src/universe\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#containerized-development","title":"Containerized Development","text":"<p>For reproducible environments, see our comprehensive Containerized Development Guide which covers:</p> <ul> <li>Docker setup for Jetson</li> <li>Cross-compilation from x86</li> <li>Automated build pipelines</li> <li>Team collaboration workflows</li> </ul>"},{"location":"software-configuration/ARM-based_ECU/#performance-enhancement","title":"Performance Enhancement","text":"<p>To enhance the performance of the system, one may use the following configuration for power consumption, DLA acceleration, and memory bandwidth optimization.</p>"},{"location":"software-configuration/ARM-based_ECU/#power-consumption-mode-configuration","title":"Power Consumption Mode Configuration","text":"<pre><code># View available power modes\nsudo nvpmodel -q\n\n# Set power mode (example for AGX Orin)\nsudo nvpmodel -m 0  # MAXN (maximum performance)\nsudo nvpmodel -m 1  # 50W mode\nsudo nvpmodel -m 2  # 30W mode\nsudo nvpmodel -m 3  # 15W mode\n\n# Lock clocks to maximum\nsudo jetson_clocks --fan\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#deep-learning-accelerator-dla","title":"Deep Learning Accelerator (DLA)","text":"<pre><code>// Example: Configure DLA in TensorRT\n#include &lt;NvInfer.h&gt;\n\nvoid configureDLA(nvinfer1::IBuilder* builder) {\nauto config = builder-&gt;createBuilderConfig();\n\n// Enable DLA\nconfig-&gt;setFlag(BuilderFlag::kGPU_FALLBACK);\nconfig-&gt;setDefaultDeviceType(DeviceType::kDLA);\n\n// Use DLA core 0\nconfig-&gt;setDLACore(0);\n\n// Set INT8 precision for DLA\nconfig-&gt;setFlag(BuilderFlag::kINT8);\n}\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#memory-bandwidth-optimization","title":"Memory Bandwidth Optimization","text":"<pre><code># Monitor memory bandwidth\nsudo tegrastats\n\n# Optimize EMC frequency\nsudo echo 1 &gt; /sys/kernel/debug/bpmp/debug/clk/emc/mrq_rate_locked\nsudo cat /sys/kernel/debug/bpmp/debug/clk/emc/max_rate &gt; \\\n/sys/kernel/debug/bpmp/debug/clk/emc/rate\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#tools-for-performance-evaluation","title":"Tools for Performance Evaluation","text":""},{"location":"software-configuration/ARM-based_ECU/#monitoring-tools","title":"Monitoring Tools","text":"<pre><code># Real-time system monitoring\nsudo jtop\n\n# Detailed GPU metrics\nsudo tegrastats --interval 1000\n\n# Power consumption\nsudo cat /sys/bus/i2c/drivers/ina3221x/1-0040/iio_device/in_power0_input\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#expected-performance-metrics-for-arm-based-ecus","title":"Expected Performance Metrics for ARM-based ECUs","text":"Component AGX Orin Xavier Orin Nano LiDAR Detection 10 Hz 8 Hz 5 Hz Camera Detection 20 Hz 15 Hz 10 Hz Planning 10 Hz 10 Hz 8 Hz Control 50 Hz 50 Hz 50 Hz Power Usage 40W 25W 12W"},{"location":"software-configuration/ARM-based_ECU/#profiling-with-nsight","title":"Profiling with Nsight","text":"<pre><code># System-wide profiling\nsudo /opt/nvidia/nsight-systems/2023.3.1/bin/nsys profile \\\n-t cuda,nvtx,osrt,cudnn,cublas \\\n-o autoware_profile \\\nros2 launch autoware_launch autoware.launch.xml\n\n# Analyze results\nnsys-ui autoware_profile.nsys-rep\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/#troubleshooting","title":"Troubleshooting","text":""},{"location":"software-configuration/ARM-based_ECU/#common-issues","title":"Common Issues","text":"<ol> <li> <p>CUDA Out of Memory <pre><code># Monitor GPU memory\nwatch -n 1 nvidia-smi\n\n# Solution: Enable memory growth\nexport TF_FORCE_GPU_ALLOW_GROWTH=true\n</code></pre></p> </li> <li> <p>Thermal Throttling <pre><code># Check thermal status\nsudo cat /sys/devices/virtual/thermal/thermal_zone*/type\nsudo cat /sys/devices/virtual/thermal/thermal_zone*/temp\n\n# Solution: Improve cooling or reduce power mode\nsudo nvpmodel -m 2  # Lower power mode\n</code></pre></p> </li> <li> <p>DLA Failures <pre><code># Check DLA status\nsudo cat /sys/kernel/debug/nvdla/dla0/busy\n\n# Solution: Fallback to GPU\n# Set use_dla: false in configuration\n</code></pre></p> </li> </ol>"},{"location":"software-configuration/ARM-based_ECU/#platform-specific-customizations","title":"Platform-Specific Customizations","text":"<p>For advanced ARM platform customizations including:</p> <ul> <li>Ansible automation for fleet deployment</li> <li>Hardware-specific sensor integration</li> <li>Custom kernel module development</li> <li>Security hardening for production</li> </ul> <p>One can use this guide: ARM Customization Guide.</p>"},{"location":"software-configuration/ARM-based_ECU/#next-steps","title":"Next Steps","text":"<ul> <li>Explore Containerized Development for team collaboration</li> <li>Configure RMW Zenoh for optimized communication</li> <li>Review platform-specific customizations for production deployment</li> <li>Compare with x86-based ECU configurations</li> </ul>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/","title":"Containerized Development for ARM-based ECUs","text":"<p>This comprehensive guide covers the containerized development environment for ARM-based ECUs, particularly focused on NVIDIA AGX Orin platforms. The content is adapted from the AutoSDV project, which provides a sophisticated containerized approach to Autoware development.</p>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#overview","title":"Overview","text":"<p>The containerized development approach provides a complete, reproducible environment for developing and deploying Autoware on ARM-based ECUs. This methodology ensures consistency across development teams while optimizing for the specific capabilities of NVIDIA Jetson and AGX Orin hardware.</p>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#build-philosophy-compile-once-deploy-everywhere","title":"Build Philosophy: Compile Once, Deploy Everywhere","text":"<p>The containerized environment follows a four-stage pipeline that maximizes efficiency and reproducibility:</p>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#1-containerized-compilation","title":"1. Containerized Compilation","text":"<ul> <li>Process: Complete Autoware build (<code>colcon build</code>) within isolated Docker containers</li> <li>Benefits: </li> <li>Eliminates host system dependency conflicts</li> <li>Ensures reproducible builds across different development machines</li> <li>Provides consistent compilation environment</li> </ul>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#2-debian-package-creation","title":"2. Debian Package Creation","text":"<ul> <li>Process: Automated conversion of ROS 2 packages to <code>.deb</code> files via <code>package-deb.sh</code></li> <li>Benefits:</li> <li>Captures compiled artifacts in distributable format</li> <li>Enables version control and release management</li> <li>Supports standard Linux package management</li> </ul>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#3-ansible-based-provisioning","title":"3. Ansible-Based Provisioning","text":"<ul> <li>Process: Environment setup using pre-built packages instead of source compilation</li> <li>Benefits:</li> <li>Dramatically faster than full <code>colcon build</code></li> <li>Consistent configuration across deployments</li> <li>Infrastructure-as-code approach</li> </ul>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#4-unified-docker-environment","title":"4. Unified Docker Environment","text":"<ul> <li>Process: Complete pipeline orchestration through Docker</li> <li>Benefits:</li> <li>Platform-independent development</li> <li>Simplified developer onboarding</li> <li>Consistent toolchain across teams</li> </ul>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#development-environment-setup","title":"Development Environment Setup","text":""},{"location":"software-configuration/ARM-based_ECU/containerized-development/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure your development machine has:</p> <ul> <li>Docker Engine: Latest version with buildx support</li> <li>NVIDIA Container Toolkit: For GPU acceleration in containers</li> <li>QEMU: Cross-architecture build support (for x86_64 development hosts)</li> <li>Git: For repository management</li> <li>Sufficient Storage: At least 50GB free space for images and builds</li> </ul>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#quick-start-guide","title":"Quick Start Guide","text":""},{"location":"software-configuration/ARM-based_ECU/containerized-development/#1-repository-setup","title":"1. Repository Setup","text":"<pre><code># Clone the repository with submodules\ngit clone --recursive &lt;your-autoware-repository&gt;\ncd &lt;repository&gt;/docker\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#2-bootstrap-environment-first-time-only","title":"2. Bootstrap Environment (First Time Only)","text":"<pre><code># Configure QEMU for cross-architecture builds\nmake bootstrap\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#3-build-development-image","title":"3. Build Development Image","text":"<pre><code># Build ARM64 Docker image with commit tagging\nmake build\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#4-launch-development-container","title":"4. Launch Development Container","text":"<pre><code># Start interactive development session\nmake run\n</code></pre> <p>Note: The container automatically mounts your local source directory, enabling real-time code synchronization between host and container.</p>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#technical-architecture","title":"Technical Architecture","text":""},{"location":"software-configuration/ARM-based_ECU/containerized-development/#container-design-principles","title":"Container Design Principles","text":""},{"location":"software-configuration/ARM-based_ECU/containerized-development/#base-image-strategy","title":"Base Image Strategy","text":"<p>The containerized environment uses NVIDIA's official L4T (Linux for Tegra) images as the foundation:</p> <ul> <li>Base Image: <code>nvcr.io/nvidia/l4t-tensorrt:r8.6.2-devel</code></li> <li>Includes: CUDA, cuDNN, TensorRT pre-installed and optimized</li> <li>Target Hardware: NVIDIA Jetson AGX Orin, Xavier, and compatible platforms</li> </ul>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#build-reproducibility-features","title":"Build Reproducibility Features","text":"<ul> <li>Commit-based tagging: Each image tagged with Git commit hash</li> <li>Deterministic builds: Locked dependency versions</li> <li>Build cache optimization: Layered approach for faster rebuilds</li> <li>Multi-stage builds: Separate build and runtime environments</li> </ul>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#nvidia-specific-optimizations","title":"NVIDIA-Specific Optimizations","text":"<ul> <li>Custom APT sources: Access to NVIDIA L4T packages</li> <li>DLA compiler: Deep Learning Accelerator support</li> <li>Jetson-specific libraries: Hardware-optimized components</li> <li>Power mode configurations: Development vs. production profiles</li> </ul>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#container-vs-native-development","title":"Container vs. Native Development","text":"Aspect Containerized Native Setup Time &lt; 30 minutes Several hours Reproducibility Guaranteed Variable Dependency Management Automated Manual Hardware Access Full (with proper flags) Direct Performance ~98% of native 100% Team Scalability Excellent Challenging"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#environment-customization","title":"Environment Customization","text":""},{"location":"software-configuration/ARM-based_ECU/containerized-development/#using-ansible-for-configuration-management","title":"Using Ansible for Configuration Management","text":"<p>The containerized environment uses Ansible for flexible, maintainable configuration:</p>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#creating-custom-components","title":"Creating Custom Components","text":"<ol> <li> <p>Define Component Role <pre><code># Create role structure\nmkdir -p ansible/roles/my_component/{tasks,defaults,meta}\n</code></pre></p> </li> <li> <p>Implement Installation Logic <pre><code># ansible/roles/my_component/tasks/main.yml\n---\n- name: Install component dependencies\napt:\nname: \"{{ component_dependencies }}\"\nstate: present\n\n- name: Download and install component\nget_url:\nurl: \"{{ component_url }}\"\ndest: \"/tmp/{{ component_filename }}\"\n\n- name: Install component package\napt:\ndeb: \"/tmp/{{ component_filename }}\"\nwhen: component_type == \"deb\"\n</code></pre></p> </li> <li> <p>Configure Variables <pre><code># ansible/roles/my_component/defaults/main.yml\n---\ncomponent_name: \"my_custom_component\"\ncomponent_version: \"1.0.0\"\ncomponent_dependencies:\n- libboost-all-dev\n- python3-pip\n</code></pre></p> </li> </ol>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#hardware-specific-configurations","title":"Hardware-Specific Configurations","text":""},{"location":"software-configuration/ARM-based_ECU/containerized-development/#agx-orin-optimizations","title":"AGX Orin Optimizations","text":"<pre><code># ansible/roles/agx_orin_config/tasks/main.yml\n---\n- name: Configure Jetson power mode\ncommand: nvpmodel -m 0  # MAXN mode for development\n\n- name: Set GPU/DLA clock frequencies\ncommand: jetson_clocks --fan\n\n- name: Configure memory growth for TensorRT\nlineinfile:\npath: /etc/environment\nline: 'TF_FORCE_GPU_ALLOW_GROWTH=true'\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#package-management","title":"Package Management","text":""},{"location":"software-configuration/ARM-based_ECU/containerized-development/#building-debian-packages","title":"Building Debian Packages","text":"<p>The containerized environment includes sophisticated tooling for creating Debian packages:</p>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#individual-package-building","title":"Individual Package Building","text":"<pre><code># Convert single ROS 2 package to .deb\n./scripts/make-deb.sh &lt;package_name&gt;\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#batch-package-creation","title":"Batch Package Creation","text":"<pre><code># Build all packages in workspace\n./scripts/package-deb.sh --workspace /path/to/ws\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#repository-management","title":"Repository Management","text":""},{"location":"software-configuration/ARM-based_ECU/containerized-development/#local-apt-repository-structure","title":"Local APT Repository Structure","text":"<pre><code>local-apt-repo/\n\u251c\u2500\u2500 dists/\n\u2502   \u2514\u2500\u2500 focal/\n\u2502       \u2514\u2500\u2500 main/\n\u2502           \u2514\u2500\u2500 binary-arm64/\n\u2514\u2500\u2500 pool/\n    \u2514\u2500\u2500 main/\n        \u2514\u2500\u2500 a/autoware-*/\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#deployment-workflow","title":"Deployment Workflow","text":"<ol> <li>Build packages in container</li> <li>Export to local repository</li> <li>Configure target ECUs to use repository</li> <li>Deploy via standard <code>apt</code> commands</li> </ol>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#development-workflows","title":"Development Workflows","text":""},{"location":"software-configuration/ARM-based_ECU/containerized-development/#typical-development-cycle","title":"Typical Development Cycle","text":"<ol> <li>Code Development</li> <li>Edit code on host machine</li> <li>Changes reflected instantly in container</li> <li> <p>Use IDE of choice on host</p> </li> <li> <p>Build and Test <pre><code># Inside container\ncolcon build --packages-select &lt;your_package&gt;\ncolcon test --packages-select &lt;your_package&gt;\n</code></pre></p> </li> <li> <p>Package Creation <pre><code># Create deployable package\nmake package PKG=&lt;your_package&gt;\n</code></pre></p> </li> <li> <p>Deployment Testing <pre><code># Test on target hardware\nansible-playbook deploy.yml -l target_ecu\n</code></pre></p> </li> </ol>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#cicd-integration","title":"CI/CD Integration","text":"<p>The containerized approach seamlessly integrates with CI/CD pipelines:</p> <pre><code># Example GitLab CI configuration\nbuild-arm64:\nstage: build\nscript:\n- docker buildx build --platform linux/arm64 -t ${IMAGE_TAG} .\n- docker run ${IMAGE_TAG} make test\n- docker run ${IMAGE_TAG} make package\nartifacts:\npaths:\n- packages/*.deb\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#performance-optimization","title":"Performance Optimization","text":""},{"location":"software-configuration/ARM-based_ECU/containerized-development/#container-runtime-optimizations","title":"Container Runtime Optimizations","text":"<ol> <li> <p>GPU Access <pre><code>docker run --gpus all --runtime nvidia ...\n</code></pre></p> </li> <li> <p>Memory Management <pre><code># Limit container memory to prevent OOM\ndocker run -m 16g --memory-swap 16g ...\n</code></pre></p> </li> <li> <p>CPU Affinity <pre><code># Pin to specific cores\ndocker run --cpuset-cpus=\"0-3\" ...\n</code></pre></p> </li> </ol>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#build-performance","title":"Build Performance","text":"<ul> <li>Parallel Compilation: <code>colcon build --parallel-workers $(nproc)</code></li> <li>ccache Integration: Persistent cache volumes</li> <li>Incremental Builds: Proper workspace overlays</li> </ul>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#troubleshooting","title":"Troubleshooting","text":""},{"location":"software-configuration/ARM-based_ECU/containerized-development/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<ol> <li> <p>QEMU Errors on x86_64 Hosts <pre><code># Re-run bootstrap\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n</code></pre></p> </li> <li> <p>GPU Not Accessible <pre><code># Verify NVIDIA runtime\ndocker run --rm --gpus all nvidia/cuda:11.4.3-base-ubuntu20.04 nvidia-smi\n</code></pre></p> </li> <li> <p>Build Cache Issues <pre><code># Clean and rebuild\ndocker builder prune\ndocker build --no-cache -t ${IMAGE_TAG} .\n</code></pre></p> </li> </ol>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#best-practices","title":"Best Practices","text":""},{"location":"software-configuration/ARM-based_ECU/containerized-development/#development-guidelines","title":"Development Guidelines","text":"<ol> <li>Layer Optimization</li> <li>Group related operations</li> <li>Minimize layer size</li> <li> <p>Use multi-stage builds</p> </li> <li> <p>Security Considerations</p> </li> <li>Don't store credentials in images</li> <li>Use secrets management</li> <li> <p>Regular base image updates</p> </li> <li> <p>Resource Management</p> </li> <li>Set appropriate resource limits</li> <li>Monitor container metrics</li> <li>Clean up unused images regularly</li> </ol>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#team-collaboration","title":"Team Collaboration","text":"<ol> <li>Image Versioning</li> <li>Semantic versioning for releases</li> <li>Commit-based tags for development</li> <li> <p>Maintain changelog</p> </li> <li> <p>Documentation</p> </li> <li>Document custom configurations</li> <li>Maintain runbooks</li> <li>Update README files</li> </ol>"},{"location":"software-configuration/ARM-based_ECU/containerized-development/#summary","title":"Summary","text":"<p>The containerized development approach for ARM-based ECUs provides a robust, scalable solution for Autoware development on NVIDIA Jetson platforms. By combining Docker containerization, Ansible automation, and Debian packaging, teams can achieve:</p> <ul> <li>Rapid Development: From code to deployment in minutes</li> <li>Consistency: Identical environments across all developers</li> <li>Hardware Optimization: Full utilization of NVIDIA accelerators</li> <li>Production Ready: Seamless transition from development to deployment</li> </ul> <p>This methodology has been proven in production environments and continues to evolve with the Autoware ecosystem.</p>"},{"location":"software-configuration/ARM-based_ECU/customization/","title":"ARM-based ECU Customization Guide","text":"<p>This guide provides detailed instructions for customizing Autoware deployments on ARM-based ECUs, with specific focus on NVIDIA AGX Orin and Jetson platforms.</p>"},{"location":"software-configuration/ARM-based_ECU/customization/#platform-specific-optimizations","title":"Platform-Specific Optimizations","text":""},{"location":"software-configuration/ARM-based_ECU/customization/#nvidia-agx-orin-configuration","title":"NVIDIA AGX Orin Configuration","text":""},{"location":"software-configuration/ARM-based_ECU/customization/#power-management","title":"Power Management","text":"<p>Configure power modes based on deployment requirements:</p> <pre><code># Development mode - Maximum performance\nsudo nvpmodel -m 0  # MAXN mode\nsudo jetson_clocks\n\n# Production mode - Balanced performance/efficiency\nsudo nvpmodel -m 1  # 30W mode\nsudo jetson_clocks --restore\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/customization/#memory-configuration","title":"Memory Configuration","text":"<p>Optimize memory allocation for Autoware workloads:</p> <pre><code># Increase GPU memory allocation\necho \"gpu_mem_size=8G\" | sudo tee /etc/modprobe.d/tegra.conf\n\n# Configure swap for memory-intensive operations\nsudo fallocate -l 16G /swapfile\nsudo chmod 600 /swapfile\nsudo mkswap /swapfile\nsudo swapon /swapfile\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/customization/#hardware-acceleration-setup","title":"Hardware Acceleration Setup","text":""},{"location":"software-configuration/ARM-based_ECU/customization/#enable-dla-deep-learning-accelerator","title":"Enable DLA (Deep Learning Accelerator)","text":"<pre><code># ansible/roles/agx_orin_dla/tasks/main.yml\n---\n- name: Enable DLA cores\nlineinfile:\npath: /etc/environment\nline: \"{{ item }}\"\nloop:\n- 'CUDA_VISIBLE_DEVICES=0'\n- 'DLA_VISIBLE_DEVICES=0,1'\n- 'TF_ENABLE_TENSORRT_DLA=1'\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/customization/#configure-tensorrt","title":"Configure TensorRT","text":"<pre><code>- name: Optimize TensorRT for Autoware\ntemplate:\nsrc: tensorrt_config.j2\ndest: /etc/autoware/tensorrt.conf\nowner: root\ngroup: root\nmode: '0644'\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/customization/#sensor-integration","title":"Sensor Integration","text":""},{"location":"software-configuration/ARM-based_ECU/customization/#lidar-configuration","title":"LiDAR Configuration","text":""},{"location":"software-configuration/ARM-based_ECU/customization/#velodyne-lidar-on-arm","title":"Velodyne LiDAR on ARM","text":"<pre><code># ansible/roles/velodyne_arm/tasks/main.yml\n---\n- name: Install Velodyne driver dependencies\napt:\nname:\n- ros-humble-velodyne\n- ros-humble-velodyne-pointcloud\nstate: present\n\n- name: Configure network interface for LiDAR\nnmcli:\nconn_name: lidar0\nifname: eth1\ntype: ethernet\nip4: 192.168.1.100/24\nstate: present\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/customization/#ouster-lidar-with-dma-optimization","title":"Ouster LiDAR with DMA Optimization","text":"<pre><code>- name: Configure Ouster with DMA transfer\ntemplate:\nsrc: ouster_dma_config.j2\ndest: /etc/ros2/ouster_config.yaml\nvars:\ndma_enabled: true\nbuffer_size_mb: 256\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/customization/#camera-integration","title":"Camera Integration","text":""},{"location":"software-configuration/ARM-based_ECU/customization/#gmsl-cameras-agx-orin","title":"GMSL Cameras (AGX Orin)","text":"<pre><code># Enable GMSL cameras\nsudo modprobe nvgmsl\necho \"nvgmsl\" | sudo tee -a /etc/modules-load.d/nvgmsl.conf\n\n# Configure camera parameters\nv4l2-ctl -d /dev/video0 --set-fmt-video=width=1920,height=1080,pixelformat=YUYV\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/customization/#network-configuration","title":"Network Configuration","text":""},{"location":"software-configuration/ARM-based_ECU/customization/#real-time-communication-setup","title":"Real-time Communication Setup","text":""},{"location":"software-configuration/ARM-based_ECU/customization/#configure-tsn-time-sensitive-networking","title":"Configure TSN (Time-Sensitive Networking)","text":"<pre><code># ansible/roles/tsn_config/tasks/main.yml\n---\n- name: Install TSN utilities\napt:\nname:\n- linuxptp\n- ethtool\nstate: present\n\n- name: Configure PTP for time synchronization\ntemplate:\nsrc: ptp4l.conf.j2\ndest: /etc/linuxptp/ptp4l.conf\n\n- name: Enable hardware timestamping\ncommand: ethtool -T {{ tsn_interface }}\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/customization/#can-bus-integration","title":"CAN Bus Integration","text":""},{"location":"software-configuration/ARM-based_ECU/customization/#socketcan-configuration","title":"SocketCAN Configuration","text":"<pre><code># Enable CAN interfaces\nsudo ip link set can0 type can bitrate 500000\nsudo ip link set can0 up\n\n# Configure CAN filters for efficiency\nsudo ip link set can0 type can bitrate 500000 \\\nsample-point 0.875 restart-ms 100\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/customization/#storage-optimization","title":"Storage Optimization","text":""},{"location":"software-configuration/ARM-based_ECU/customization/#nvme-configuration-for-high-speed-logging","title":"NVMe Configuration for High-Speed Logging","text":"<pre><code># ansible/roles/storage_optimization/tasks/main.yml\n---\n- name: Configure NVMe for optimal performance\nlineinfile:\npath: /etc/fstab\nline: '/dev/nvme0n1p1 /var/log/autoware ext4 noatime,nodiratime,nobarrier 0 2'\n\n- name: Set up log rotation for Autoware\ntemplate:\nsrc: autoware_logrotate.j2\ndest: /etc/logrotate.d/autoware\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/customization/#sd-card-optimization-jetson-nanoxavier-nx","title":"SD Card Optimization (Jetson Nano/Xavier NX)","text":"<pre><code># Reduce SD card wear\necho \"vm.swappiness=10\" | sudo tee -a /etc/sysctl.conf\necho \"vm.vfs_cache_pressure=50\" | sudo tee -a /etc/sysctl.conf\n\n# Move temporary files to RAM\necho \"tmpfs /tmp tmpfs defaults,noatime,mode=1777 0 0\" | sudo tee -a /etc/fstab\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/customization/#performance-tuning","title":"Performance Tuning","text":""},{"location":"software-configuration/ARM-based_ECU/customization/#cpu-governor-settings","title":"CPU Governor Settings","text":"<pre><code># Set performance governor for all cores\nfor cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do\necho performance | sudo tee $cpu\ndone\n\n# Make persistent\necho 'GOVERNOR=\"performance\"' | sudo tee /etc/default/cpufrequtils\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/customization/#gpu-optimization","title":"GPU Optimization","text":"<pre><code># ansible/roles/gpu_optimization/tasks/main.yml\n---\n- name: Set GPU clock to maximum\ncommand: nvidia-smi -pm 1\n\n- name: Configure GPU memory growth\nlineinfile:\npath: /etc/environment\nregexp: '^TF_FORCE_GPU_ALLOW_GROWTH='\nline: 'TF_FORCE_GPU_ALLOW_GROWTH=true'\n\n- name: Set CUDA device order\nlineinfile:\npath: /etc/environment\nregexp: '^CUDA_DEVICE_ORDER='\nline: 'CUDA_DEVICE_ORDER=PCI_BUS_ID'\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/customization/#custom-kernel-modules","title":"Custom Kernel Modules","text":""},{"location":"software-configuration/ARM-based_ECU/customization/#building-custom-drivers","title":"Building Custom Drivers","text":"<pre><code># Makefile for custom ARM kernel module\nobj-m += autoware_custom_driver.o\n\nall:\nmake -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules\n\nclean:\nmake -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/customization/#loading-modules-at-boot","title":"Loading Modules at Boot","text":"<pre><code># Add to /etc/modules-load.d/autoware.conf\nautoware_custom_driver\ncan_isotp\npeak_usb\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/customization/#security-hardening","title":"Security Hardening","text":""},{"location":"software-configuration/ARM-based_ECU/customization/#secure-boot-configuration","title":"Secure Boot Configuration","text":"<pre><code># ansible/roles/secure_boot/tasks/main.yml\n---\n- name: Enable secure boot\ncommand: mokutil --enable-validation\n\n- name: Sign custom kernel modules\ncommand: |\n/usr/src/linux-headers-$(uname -r)/scripts/sign-file \\\nsha256 /var/lib/shim-signed/mok/MOK.priv \\\n/var/lib/shim-signed/mok/MOK.der \\\n{{ module_path }}\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/customization/#apparmor-profiles","title":"AppArmor Profiles","text":"<pre><code># Create AppArmor profile for Autoware\nsudo aa-genprof /opt/autoware/bin/autoware_launch\n\n# Example profile snippet\n/opt/autoware/bin/autoware_launch {\n#include &lt;abstractions/base&gt;\n\ncapability sys_nice,\n  capability sys_resource,\n\n  /opt/autoware/** r,\n  /var/log/autoware/** rw,\n  /dev/nvidia* rw,\n}\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/customization/#monitoring-and-diagnostics","title":"Monitoring and Diagnostics","text":""},{"location":"software-configuration/ARM-based_ECU/customization/#system-health-monitoring","title":"System Health Monitoring","text":"<pre><code># ansible/roles/monitoring/tasks/main.yml\n---\n- name: Install monitoring tools\napt:\nname:\n- nvidia-jetson-stats\n- htop\n- iotop\n- nethogs\nstate: present\n\n- name: Configure Prometheus node exporter\ntemplate:\nsrc: node_exporter.service.j2\ndest: /etc/systemd/system/node_exporter.service\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/customization/#performance-profiling","title":"Performance Profiling","text":"<pre><code># Profile Autoware with Nsight Systems\nnsys profile -t cuda,nvtx,osrt,cudnn,cublas \\\n-o autoware_profile \\\nros2 launch autoware_launch autoware.launch.xml\n\n# Analyze with Nsight Compute\nncu --target-processes all \\\n--metrics gpu__time_duration.sum \\\nros2 run perception_node perception_node\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/customization/#deployment-automation","title":"Deployment Automation","text":""},{"location":"software-configuration/ARM-based_ECU/customization/#ansible-playbook-for-complete-setup","title":"Ansible Playbook for Complete Setup","text":"<p>(There are errors on rendering the content in this part.)</p> <pre><code># deploy_arm_ecu.yml\n---\n- hosts: arm_ecus\nbecome: yes\nvars:\necu_type: \"agx_orin\"\nautoware_version: \"2024.12\"\n\nroles:\n- role: base_system\n- role: nvidia_drivers\n- role: autoware_core\n- role: sensor_drivers\n- role: network_config\n- role: performance_tuning\n- role: monitoring\n\npost_tasks:\n- name: Verify deployment\ncommand: ros2 doctor\nregister: ros2_doctor_output\n\n- name: Display status\ndebug:\nmsg: \"Deployment complete. ROS 2 status:\"\n</code></pre>"},{"location":"software-configuration/ARM-based_ECU/customization/#summary","title":"Summary","text":"<p>Customizing ARM-based ECUs for Autoware requires careful attention to:</p> <ol> <li>Hardware-specific optimizations - Leveraging NVIDIA accelerators</li> <li>Sensor integration - Proper driver configuration and DMA setup</li> <li>Network configuration - Real-time communication requirements</li> <li>Performance tuning - CPU, GPU, and memory optimization</li> <li>Security hardening - Production-ready deployments</li> </ol> <p>These customizations ensure optimal performance and reliability for autonomous vehicle applications on ARM platforms.</p>"},{"location":"software-configuration/deployment-setup/","title":"Deployment Setup Guide","text":"<p>This guide provides the foundational setup required for deploying Autoware on both AMD64 and ARM64 platforms running Ubuntu 22.04. Follow these steps before proceeding to platform-specific ECU configurations.</p>"},{"location":"software-configuration/deployment-setup/#requirements-on-target-environment","title":"Requirements on Target Environment","text":"<p>Please assure the requirements for hardware and operating systems are met before continuing to deploy the Autoware.</p>"},{"location":"software-configuration/deployment-setup/#hardware-requirements","title":"Hardware Requirements","text":""},{"location":"software-configuration/deployment-setup/#minimum-hardware-specifications","title":"Minimum Hardware Specifications","text":"<ul> <li>CPU: 8 cores (AMD64 or ARM64)</li> <li>RAM: 16 GB</li> <li>Storage: 128 GB SSD/NVMe</li> <li>GPU: NVIDIA GPU with Compute Capability 7.0+ (required for perception)</li> </ul>"},{"location":"software-configuration/deployment-setup/#recommended-specifications","title":"Recommended Specifications","text":"<ul> <li>CPU: 16+ cores</li> <li>RAM: 32 GB or more</li> <li>Storage: 256 GB NVMe SSD</li> <li>GPU: NVIDIA RTX 3080+ (x86) or AGX Orin (ARM)</li> </ul>"},{"location":"software-configuration/deployment-setup/#network-requirements","title":"Network Requirements","text":"<ul> <li>Gigabit Ethernet for sensor connectivity</li> <li>Internet access for initial setup and package installation</li> <li>Optional: Secondary network interface for vehicle communication</li> </ul>"},{"location":"software-configuration/deployment-setup/#operating-system","title":"Operating System","text":"<ul> <li>Ubuntu 22.04 LTS (Jammy Jellyfish)</li> <li>Kernel version 5.15 or later</li> <li>Real-time kernel is recommended for production deployments</li> </ul>"},{"location":"software-configuration/deployment-setup/#preparation-for-system-environments-and-tools","title":"Preparation for system environments and tools","text":"<p>Given meeting the requirements for hardware and operating systems, the following instructions prepare the system environments and tools for the deployment. </p>"},{"location":"software-configuration/deployment-setup/#1-update-base-system","title":"1. Update Base System","text":"<p>Using the following instructions to update the base system of the package installation. The comments started with the symbol '#' and should be ignored while executing the commands. One may copy and paste the command to the terminal.</p> <pre><code># Update package lists and upgrade system\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install essential tools\nsudo apt install -y \\\nbuild-essential \\\ncmake \\\ngit \\\nwget \\\ncurl \\\ngnupg \\\nlsb-release \\\nsoftware-properties-common \\\npython3-pip \\\npython3-venv\n</code></pre>"},{"location":"software-configuration/deployment-setup/#2-configure-system-limits-for-better-performance","title":"2. Configure System Limits for better performance","text":"<p>Using the following instructions to optimize system settings for real-time performance: </p> <pre><code># Add to /etc/security/limits.conf\necho \"@autoware - rtprio 98\" | sudo tee -a /etc/security/limits.conf\necho \"@autoware - memlock unlimited\" | sudo tee -a /etc/security/limits.conf\n\n# Configure kernel parameters\necho \"vm.swappiness=10\" | sudo tee -a /etc/sysctl.conf\necho \"net.core.rmem_max=134217728\" | sudo tee -a /etc/sysctl.conf\necho \"net.core.wmem_max=134217728\" | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n</code></pre>"},{"location":"software-configuration/deployment-setup/#cuda-toolkit-installation","title":"CUDA Toolkit Installation","text":"<p>(This part should be moved to hardware-dependent instructions.)</p> <p>Using the following instructions to install the toolkit of nVidia CUDA. </p>"},{"location":"software-configuration/deployment-setup/#for-amd64-platforms","title":"For AMD64 Platforms","text":"<pre><code># Add NVIDIA network package repositories\nwget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb\nsudo dpkg -i cuda-keyring_1.1-1_all.deb\nsudo apt update\n\n# Install CUDA toolkit\nsudo apt install -y cuda-12-3\n\n# Add CUDA to PATH\necho 'export PATH=/usr/local/cuda-12.3/bin:$PATH' &gt;&gt; ~/.bashrc\necho 'export LD_LIBRARY_PATH=/usr/local/cuda-12.3/lib64:$LD_LIBRARY_PATH' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Verify installation\nnvidia-smi\nnvcc --version\n</code></pre>"},{"location":"software-configuration/deployment-setup/#for-arm64-platforms-nvidia-jetson","title":"For ARM64 Platforms (NVIDIA Jetson)","text":"<p>For Jetson platforms, CUDA comes pre-installed with JetPack. Verify your installation:</p> <pre><code># Check CUDA version\nnvcc --version\n\n# Verify Jetson platform\nsudo apt install -y python3-pip\npip3 install jetson-stats\nsudo jtop\n</code></pre> <p>If CUDA is not installed, flash your Jetson with the appropriate JetPack version: - AGX Orin: JetPack 5.1.2 or later - Xavier Series: JetPack 5.1 or later</p>"},{"location":"software-configuration/deployment-setup/#ansible-setup-for-automated-provisioning","title":"Ansible Setup for Automated Provisioning","text":"<p>Ansible is an open source automation tool, which can help to speed up the deployment process. </p>"},{"location":"software-configuration/deployment-setup/#1-install-ansible","title":"1. Install Ansible","text":"<pre><code># Install Ansible via pip for latest version\npython3 -m pip install --user ansible ansible-lint\n\n# Verify installation\nansible --version\n</code></pre>"},{"location":"software-configuration/deployment-setup/#2-create-ansible-configuration","title":"2. Create Ansible Configuration","text":"<p>Create a project directory for Autoware deployment:</p> <pre><code>mkdir -p ~/autoware-deployment/ansible\ncd ~/autoware-deployment/ansible\n\n# Create ansible.cfg\ncat &gt; ansible.cfg &lt;&lt; EOF\n[defaults]\ninventory = ./inventory/hosts.yml\nhost_key_checking = False\nretry_files_enabled = False\nstdout_callback = yaml\ncallback_whitelist = timer,profile_tasks\n\n[privilege_escalation]\nbecome = True\nbecome_method = sudo\nbecome_ask_pass = False\nEOF\n</code></pre> <p>You can also download the file and move the configuration file to the working directory.</p>"},{"location":"software-configuration/deployment-setup/#3-create-inventory-file","title":"3. Create Inventory File","text":"<pre><code>mkdir -p inventory\ncat &gt; inventory/hosts.yml &lt;&lt; EOF\nall:\n  hosts:\n    localhost:\n      ansible_connection: local\n      ansible_python_interpreter: /usr/bin/python3\n  vars:\n    autoware_version: \"2024.12\"\n    ros_distro: \"humble\"\n    cuda_version: \"12.3\"\nEOF\n</code></pre> <p>You can also download the file and move the file to the working directory - \"ansible/inventory\".</p>"},{"location":"software-configuration/deployment-setup/#4-create-base-provisioning-playbook","title":"4. Create Base Provisioning Playbook","text":"<pre><code>cat &gt; setup-autoware.yml &lt;&lt; EOF\n---\n- name: Setup Autoware Environment\n  hosts: localhost\n  become: yes\n\n  tasks:\n    - name: Add ROS 2 GPG key\n      apt_key:\n        url: https://raw.githubusercontent.com/ros/rosdistro/master/ros.key\n        state: present\n\n    - name: Add ROS 2 repository\n      apt_repository:\n        repo: \"deb http://packages.ros.org/ros2/ubuntu {{ ansible_distribution_release }} main\"\n        state: present\n\n    - name: Update apt cache\n      apt:\n        update_cache: yes\n\n    - name: Install ROS 2 Humble desktop\n      apt:\n        name: ros-humble-desktop\n        state: present\n\n    - name: Install ROS 2 development tools\n      apt:\n        name:\n          - python3-colcon-common-extensions\n          - python3-rosdep\n          - python3-vcstool\n        state: present\n\n    - name: Initialize rosdep\n      command: rosdep init\n      args:\n        creates: /etc/ros/rosdep/sources.list.d/20-default.list\n\n    - name: Update rosdep\n      become: no\n      command: rosdep update\nEOF\n</code></pre> <p>You can also download the file and move the set up environment file to the working directory.</p>"},{"location":"software-configuration/deployment-setup/#autoware-deployment-via-debian-packages","title":"Autoware Deployment via Debian Packages","text":"<p>(This part should be moved to ECU-dependent deployment.)</p>"},{"location":"software-configuration/deployment-setup/#1-configure-autoware-apt-repository","title":"1. Configure Autoware APT Repository","text":"<pre><code># Download and install repository configuration\nwget https://github.com/autowarefoundation/autoware/releases/latest/download/autoware-apt-config.deb\nsudo dpkg -i autoware-apt-config.deb\n\n# Update package lists\nsudo apt update\n</code></pre>"},{"location":"software-configuration/deployment-setup/#2-deploy-autoware-core-packages","title":"2. Deploy Autoware Core Packages","text":"<pre><code># Install complete Autoware stack\nsudo apt install -y autoware-universe\n\n# Or install specific components\nsudo apt install -y \\\nautoware-common \\\nautoware-control \\\nautoware-localization \\\nautoware-perception \\\nautoware-planning\n</code></pre>"},{"location":"software-configuration/deployment-setup/#3-configure-environment","title":"3. Configure Environment","text":"<pre><code># Add Autoware setup to bashrc\necho \"source /opt/autoware/setup.bash\" &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Verify installation\nros2 pkg list | grep autoware\n</code></pre>"},{"location":"software-configuration/deployment-setup/#post-installation-verification","title":"Post-Installation Verification","text":"<p>This section uses a shell script to verify if the Autoware is successfully deployed to the system. </p>"},{"location":"software-configuration/deployment-setup/#1-system-check-script","title":"1. System Check Script","text":"<p>The first step is to create a verification script:</p> <p><pre><code>cat &gt; verify-installation.sh &lt;&lt; 'EOF'\n#!/bin/bash\n\necho \"=== System Verification ===\"\necho \"OS Version: $(lsb_release -d | cut -f2)\"\necho \"Kernel: $(uname -r)\"\necho \"\"\n\necho \"=== CUDA Verification ===\"\nif command -v nvidia-smi &amp;&gt; /dev/null; then\n    nvidia-smi --query-gpu=name,driver_version,memory.total --format=csv,noheader\nelse\n    echo \"NVIDIA driver not found\"\nfi\n\nif command -v nvcc &amp;&gt; /dev/null; then\n    echo \"CUDA Version: $(nvcc --version | grep release | awk '{print $6}')\"\nelse\n    echo \"CUDA not found\"\nfi\necho \"\"\n\necho \"=== ROS 2 Verification ===\"\nif [ -f /opt/ros/humble/setup.bash ]; then\n    source /opt/ros/humble/setup.bash\n    echo \"ROS 2 Distro: $ROS_DISTRO\"\n    echo \"ROS 2 Version: $(ros2 --version 2&gt;&amp;1 | grep '^ros2')\"\nelse\n    echo \"ROS 2 not found\"\nfi\necho \"\"\n\necho \"=== Autoware Verification ===\"\nif [ -f /opt/autoware/setup.bash ]; then\n    source /opt/autoware/setup.bash\n    echo \"Autoware packages installed: $(ros2 pkg list | grep -c autoware)\"\nelse\n    echo \"Autoware not found\"\nfi\nEOF\n</code></pre> You can also download the file and move the shell script to the working directory.</p> <p>The last step executes the verification script to verify the deployment. </p> <pre><code>chmod +x verify-installation.sh\n./verify-installation.sh\n</code></pre>"},{"location":"software-configuration/deployment-setup/#2-test-basic-functionality","title":"2. Test Basic Functionality","text":"<pre><code># Test ROS 2 communication\nros2 doctor\n\n# Launch minimal Autoware nodes\nros2 launch autoware_launch logging_simulator.launch.xml\n</code></pre>"},{"location":"software-configuration/deployment-setup/#common-troubleshooting","title":"Common Troubleshooting","text":""},{"location":"software-configuration/deployment-setup/#cuda-issues","title":"CUDA Issues","text":"<p>Problem: <code>nvidia-smi</code> command not found <pre><code># Solution: Reinstall NVIDIA drivers\nsudo apt install --reinstall nvidia-driver-535\nsudo reboot\n</code></pre></p> <p>Problem: CUDA version mismatch <pre><code># Solution: Check compatibility\nnvidia-smi  # Check driver version\n# Ensure CUDA toolkit matches driver version\n</code></pre></p>"},{"location":"software-configuration/deployment-setup/#ros-2-issues","title":"ROS 2 Issues","text":"<p>Problem: Package not found errors <pre><code># Solution: Update rosdep and install dependencies\ncd ~/autoware\nrosdep update\nrosdep install -y --from-paths src --ignore-src --rosdistro humble\n</code></pre></p> <p>Problem: Transform (TF) errors <pre><code># Solution: Check system time synchronization\ntimedatectl status\nsudo apt install ntp\nsudo systemctl enable ntp\n</code></pre></p>"},{"location":"software-configuration/deployment-setup/#network-issues","title":"Network Issues","text":"<p>Problem: Cannot download packages <pre><code># Solution: Configure proxy if behind firewall\nexport http_proxy=http://your-proxy:port\nexport https_proxy=http://your-proxy:port\nsudo -E apt update\n</code></pre></p>"},{"location":"software-configuration/deployment-setup/#performance-optimization","title":"Performance Optimization","text":""},{"location":"software-configuration/deployment-setup/#cpu-governor","title":"CPU Governor","text":"<pre><code># Set to performance mode\necho performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor\n</code></pre>"},{"location":"software-configuration/deployment-setup/#memory-settings","title":"Memory Settings","text":"<pre><code># Disable swap for real-time performance\nsudo swapoff -a\n# Comment out swap line in /etc/fstab\n</code></pre>"},{"location":"software-configuration/deployment-setup/#network-optimization","title":"Network Optimization","text":"<pre><code># Increase network buffer sizes\nsudo sysctl -w net.core.rmem_max=134217728\nsudo sysctl -w net.core.wmem_max=134217728\nsudo sysctl -w net.ipv4.tcp_rmem=\"4096 87380 134217728\"\nsudo sysctl -w net.ipv4.tcp_wmem=\"4096 65536 134217728\"\n</code></pre>"},{"location":"software-configuration/deployment-setup/#next-steps","title":"Next Steps","text":"<p>With the base system configured, proceed to:</p> <ol> <li>x86-based ECU Configuration for Intel/AMD platforms</li> <li>ARM-based ECU Configuration for NVIDIA Jetson platforms</li> <li>RMW Zenoh Setup for alternative middleware configuration</li> </ol>"},{"location":"software-configuration/deployment-setup/#additional-resources","title":"Additional Resources","text":"<ul> <li>Autoware Documentation</li> <li>ROS 2 Humble Documentation</li> <li>NVIDIA CUDA Installation Guide</li> <li>Ubuntu Real-Time Kernel Setup</li> </ul>"},{"location":"software-configuration/rmw_zenoh/","title":"RMW Zenoh Configuration for Autoware","text":""},{"location":"software-configuration/rmw_zenoh/#overview","title":"Overview","text":"<p>RMW Zenoh is a next-generation middleware for ROS 2 that provides significant advantages over traditional DDS implementations. As of ROS 2 Kilted (and backported to Humble), Zenoh has achieved Tier 1 support status, making it a production-ready alternative for Autoware deployments in Low Speed Autonomy applications.</p>"},{"location":"software-configuration/rmw_zenoh/#why-choose-rmw-zenoh-for-lsa","title":"Why Choose RMW Zenoh for LSA?","text":""},{"location":"software-configuration/rmw_zenoh/#performance-benefits","title":"Performance Benefits","text":"<ul> <li>Lower Latency: Up to 50% reduction in message latency compared to DDS</li> <li>Higher Throughput: Better performance with large data streams (pointclouds, images)</li> <li>Efficient Resource Usage: Lower CPU and memory footprint</li> <li>Wireless Optimization: Superior performance on WiFi and cellular networks</li> </ul>"},{"location":"software-configuration/rmw_zenoh/#operational-advantages","title":"Operational Advantages","text":"<ul> <li>Zero Configuration: Works out-of-the-box without complex QoS tuning</li> <li>Cloud Native: Seamless operation across local networks and internet</li> <li>Cellular Support: Native unicast support for 4G/5G networks</li> <li>Simplified Debugging: Built-in tools for monitoring and troubleshooting</li> </ul>"},{"location":"software-configuration/rmw_zenoh/#lsa-specific-benefits","title":"LSA-Specific Benefits","text":"<ul> <li>Multi-Vehicle Coordination: Easy vehicle-to-vehicle communication</li> <li>Remote Monitoring: Direct cloud connectivity for fleet management</li> <li>Edge Computing: Efficient offloading to edge servers</li> <li>Scalability: Handles growing fleet sizes without reconfiguration</li> </ul>"},{"location":"software-configuration/rmw_zenoh/#installation","title":"Installation","text":""},{"location":"software-configuration/rmw_zenoh/#prerequisites","title":"Prerequisites","text":"<p>Ensure you have completed the base Deployment Setup before proceeding.</p>"},{"location":"software-configuration/rmw_zenoh/#install-rmw-zenoh","title":"Install RMW Zenoh","text":""},{"location":"software-configuration/rmw_zenoh/#method-1-debian-package-recommended","title":"Method 1: Debian Package (Recommended)","text":"<pre><code># Add RMW Zenoh repository\nsudo apt update\nsudo apt install software-properties-common\nsudo add-apt-repository ppa:rmw-zenoh/stable\nsudo apt update\n\n# Install RMW Zenoh\nsudo apt install ros-humble-rmw-zenoh-cpp\n\n# Install Zenoh router (optional but recommended)\nsudo apt install zenoh-router\n</code></pre>"},{"location":"software-configuration/rmw_zenoh/#method-2-build-from-source","title":"Method 2: Build from Source","text":"<pre><code># Clone repository\ncd ~/ros2_ws/src\ngit clone https://github.com/ros2/rmw_zenoh.git -b humble\ngit clone https://github.com/eclipse-zenoh/zenoh-c.git\ngit clone https://github.com/eclipse-zenoh/zenoh-plugin-ros2dds.git\n\n# Install dependencies\ncd ~/ros2_ws\nrosdep install --from-paths src --ignore-src -r -y\n\n# Build\ncolcon build --packages-up-to rmw_zenoh_cpp\n</code></pre>"},{"location":"software-configuration/rmw_zenoh/#configuration","title":"Configuration","text":""},{"location":"software-configuration/rmw_zenoh/#basic-configuration","title":"Basic Configuration","text":""},{"location":"software-configuration/rmw_zenoh/#1-set-rmw-implementation","title":"1. Set RMW Implementation","text":"<pre><code># Add to ~/.bashrc\necho 'export RMW_IMPLEMENTATION=rmw_zenoh_cpp' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Verify\necho $RMW_IMPLEMENTATION\n</code></pre>"},{"location":"software-configuration/rmw_zenoh/#2-create-zenoh-configuration","title":"2. Create Zenoh Configuration","text":"<pre><code># Create config directory\nmkdir -p ~/.config/autoware/zenoh\n\n# Create basic configuration\ncat &gt; ~/.config/autoware/zenoh/config.json5 &lt;&lt; 'EOF'\n{\n  // Zenoh configuration for Autoware LSA\n  mode: \"client\",\n\n  // Network configuration\n  listen: {\n    endpoints: [\n      \"tcp/0.0.0.0:7447\",\n      \"udp/0.0.0.0:7447\"\n    ]\n  },\n\n  // Connect to local router\n  connect: {\n    endpoints: [\n      \"tcp/localhost:7447\"\n    ]\n  },\n\n  // Scouting for peer discovery\n  scouting: {\n    multicast: {\n      enabled: true,\n      address: \"224.0.0.224:7446\",\n      interface: \"auto\"\n    },\n    delay: 200\n  },\n\n  // QoS settings optimized for Autoware\n  qos: {\n    reliability: \"reliable\",\n    congestion_control: \"drop\",\n    express: true\n  }\n}\nEOF\n</code></pre>"},{"location":"software-configuration/rmw_zenoh/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"software-configuration/rmw_zenoh/#multi-vehicle-setup","title":"Multi-Vehicle Setup","text":"<pre><code>// zenoh-multi-vehicle.json5\n{\nmode: \"peer\",\n\n// Vehicle identification\nid: \"vehicle_001\",\n\n// Multi-vehicle discovery\nscouting: {\nmulticast: {\nenabled: true,\naddress: \"224.0.0.224:7446\"\n},\ngossip: {\nenabled: true,\nmultihop: true\n}\n},\n\n// Namespace isolation\nplugins: {\nros2: {\nnamespace: \"/vehicle_001\",\ndomain: 42\n}\n}\n}\n</code></pre>"},{"location":"software-configuration/rmw_zenoh/#cloud-connectivity","title":"Cloud Connectivity","text":"<pre><code>// zenoh-cloud.json5\n{\nmode: \"client\",\n\n// Connect to cloud router\nconnect: {\nendpoints: [\n\"tls/cloud.example.com:7447\"\n],\n// Authentication\nauth: {\nusrpwd: {\nuser: \"vehicle_001\",\npassword: \"${ZENOH_PASSWORD}\"\n}\n}\n},\n\n// TLS configuration\ntls: {\nroot_ca_certificate: \"/etc/autoware/certs/ca.pem\",\nclient_certificate: \"/etc/autoware/certs/client.pem\",\nclient_private_key: \"/etc/autoware/certs/client.key\"\n}\n}\n</code></pre>"},{"location":"software-configuration/rmw_zenoh/#deployment-patterns","title":"Deployment Patterns","text":""},{"location":"software-configuration/rmw_zenoh/#1-single-vehicle-configuration","title":"1. Single Vehicle Configuration","text":"<pre><code># Start Zenoh router (optional)\nzenoh-router --config ~/.config/autoware/zenoh/config.json5 &amp;\n\n# Launch Autoware with Zenoh\nexport RMW_IMPLEMENTATION=rmw_zenoh_cpp\nexport ZENOH_CONFIG=~/.config/autoware/zenoh/config.json5\nros2 launch autoware_launch autoware.launch.xml\n</code></pre>"},{"location":"software-configuration/rmw_zenoh/#2-fleet-configuration","title":"2. Fleet Configuration","text":"<pre><code># ansible/roles/zenoh_fleet/tasks/main.yml\n---\n- name: Deploy Zenoh router configuration\ntemplate:\nsrc: zenoh-router.json5.j2\ndest: /etc/zenoh/router.json5\nvars:\nfleet_id: \"{{ fleet_name }}\"\nvehicle_id: \"{{ ansible_hostname }}\"\n\n- name: Create systemd service for Zenoh router\ntemplate:\nsrc: zenoh-router.service.j2\ndest: /etc/systemd/system/zenoh-router.service\n\n- name: Start Zenoh router\nsystemd:\nname: zenoh-router\nenabled: yes\nstate: started\n</code></pre>"},{"location":"software-configuration/rmw_zenoh/#3-edge-computing-integration","title":"3. Edge Computing Integration","text":"<pre><code>#!/usr/bin/env python3\n# edge_compute_bridge.py\n\nimport zenoh\nimport json\nfrom autoware_auto_msgs.msg import DetectedObjects\n\nclass EdgeComputeBridge:\n    def __init__(self):\n        # Initialize Zenoh\n        self.session = zenoh.open(zenoh.Config.from_file(\"edge-config.json5\"))\n\n        # Subscribe to vehicle data\n        self.sub = self.session.declare_subscriber(\n            \"autoware/*/perception/objects\",\n            self.on_detection\n        )\n\n        # Publisher for processed results\n        self.pub = self.session.declare_publisher(\n            \"edge/processed/tracks\"\n        )\n\n    def on_detection(self, sample):\n        # Process detection data on edge\n        objects = json.loads(sample.payload.decode())\n        processed = self.process_detections(objects)\n\n        # Publish back to vehicles\n        self.pub.put(json.dumps(processed))\n</code></pre>"},{"location":"software-configuration/rmw_zenoh/#performance-tuning","title":"Performance Tuning","text":""},{"location":"software-configuration/rmw_zenoh/#network-optimization","title":"Network Optimization","text":"<pre><code># Increase UDP buffer sizes\nsudo sysctl -w net.core.rmem_max=26214400\nsudo sysctl -w net.core.rmem_default=26214400\nsudo sysctl -w net.core.wmem_max=26214400\nsudo sysctl -w net.core.wmem_default=26214400\n\n# Make persistent\necho \"net.core.rmem_max=26214400\" | sudo tee -a /etc/sysctl.conf\necho \"net.core.wmem_max=26214400\" | sudo tee -a /etc/sysctl.conf\n</code></pre>"},{"location":"software-configuration/rmw_zenoh/#zenoh-specific-tuning","title":"Zenoh-Specific Tuning","text":"<pre><code>// zenoh-performance.json5\n{\n// Performance optimizations\ntransport: {\nunicast: {\nmax_sessions: 1000,\nmax_links: 4\n},\nmulticast: {\nmax_sessions: 1000\n},\nqos: {\nenabled: true\n},\nlink: {\ntx: {\nsequence_number_resolution: 268435456,  // 2^28\nlease: 10000,\nkeep_alive: 4,\nbatch_size: 65535\n},\nrx: {\nbuffer_size: 65535,\nmax_message_size: 1073741824  // 1GB\n}\n}\n},\n\n// Shared memory for local communication\nshared_memory: {\nenabled: true,\nsize: 268435456  // 256MB\n}\n}\n</code></pre>"},{"location":"software-configuration/rmw_zenoh/#monitoring-and-metrics","title":"Monitoring and Metrics","text":"<pre><code># Enable Zenoh REST API\nzenoh-router --rest-http-port 8000 &amp;\n\n# Query router statistics\ncurl http://localhost:8000/@/router/local\n\n# Monitor real-time statistics\nwatch -n 1 'curl -s http://localhost:8000/@/router/local/stats'\n</code></pre>"},{"location":"software-configuration/rmw_zenoh/#integration-with-autoware","title":"Integration with Autoware","text":""},{"location":"software-configuration/rmw_zenoh/#launch-file-configuration","title":"Launch File Configuration","text":"<pre><code>&lt;!-- autoware_zenoh.launch.xml --&gt;\n&lt;launch&gt;\n&lt;!-- Set RMW implementation --&gt;\n&lt;env name=\"RMW_IMPLEMENTATION\" value=\"rmw_zenoh_cpp\"/&gt;\n\n&lt;!-- Zenoh configuration file --&gt;\n&lt;env name=\"ZENOH_CONFIG\" value=\"$(find-pkg-share autoware_launch)/config/zenoh.json5\"/&gt;\n\n&lt;!-- Vehicle namespace for multi-vehicle --&gt;\n&lt;arg name=\"vehicle_id\" default=\"vehicle_1\"/&gt;\n&lt;group&gt;\n&lt;push-ros-namespace namespace=\"$(var vehicle_id)\"/&gt;\n\n&lt;!-- Include standard Autoware launch --&gt;\n&lt;include file=\"$(find-pkg-share autoware_launch)/launch/autoware.launch.xml\"&gt;\n&lt;arg name=\"use_sim_time\" value=\"false\"/&gt;\n&lt;/include&gt;\n&lt;/group&gt;\n&lt;/launch&gt;\n</code></pre>"},{"location":"software-configuration/rmw_zenoh/#ros-2-parameter-bridge","title":"ROS 2 Parameter Bridge","text":"<p>For hybrid DDS/Zenoh deployments:</p> <pre><code># zenoh_dds_bridge.yaml\nros2_to_zenoh_bridge:\nros__parameters:\n# Topics to bridge from ROS 2 (DDS) to Zenoh\ndds_to_zenoh:\n- topic: /sensing/lidar/concatenated/pointcloud\nqos: sensor_data\n- topic: /perception/object_recognition/objects\nqos: reliable\n\n# Topics to bridge from Zenoh to ROS 2 (DDS)\nzenoh_to_dds:\n- topic: /planning/scenario_planning/trajectory\nqos: reliable\n- topic: /control/command/control_cmd\nqos: reliable\n</code></pre>"},{"location":"software-configuration/rmw_zenoh/#troubleshooting","title":"Troubleshooting","text":""},{"location":"software-configuration/rmw_zenoh/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Discovery Problems <pre><code># Check multicast is enabled\nip maddr show | grep 224.0.0.224\n\n# Test Zenoh discovery\nzenoh-scouter\n</code></pre></p> </li> <li> <p>Performance Issues <pre><code># Check for packet drops\nnetstat -su | grep -i drop\n\n# Monitor Zenoh internals\nRUST_LOG=debug zenoh-router\n</code></pre></p> </li> <li> <p>Connection Failures <pre><code># Verify firewall rules\nsudo ufw status\nsudo ufw allow 7447/tcp\nsudo ufw allow 7447/udp\nsudo ufw allow 7446/udp  # Multicast discovery\n</code></pre></p> </li> </ol>"},{"location":"software-configuration/rmw_zenoh/#migration-from-dds","title":"Migration from DDS","text":""},{"location":"software-configuration/rmw_zenoh/#gradual-migration-strategy","title":"Gradual Migration Strategy","text":"<ol> <li> <p>Phase 1: Run Zenoh in parallel with DDS <pre><code># Keep DDS for critical topics\nexport RMW_IMPLEMENTATION=rmw_cyclonedds_cpp\nros2 run critical_safety_node &amp;\n\n# Use Zenoh for perception/planning\nexport RMW_IMPLEMENTATION=rmw_zenoh_cpp\nros2 launch perception_pipeline\n</code></pre></p> </li> <li> <p>Phase 2: Use bridge for transition <pre><code>ros2 run zenoh_dds_bridge zenoh_dds_bridge --config bridge.yaml\n</code></pre></p> </li> <li> <p>Phase 3: Full Zenoh deployment <pre><code>export RMW_IMPLEMENTATION=rmw_zenoh_cpp\nros2 launch autoware_launch autoware.launch.xml\n</code></pre></p> </li> </ol>"},{"location":"software-configuration/rmw_zenoh/#best-practices","title":"Best Practices","text":""},{"location":"software-configuration/rmw_zenoh/#security","title":"Security","text":"<ul> <li>Always use TLS for cloud connections</li> <li>Implement access control lists (ACL) for topics</li> <li>Rotate authentication credentials regularly</li> <li>Monitor for unauthorized connections</li> </ul>"},{"location":"software-configuration/rmw_zenoh/#reliability","title":"Reliability","text":"<ul> <li>Deploy redundant Zenoh routers</li> <li>Use persistent storage for critical data</li> <li>Implement health checking</li> <li>Plan for network partitions</li> </ul>"},{"location":"software-configuration/rmw_zenoh/#performance","title":"Performance","text":"<ul> <li>Use shared memory for local communication</li> <li>Tune batch sizes for your network</li> <li>Monitor latency and throughput</li> <li>Profile with Zenoh tools</li> </ul>"},{"location":"software-configuration/rmw_zenoh/#resources","title":"Resources","text":"<ul> <li>Official Tutorial: Autoware with RMW Zenoh</li> <li>Zenoh Documentation: https://zenoh.io/docs/</li> <li>ROS 2 RMW Zenoh: https://github.com/ros2/rmw_zenoh</li> <li>Performance Benchmarks: Zenoh Performance Study</li> </ul>"},{"location":"software-configuration/rmw_zenoh/#next-steps","title":"Next Steps","text":"<ul> <li>Configure platform-specific optimizations for x86 or ARM</li> <li>Implement fleet management with Zenoh routers</li> <li>Set up cloud connectivity for remote monitoring</li> <li>Explore edge computing patterns with Zenoh</li> </ul>"},{"location":"software-configuration/x86-based_ECU/","title":"Software Configuration for x86-based ECUs","text":"<p>This guide provides comprehensive instructions for deploying Autoware on x86-based ECUs (Intel/AMD platforms) for Low Speed Autonomy vehicles.</p>"},{"location":"software-configuration/x86-based_ECU/#system-preparation","title":"System Preparation","text":""},{"location":"software-configuration/x86-based_ECU/#biosuefi-configuration","title":"BIOS/UEFI Configuration","text":"<p>Configure BIOS settings for optimal performance:</p> <pre><code>1. Disable Secure Boot (required for custom kernel modules)\n2. Enable Above 4G Decoding (for GPU memory mapping)\n3. Set Power Profile to \"Performance\"\n4. Disable C-States for reduced latency\n5. Enable Intel VT-x/AMD-V (for containerization)\n6. Set PCIe to Gen 4.0 (if supported)\n</code></pre>"},{"location":"software-configuration/x86-based_ECU/#operating-system-installation","title":"Operating System Installation","text":"<p>Follow the base Deployment Setup Guide for Ubuntu 22.04 installation, then apply x86-specific configurations:</p> <pre><code># Install x86-specific packages\nsudo apt install -y \\\nintel-microcode \\\namd64-microcode \\\nlinux-tools-generic \\\ncpufrequtils \\\ni7z \\\npowertop\n\n# Install real-time kernel (optional but recommended)\nsudo apt install -y linux-realtime\n</code></pre>"},{"location":"software-configuration/x86-based_ECU/#cuda-and-gpu-configuration","title":"CUDA and GPU Configuration","text":""},{"location":"software-configuration/x86-based_ECU/#1-cuda-toolkit-installation","title":"1. CUDA Toolkit Installation","text":"<p>(This part should be moved to hardware-dependent instructions.)</p> <p>Using the following instructions to install the toolkit of nVidia CUDA. </p> <pre><code># Add NVIDIA network package repositories\nwget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb\nsudo dpkg -i cuda-keyring_1.1-1_all.deb\nsudo apt update\n\n# Install CUDA toolkit\nsudo apt install -y cuda-12-3\n\n# Add CUDA to PATH\necho 'export PATH=/usr/local/cuda-12.3/bin:$PATH' &gt;&gt; ~/.bashrc\necho 'export LD_LIBRARY_PATH=/usr/local/cuda-12.3/lib64:$LD_LIBRARY_PATH' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Verify installation\nnvidia-smi\nnvcc --version\n</code></pre>"},{"location":"software-configuration/x86-based_ECU/#2-install-nvidia-drivers","title":"2. Install NVIDIA Drivers","text":"<pre><code># Remove any existing NVIDIA installations\nsudo apt remove --purge '^nvidia-.*'\nsudo apt autoremove\n\n# Add NVIDIA PPA\nsudo add-apt-repository ppa:graphics-drivers/ppa\nsudo apt update\n\n# Install recommended driver\nubuntu-drivers devices  # Check recommended version\nsudo apt install nvidia-driver-535  # Or latest recommended\n\n# Reboot\nsudo reboot\n</code></pre>"},{"location":"software-configuration/x86-based_ECU/#3-configure-gpu-for-compute","title":"3. Configure GPU for Compute","text":"<pre><code># Set GPU to persistence mode\nsudo nvidia-smi -pm 1\n\n# Set application clock speeds to maximum\nsudo nvidia-smi -ac 6001,1980  # RTX 4090 example\n\n# Configure GPU for compute mode\nsudo nvidia-smi -c EXCLUSIVE_PROCESS\n\n# Verify configuration\nnvidia-smi -q -d PERFORMANCE\n</code></pre>"},{"location":"software-configuration/x86-based_ECU/#4-install-cuda-toolkit","title":"4. Install CUDA Toolkit","text":"<pre><code># Install CUDA 12.3 (matching driver version)\nwget https://developer.download.nvidia.com/compute/cuda/12.3.0/local_installers/cuda_12.3.0_545.23.06_linux.run\nsudo sh cuda_12.3.0_545.23.06_linux.run --silent --toolkit\n\n# Install cuDNN\nwget https://developer.download.nvidia.com/compute/cudnn/9.0.0/local_installers/cudnn_9.0.0_linux.deb\nsudo dpkg -i cudnn_9.0.0_linux.deb\n\n# Install TensorRT\nsudo apt install tensorrt\n</code></pre>"},{"location":"software-configuration/x86-based_ECU/#sensor-configuration","title":"Sensor Configuration","text":""},{"location":"software-configuration/x86-based_ECU/#lidar-integration","title":"LiDAR Integration","text":""},{"location":"software-configuration/x86-based_ECU/#velodyne-lidar-setup","title":"Velodyne LiDAR Setup","text":"<pre><code># Install Velodyne ROS 2 driver\nsudo apt install ros-humble-velodyne\n\n# Configure network interface\nsudo nmcli con add type ethernet \\\ncon-name lidar-velodyne \\\nifname enp2s0 \\\nip4 192.168.1.100/24\n\n# Create configuration file\nmkdir -p ~/autoware_config/sensors\ncat &gt; ~/autoware_config/sensors/velodyne.yaml &lt;&lt; EOF\n/**:\n  ros__parameters:\n    device_ip: \"192.168.1.201\"\n    port: 2368\n    model: \"VLP32C\"\n    rpm: 600\n    time_offset: 0.0\n    enabled: true\n    read_once: false\n    read_fast: false\n    repeat_delay: 0.0\nEOF\n</code></pre>"},{"location":"software-configuration/x86-based_ECU/#ouster-lidar-setup","title":"Ouster LiDAR Setup","text":"<pre><code># Install Ouster ROS 2 driver\nsudo apt install ros-humble-ros2-ouster\n\n# Configure with DMA optimizations\necho 2048 | sudo tee /proc/sys/vm/nr_hugepages\n</code></pre>"},{"location":"software-configuration/x86-based_ECU/#camera-configuration","title":"Camera Configuration","text":""},{"location":"software-configuration/x86-based_ECU/#usb-cameras","title":"USB Cameras","text":"<pre><code># Install USB camera drivers\nsudo apt install ros-humble-usb-cam\n\n# Configure udev rules for consistent naming\necho 'SUBSYSTEM==\"video4linux\", ATTRS{idVendor}==\"046d\", SYMLINK+=\"video_front\"' | \\\nsudo tee /etc/udev/rules.d/99-camera.rules\nsudo udevadm control --reload-rules\n</code></pre>"},{"location":"software-configuration/x86-based_ECU/#gige-vision-cameras","title":"GigE Vision Cameras","text":"<pre><code># Install GigE Vision support\nsudo apt install ros-humble-camera-aravis\n\n# Optimize network settings\nsudo sysctl -w net.core.rmem_max=33554432\nsudo sysctl -w net.core.rmem_default=33554432\n</code></pre>"},{"location":"software-configuration/x86-based_ECU/#can-bus-interface","title":"CAN Bus Interface","text":"<pre><code># Install SocketCAN utilities\nsudo apt install can-utils\n\n# Load kernel modules\nsudo modprobe can\nsudo modprobe can_raw\nsudo modprobe vcan\n\n# Configure CAN interface\nsudo ip link set can0 type can bitrate 500000\nsudo ip link set up can0\n\n# Create systemd service for automatic setup\nsudo tee /etc/systemd/system/can-setup.service &lt;&lt; EOF\n[Unit]\nDescription=Setup CAN interfaces\nAfter=network.target\n\n[Service]\nType=oneshot\nExecStart=/usr/local/bin/setup-can.sh\nRemainAfterExit=yes\n\n[Install]\nWantedBy=multi-user.target\nEOF\n</code></pre>"},{"location":"software-configuration/x86-based_ECU/#autoware-deployment","title":"Autoware Deployment","text":""},{"location":"software-configuration/x86-based_ECU/#1-install-autoware-components","title":"1. Install Autoware Components","text":"<p>Follow the general installation from Deployment Setup, then add x86-specific optimizations:</p>"},{"location":"software-configuration/x86-based_ECU/#11-configure-autoware-apt-repository","title":"1.1 Configure Autoware APT Repository","text":"<pre><code># Download and install repository configuration\nwget https://github.com/autowarefoundation/autoware/releases/latest/download/autoware-apt-config.deb\nsudo dpkg -i autoware-apt-config.deb\n\n# Update package lists\nsudo apt update\n</code></pre>"},{"location":"software-configuration/x86-based_ECU/#12-deploy-autoware-core-packages","title":"1.2. Deploy Autoware Core Packages","text":"<pre><code># Install complete Autoware stack\nsudo apt install -y autoware-universe\n\n# Or install specific components\nsudo apt install -y \\\nautoware-common \\\nautoware-control \\\nautoware-localization \\\nautoware-perception \\\nautoware-planning\n</code></pre>"},{"location":"software-configuration/x86-based_ECU/#13-configure-environment","title":"1.3. Configure Environment","text":"<pre><code># Add Autoware setup to bashrc\necho \"source /opt/autoware/setup.bash\" &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Verify installation\nros2 pkg list | grep autoware\n</code></pre>"},{"location":"software-configuration/x86-based_ECU/#14-post-installation-verification","title":"1.4 Post-Installation Verification","text":"<p>This section uses a shell script to verify if the Autoware is successfully deployed to the system. </p>"},{"location":"software-configuration/x86-based_ECU/#system-check-script","title":"System Check Script","text":"<p>The first step is to create a verification script:</p> <p><pre><code>cat &gt; verify-installation.sh &lt;&lt; 'EOF'\n#!/bin/bash\n\necho \"=== System Verification ===\"\necho \"OS Version: $(lsb_release -d | cut -f2)\"\necho \"Kernel: $(uname -r)\"\necho \"\"\n\necho \"=== CUDA Verification ===\"\nif command -v nvidia-smi &amp;&gt; /dev/null; then\n    nvidia-smi --query-gpu=name,driver_version,memory.total --format=csv,noheader\nelse\n    echo \"NVIDIA driver not found\"\nfi\n\nif command -v nvcc &amp;&gt; /dev/null; then\n    echo \"CUDA Version: $(nvcc --version | grep release | awk '{print $6}')\"\nelse\n    echo \"CUDA not found\"\nfi\necho \"\"\n\necho \"=== ROS 2 Verification ===\"\nif [ -f /opt/ros/humble/setup.bash ]; then\n    source /opt/ros/humble/setup.bash\n    echo \"ROS 2 Distro: $ROS_DISTRO\"\n    echo \"ROS 2 Version: $(ros2 --version 2&gt;&amp;1 | grep '^ros2')\"\nelse\n    echo \"ROS 2 not found\"\nfi\necho \"\"\n\necho \"=== Autoware Verification ===\"\nif [ -f /opt/autoware/setup.bash ]; then\n    source /opt/autoware/setup.bash\n    echo \"Autoware packages installed: $(ros2 pkg list | grep -c autoware)\"\nelse\n    echo \"Autoware not found\"\nfi\nEOF\n</code></pre> You can also download the file and move the shell script to the working directory.</p>"},{"location":"software-configuration/x86-based_ECU/#verify-the-deployment","title":"Verify the deployment","text":"<p>The last step executes the verification script to verify the deployment. </p> <pre><code>chmod +x verify-installation.sh\n./verify-installation.sh\n</code></pre>"},{"location":"software-configuration/x86-based_ECU/#15-add-x86-specific-optimizations","title":"1.5 Add x86-specific optimizations:","text":"<pre><code># Install performance analysis tools\nsudo apt install -y \\\nros-humble-rqt-top \\\nros-humble-rqt-tf-tree \\\nhtop \\\nnvtop \\\nlinux-tools-common \\\nlinux-tools-generic\n\n# Install x86-optimized libraries\nsudo apt install -y \\\nlibtbb-dev \\\nlibopenblas-dev \\\nliblapack-dev\n</code></pre>"},{"location":"software-configuration/x86-based_ECU/#2-configure-autoware-for-x86","title":"2. Configure Autoware for x86","text":"<p>Create optimized launch configuration:</p> <pre><code>cat &gt; ~/autoware_config/x86_optimization.yaml &lt;&lt; EOF\n/**:\n  ros__parameters:\n    # CPU optimization\n    use_sim_time: false\n    num_threads: 16  # Adjust based on CPU cores\n\n    # GPU optimization\n    gpu_device_id: 0\n    use_tensorrt: true\n    tensorrt_precision: \"FP16\"\n\n    # Memory optimization\n    pointcloud_buffer_size: 100\n    image_buffer_size: 30\n\n    # Perception settings\n    perception:\n      lidar:\n        detection_method: \"centerpoint\"\n        use_gpu_preprocessing: true\n      camera:\n        detection_method: \"yolox\"\n        model_type: \"yolox-sPlus\"\nEOF\n</code></pre>"},{"location":"software-configuration/x86-based_ECU/#3-system-service-configuration","title":"3. System Service Configuration","text":"<p>Create systemd service for Autoware:</p> <pre><code>sudo tee /etc/systemd/system/autoware.service &lt;&lt; EOF\n[Unit]\nDescription=Autoware Universe\nAfter=network.target\n\n[Service]\nType=simple\nUser=autoware\nEnvironment=\"ROS_DOMAIN_ID=42\"\nEnvironment=\"RMW_IMPLEMENTATION=rmw_cyclonedds_cpp\"\nExecStart=/opt/autoware/scripts/start_autoware.sh\nRestart=on-failure\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable autoware.service\n</code></pre>"},{"location":"software-configuration/x86-based_ECU/#performance-optimization","title":"Performance Optimization","text":""},{"location":"software-configuration/x86-based_ECU/#cpu-optimization","title":"CPU Optimization","text":"<pre><code># Set CPU governor to performance\nfor cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do\necho performance | sudo tee $cpu\ndone\n\n# Disable CPU frequency scaling\nsudo systemctl disable ondemand\n\n# Pin Autoware processes to specific cores\n# Add to launch file:\n# &lt;node pkg=\"...\" exec=\"...\" cpu_affinity=\"0-7\"&gt;\n</code></pre>"},{"location":"software-configuration/x86-based_ECU/#memory-optimization","title":"Memory Optimization","text":"<pre><code># Configure huge pages\necho 1024 | sudo tee /proc/sys/vm/nr_hugepages\n\n# Disable transparent huge pages\necho never | sudo tee /sys/kernel/mm/transparent_hugepage/enabled\n\n# Set memory swappiness\necho 10 | sudo tee /proc/sys/vm/swappiness\n</code></pre>"},{"location":"software-configuration/x86-based_ECU/#network-optimization","title":"Network Optimization","text":"<pre><code># Increase ring buffer sizes\nsudo ethtool -G enp1s0 rx 4096 tx 4096\n\n# Enable interrupt coalescing\nsudo ethtool -C enp1s0 adaptive-rx on adaptive-tx on\n\n# Configure IRQ affinity\nsudo systemctl enable irqbalance\n</code></pre>"},{"location":"software-configuration/x86-based_ECU/#performance-evaluation","title":"Performance Evaluation","text":""},{"location":"software-configuration/x86-based_ECU/#monitoring-tools","title":"Monitoring Tools","text":"<ol> <li> <p>System Monitoring <pre><code># CPU and Memory\nhtop\n# GPU\nnvtop\nnvidia-smi dmon -s pucvmet\n# Network\niftop -i enp1s0\n</code></pre></p> </li> <li> <p>ROS 2 Performance <pre><code># Node performance\nros2 run rqt_top rqt_top\n# Topic bandwidth\nros2 topic bw /sensing/lidar/concatenated/pointcloud\n# Latency measurement\nros2 run performance_test perf_test -c ROS2 -t Array1k\n</code></pre></p> </li> </ol>"},{"location":"software-configuration/x86-based_ECU/#expected-performance-metrics","title":"Expected Performance Metrics","text":"Component Target FPS CPU Usage GPU Usage Latency LiDAR Detection 10 Hz 20-30% 40-60% &lt;100ms Camera Detection 15 Hz 15-25% 50-70% &lt;80ms Planning 10 Hz 30-40% N/A &lt;50ms Control 50 Hz 10-15% N/A &lt;20ms"},{"location":"software-configuration/x86-based_ECU/#profiling-and-optimization","title":"Profiling and Optimization","text":"<pre><code># CPU profiling\nperf record -g ros2 launch autoware_launch autoware.launch.xml\nperf report\n\n# GPU profiling\nnsys profile -o autoware_profile ros2 launch autoware_launch autoware.launch.xml\nnsys-ui autoware_profile.nsys-rep\n\n# Memory profiling\nvalgrind --tool=massif ros2 run perception_node perception_node\nms_print massif.out.*\n</code></pre>"},{"location":"software-configuration/x86-based_ECU/#troubleshooting","title":"Troubleshooting","text":""},{"location":"software-configuration/x86-based_ECU/#common-issues","title":"Common Issues","text":"<ol> <li> <p>GPU Memory Errors <pre><code># Solution: Reduce batch sizes\nexport TF_FORCE_GPU_ALLOW_GROWTH=true\n</code></pre></p> </li> <li> <p>CPU Throttling <pre><code># Check throttling\ncat /sys/devices/system/cpu/cpu*/cpufreq/scaling_cur_freq\n# Solution: Improve cooling or reduce workload\n</code></pre></p> </li> <li> <p>Network Packet Loss <pre><code># Check for drops\nethtool -S enp1s0 | grep drop\n# Solution: Increase buffer sizes\n</code></pre></p> </li> </ol>"},{"location":"software-configuration/x86-based_ECU/#next-steps","title":"Next Steps","text":"<ul> <li>Configure RMW Zenoh for improved middleware performance</li> <li>Review ARM-based ECU documentation for comparison</li> <li>Implement custom sensor drivers for your specific hardware</li> </ul>"},{"location":"software-configuration/x86-based_ECU/customization/","title":"Macro Syntax Error","text":"<p>File: <code>software-configuration/x86-based_ECU/customization.md</code></p> <p>Line 361 in Markdown file: No filter named 'regex_search'. <pre><code>    platform_type: \"{{ ansible_processor[1] | regex_search('Intel|AMD') | lower }}\"\n</code></pre></p>"},{"location":"system-configuration/","title":"System Configuration","text":"<p>(To be completed)</p> <p>The section describes the system configuration of the LSA vehicles. It shows the options to design your own LSA vehicles. The configuration consists of ECU selection, development approach, middleware candidates, etc. </p>"},{"location":"system-configuration/#key-considerations","title":"Key Considerations","text":""},{"location":"system-configuration/#hardware-selection","title":"Hardware Selection","text":"<ul> <li> <p>ARM ECUs: Superior power efficiency, integrated GPU/DLA acceleration, compact form factor</p> </li> <li> <p>x86 ECUs: Better for high-compute perception tasks, easier software compatibility</p> </li> </ul>"},{"location":"system-configuration/#recommended-hardware-configurations","title":"Recommended Hardware Configurations","text":"<p>For X86-based ECUs, there are configurations for different use scearios. </p>"},{"location":"system-configuration/#high-performance-configuration","title":"High-Performance Configuration","text":"<ul> <li>CPU: Intel Core i9-13900K or AMD Ryzen 9 7950X (16+ cores)</li> <li>RAM: 64 GB DDR5</li> <li>GPU: NVIDIA RTX 4090 or RTX A6000</li> <li>Storage: 1TB NVMe SSD (PCIe 4.0)</li> <li>Network: Dual 10GbE interfaces</li> <li>Power: 850W+ PSU with redundancy</li> </ul>"},{"location":"system-configuration/#standard-configuration","title":"Standard Configuration","text":"<ul> <li>CPU: Intel Core i7-12700K or AMD Ryzen 7 7700X (8+ cores)</li> <li>RAM: 32 GB DDR4/DDR5</li> <li>GPU: NVIDIA RTX 3080 or RTX A4000</li> <li>Storage: 512GB NVMe SSD</li> <li>Network: Gigabit Ethernet</li> <li>Power: 650W PSU</li> </ul>"},{"location":"system-configuration/#minimum-configuration","title":"Minimum Configuration","text":"<ul> <li>CPU: Intel Core i5-12600K or AMD Ryzen 5 5600X (6+ cores)</li> <li>RAM: 16 GB DDR4</li> <li>GPU: NVIDIA RTX 3060 or T1000</li> <li>Storage: 256GB SSD</li> <li>Network: Gigabit Ethernet</li> <li>Power: 550W PSU</li> </ul>"},{"location":"system-configuration/#industrialvehicle-grade-options","title":"Industrial/Vehicle-Grade Options","text":"<ul> <li>Neousys Nuvo-8108GC: Rugged x86 platform with RTX GPU support</li> <li>Advantech MIC-770: Compact industrial PC with GPU expansion</li> <li>Crystal Group RS363S: MIL-SPEC certified with NVIDIA GPU</li> </ul>"},{"location":"system-configuration/#development-approach","title":"Development Approach","text":"<ul> <li>Native Installation: Direct installation on hardware for maximum performance</li> <li>Containerized Development: Reproducible environments with easier team collaboration (recommended for ARM)</li> </ul>"},{"location":"system-configuration/#middleware-choice","title":"Middleware Choice","text":"<ul> <li>Default DDS: Mature, widely supported, industry standard</li> <li>rmw_zenoh: Modern alternative with better performance for LSA applications</li> </ul>"}]}